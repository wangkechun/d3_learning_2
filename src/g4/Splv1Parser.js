// Generated from src/g4/Splv1Parser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var Splv1ParserListener = require('./Splv1ParserListener').Splv1ParserListener;

var grammarFileName = "Splv1Parser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u0082\u0381\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0005",
    "\u0003y\n\u0003\u0003\u0003\u0003\u0003\u0007\u0003}\n\u0003\f\u0003",
    "\u000e\u0003\u0080\u000b\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u0086\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0007\u0005\u008c\n\u0005\f\u0005\u000e\u0005\u008f\u000b",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0095",
    "\n\u0005\u0003\u0005\u0007\u0005\u0098\n\u0005\f\u0005\u000e\u0005\u009b",
    "\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005",
    "\u00a1\n\u0005\f\u0005\u000e\u0005\u00a4\u000b\u0005\u0003\u0005\u0003",
    "\u0005\u0005\u0005\u00a8\n\u0005\u0003\u0005\u0003\u0005\u0007\u0005",
    "\u00ac\n\u0005\f\u0005\u000e\u0005\u00af\u000b\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00b4\n\u0005\u0003\u0005\u0003\u0005",
    "\u0007\u0005\u00b8\n\u0005\f\u0005\u000e\u0005\u00bb\u000b\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00c0\n\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00c4\n\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0007\u0005\u00ca\n\u0005\f\u0005\u000e\u0005\u00cd",
    "\u000b\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00d1\n\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u00d5\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0005\u0005\u00da\n\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00de\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005",
    "\u00e3\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005",
    "\u0005\u00e9\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u00f1\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00f7\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u00fc\n\u0005\f\u0005\u000e\u0005",
    "\u00ff\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007",
    "\u0005\u0111\n\u0005\f\u0005\u000e\u0005\u0114\u000b\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005",
    "\u011c\n\u0005\f\u0005\u000e\u0005\u011f\u000b\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0125\n\u0005\f\u0005\u000e",
    "\u0005\u0128\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u013a\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0149\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u014f\n",
    "\u0005\f\u0005\u000e\u0005\u0152\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0005\u0005\u0156\n\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u015a",
    "\n\u0005\u0003\u0005\u0007\u0005\u015d\n\u0005\f\u0005\u000e\u0005\u0160",
    "\u000b\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0164\n\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u016b",
    "\n\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0170\n\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u0174\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u017b\n\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0180\n\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0184\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u0192\n",
    "\u0005\f\u0005\u000e\u0005\u0195\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u019b\n\u0005\f\u0005\u000e\u0005",
    "\u019e\u000b\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0007\u0005\u01a3",
    "\n\u0005\f\u0005\u000e\u0005\u01a6\u000b\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0005\u0005\u01ac\n\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u01b1\n\u0005\u0003\u0005\u0005\u0005",
    "\u01b4\n\u0005\u0005\u0005\u01b6\n\u0005\u0003\u0005\u0003\u0005\u0007",
    "\u0005\u01ba\n\u0005\f\u0005\u000e\u0005\u01bd\u000b\u0005\u0003\u0005",
    "\u0005\u0005\u01c0\n\u0005\u0005\u0005\u01c2\n\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0005\t\u01d0\n\t\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e",
    "\u01e8\n\u000e\u0003\u000f\u0007\u000f\u01eb\n\u000f\f\u000f\u000e\u000f",
    "\u01ee\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u01f3",
    "\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u01f8\n\u0011",
    "\f\u0011\u000e\u0011\u01fb\u000b\u0011\u0003\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u0203\n\u0012",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0208\n\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u020d\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u0212\n\u0013\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0005\u0014\u021d\n\u0014\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0005\u0015\u0234\n\u0015\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u0239\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0005\u0017\u024a\n\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0253\n\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u025b\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005",
    "\u0019\u0266\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u026e\n\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001c\u0005\u001c\u0275\n\u001c",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u0279\n\u001c\u0003\u001d\u0003",
    "\u001d\u0005\u001d\u027d\n\u001d\u0003\u001e\u0003\u001e\u0005\u001e",
    "\u0281\n\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0286",
    "\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u028b\n\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0290\n\u001f\u0003",
    "\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0295\n\u001f\u0003 \u0003",
    " \u0005 \u0299\n \u0003!\u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005",
    "#\u02ab\n#\u0003#\u0003#\u0005#\u02af\n#\u0003#\u0003#\u0003#\u0003",
    "#\u0007#\u02b5\n#\f#\u000e#\u02b8\u000b#\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0003$\u0003$\u0003$\u0005$\u02c3\n$\u0003%\u0003%\u0003",
    "%\u0003%\u0005%\u02c9\n%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005",
    "&\u02d1\n&\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u02d7\n\'\f\'\u000e",
    "\'\u02da\u000b\'\u0003\'\u0003\'\u0003(\u0005(\u02df\n(\u0003(\u0003",
    "(\u0003)\u0005)\u02e4\n)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0005*\u02ed\n*\u0003*\u0005*\u02f0\n*\u0003*\u0003*\u0005*\u02f4",
    "\n*\u0003*\u0003*\u0003*\u0005*\u02f9\n*\u0003*\u0005*\u02fc\n*\u0003",
    "*\u0003*\u0005*\u0300\n*\u0003+\u0003+\u0003,\u0003,\u0005,\u0306\n",
    ",\u0003-\u0003-\u0003-\u0003-\u0005-\u030c\n-\u0003.\u0003.\u0003.\u0007",
    ".\u0311\n.\f.\u000e.\u0314\u000b.\u0003/\u0003/\u00030\u00030\u0003",
    "0\u00030\u00030\u00050\u031d\n0\u00031\u00031\u00031\u00051\u0322\n",
    "1\u00032\u00032\u00052\u0326\n2\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00073\u032e\n3\f3\u000e3\u0331\u000b3\u00053\u0333\n3\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00053\u0344\n3\u00033\u00033\u00033\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u00033\u0003",
    "3\u00073\u0355\n3\f3\u000e3\u0358\u000b3\u00034\u00034\u00054\u035c",
    "\n4\u00035\u00035\u00036\u00036\u00036\u00056\u0363\n6\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00037\u00038\u0003",
    "8\u00038\u00038\u00039\u00039\u00079\u0375\n9\f9\u000e9\u0378\u000b",
    "9\u0003:\u0003:\u0007:\u037c\n:\f:\u000e:\u037f\u000b:\u0003:\u0002",
    "\u0004Dd;\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018",
    "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnpr\u0002",
    "\n\u0003\u0002kl\u0003\u0002RT\u0004\u0002z|\u0080\u0080\u0003\u0002",
    "\n\u000f\u0005\u0002\u0003\t\u0010avy\u0003\u0002vw\u0003\u0002V[\u0003",
    "\u0002hj\u0002\u03f3\u0002t\u0003\u0002\u0002\u0002\u0004x\u0003\u0002",
    "\u0002\u0002\u0006\u0081\u0003\u0002\u0002\u0002\b\u01c1\u0003\u0002",
    "\u0002\u0002\n\u01c3\u0003\u0002\u0002\u0002\f\u01c7\u0003\u0002\u0002",
    "\u0002\u000e\u01cb\u0003\u0002\u0002\u0002\u0010\u01cf\u0003\u0002\u0002",
    "\u0002\u0012\u01d1\u0003\u0002\u0002\u0002\u0014\u01d5\u0003\u0002\u0002",
    "\u0002\u0016\u01d9\u0003\u0002\u0002\u0002\u0018\u01dd\u0003\u0002\u0002",
    "\u0002\u001a\u01e1\u0003\u0002\u0002\u0002\u001c\u01ec\u0003\u0002\u0002",
    "\u0002\u001e\u01ef\u0003\u0002\u0002\u0002 \u01f4\u0003\u0002\u0002",
    "\u0002\"\u0202\u0003\u0002\u0002\u0002$\u0207\u0003\u0002\u0002\u0002",
    "&\u021c\u0003\u0002\u0002\u0002(\u0233\u0003\u0002\u0002\u0002*\u0238",
    "\u0003\u0002\u0002\u0002,\u0249\u0003\u0002\u0002\u0002.\u025a\u0003",
    "\u0002\u0002\u00020\u0265\u0003\u0002\u0002\u00022\u026d\u0003\u0002",
    "\u0002\u00024\u026f\u0003\u0002\u0002\u00026\u0274\u0003\u0002\u0002",
    "\u00028\u027c\u0003\u0002\u0002\u0002:\u0280\u0003\u0002\u0002\u0002",
    "<\u0285\u0003\u0002\u0002\u0002>\u0298\u0003\u0002\u0002\u0002@\u029a",
    "\u0003\u0002\u0002\u0002B\u029e\u0003\u0002\u0002\u0002D\u02aa\u0003",
    "\u0002\u0002\u0002F\u02c2\u0003\u0002\u0002\u0002H\u02c8\u0003\u0002",
    "\u0002\u0002J\u02d0\u0003\u0002\u0002\u0002L\u02d2\u0003\u0002\u0002",
    "\u0002N\u02de\u0003\u0002\u0002\u0002P\u02e3\u0003\u0002\u0002\u0002",
    "R\u02e7\u0003\u0002\u0002\u0002T\u0301\u0003\u0002\u0002\u0002V\u0303",
    "\u0003\u0002\u0002\u0002X\u030b\u0003\u0002\u0002\u0002Z\u030d\u0003",
    "\u0002\u0002\u0002\\\u0315\u0003\u0002\u0002\u0002^\u031c\u0003\u0002",
    "\u0002\u0002`\u0321\u0003\u0002\u0002\u0002b\u0325\u0003\u0002\u0002",
    "\u0002d\u0343\u0003\u0002\u0002\u0002f\u035b\u0003\u0002\u0002\u0002",
    "h\u035d\u0003\u0002\u0002\u0002j\u0362\u0003\u0002\u0002\u0002l\u0364",
    "\u0003\u0002\u0002\u0002n\u036e\u0003\u0002\u0002\u0002p\u0372\u0003",
    "\u0002\u0002\u0002r\u0379\u0003\u0002\u0002\u0002tu\u0005\u0004\u0003",
    "\u0002uv\u0007\u0002\u0002\u0003v\u0003\u0003\u0002\u0002\u0002wy\u0005",
    "6\u001c\u0002xw\u0003\u0002\u0002\u0002xy\u0003\u0002\u0002\u0002y~",
    "\u0003\u0002\u0002\u0002z{\u0007n\u0002\u0002{}\u0005\b\u0005\u0002",
    "|z\u0003\u0002\u0002\u0002}\u0080\u0003\u0002\u0002\u0002~|\u0003\u0002",
    "\u0002\u0002~\u007f\u0003\u0002\u0002\u0002\u007f\u0005\u0003\u0002",
    "\u0002\u0002\u0080~\u0003\u0002\u0002\u0002\u0081\u0082\u0005\u0004",
    "\u0003\u0002\u0082\u0007\u0003\u0002\u0002\u0002\u0083\u0085\u0007\u001f",
    "\u0002\u0002\u0084\u0086\u0005N(\u0002\u0085\u0084\u0003\u0002\u0002",
    "\u0002\u0085\u0086\u0003\u0002\u0002\u0002\u0086\u0087\u0003\u0002\u0002",
    "\u0002\u0087\u0088\u0007 \u0002\u0002\u0088\u008d\u0005V,\u0002\u0089",
    "\u008a\u0007g\u0002\u0002\u008a\u008c\u0005V,\u0002\u008b\u0089\u0003",
    "\u0002\u0002\u0002\u008c\u008f\u0003\u0002\u0002\u0002\u008d\u008b\u0003",
    "\u0002\u0002\u0002\u008d\u008e\u0003\u0002\u0002\u0002\u008e\u01c2\u0003",
    "\u0002\u0002\u0002\u008f\u008d\u0003\u0002\u0002\u0002\u0090\u0091\u0007",
    "+\u0002\u0002\u0091\u0094\u0005^0\u0002\u0092\u0093\u0007#\u0002\u0002",
    "\u0093\u0095\u0005^0\u0002\u0094\u0092\u0003\u0002\u0002\u0002\u0094",
    "\u0095\u0003\u0002\u0002\u0002\u0095\u0099\u0003\u0002\u0002\u0002\u0096",
    "\u0098\u0005(\u0015\u0002\u0097\u0096\u0003\u0002\u0002\u0002\u0098",
    "\u009b\u0003\u0002\u0002\u0002\u0099\u0097\u0003\u0002\u0002\u0002\u0099",
    "\u009a\u0003\u0002\u0002\u0002\u009a\u01c2\u0003\u0002\u0002\u0002\u009b",
    "\u0099\u0003\u0002\u0002\u0002\u009c\u009d\u0007\u0017\u0002\u0002\u009d",
    "\u00a2\u0005R*\u0002\u009e\u009f\u0007g\u0002\u0002\u009f\u00a1\u0005",
    "R*\u0002\u00a0\u009e\u0003\u0002\u0002\u0002\u00a1\u00a4\u0003\u0002",
    "\u0002\u0002\u00a2\u00a0\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002",
    "\u0002\u0002\u00a3\u00a7\u0003\u0002\u0002\u0002\u00a4\u00a2\u0003\u0002",
    "\u0002\u0002\u00a5\u00a6\u0007 \u0002\u0002\u00a6\u00a8\u0005Z.\u0002",
    "\u00a7\u00a5\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003\u0002\u0002\u0002",
    "\u00a8\u01c2\u0003\u0002\u0002\u0002\u00a9\u00ad\u0007\u0018\u0002\u0002",
    "\u00aa\u00ac\u0005(\u0015\u0002\u00ab\u00aa\u0003\u0002\u0002\u0002",
    "\u00ac\u00af\u0003\u0002\u0002\u0002\u00ad\u00ab\u0003\u0002\u0002\u0002",
    "\u00ad\u00ae\u0003\u0002\u0002\u0002\u00ae\u00b0\u0003\u0002\u0002\u0002",
    "\u00af\u00ad\u0003\u0002\u0002\u0002\u00b0\u00b3\u0005R*\u0002\u00b1",
    "\u00b2\u0007 \u0002\u0002\u00b2\u00b4\u0005^0\u0002\u00b3\u00b1\u0003",
    "\u0002\u0002\u0002\u00b3\u00b4\u0003\u0002\u0002\u0002\u00b4\u01c2\u0003",
    "\u0002\u0002\u0002\u00b5\u00b9\u0007\u0019\u0002\u0002\u00b6\u00b8\u0005",
    "\"\u0012\u0002\u00b7\u00b6\u0003\u0002\u0002\u0002\u00b8\u00bb\u0003",
    "\u0002\u0002\u0002\u00b9\u00b7\u0003\u0002\u0002\u0002\u00b9\u00ba\u0003",
    "\u0002\u0002\u0002\u00ba\u00bc\u0003\u0002\u0002\u0002\u00bb\u00b9\u0003",
    "\u0002\u0002\u0002\u00bc\u00bf\u0005^0\u0002\u00bd\u00be\u0007#\u0002",
    "\u0002\u00be\u00c0\u0005^0\u0002\u00bf\u00bd\u0003\u0002\u0002\u0002",
    "\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c3\u0003\u0002\u0002\u0002",
    "\u00c1\u00c2\u0007 \u0002\u0002\u00c2\u00c4\u0005Z.\u0002\u00c3\u00c1",
    "\u0003\u0002\u0002\u0002\u00c3\u00c4\u0003\u0002\u0002\u0002\u00c4\u01c2",
    "\u0003\u0002\u0002\u0002\u00c5\u00c6\u0007\u001c\u0002\u0002\u00c6\u00cb",
    "\u0005R*\u0002\u00c7\u00c8\u0007g\u0002\u0002\u00c8\u00ca\u0005R*\u0002",
    "\u00c9\u00c7\u0003\u0002\u0002\u0002\u00ca\u00cd\u0003\u0002\u0002\u0002",
    "\u00cb\u00c9\u0003\u0002\u0002\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002",
    "\u00cc\u00d0\u0003\u0002\u0002\u0002\u00cd\u00cb\u0003\u0002\u0002\u0002",
    "\u00ce\u00cf\u0007 \u0002\u0002\u00cf\u00d1\u0005Z.\u0002\u00d0\u00ce",
    "\u0003\u0002\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u01c2",
    "\u0003\u0002\u0002\u0002\u00d2\u00d4\u0007\u001d\u0002\u0002\u00d3\u00d5",
    "\u0005N(\u0002\u00d4\u00d3\u0003\u0002\u0002\u0002\u00d4\u00d5\u0003",
    "\u0002\u0002\u0002\u00d5\u00d6\u0003\u0002\u0002\u0002\u00d6\u00d9\u0005",
    "Z.\u0002\u00d7\u00d8\u0007 \u0002\u0002\u00d8\u00da\u0005Z.\u0002\u00d9",
    "\u00d7\u0003\u0002\u0002\u0002\u00d9\u00da\u0003\u0002\u0002\u0002\u00da",
    "\u01c2\u0003\u0002\u0002\u0002\u00db\u00dd\u0007\u001e\u0002\u0002\u00dc",
    "\u00de\u0005N(\u0002\u00dd\u00dc\u0003\u0002\u0002\u0002\u00dd\u00de",
    "\u0003\u0002\u0002\u0002\u00de\u00df\u0003\u0002\u0002\u0002\u00df\u00e2",
    "\u0005^0\u0002\u00e0\u00e1\u0007 \u0002\u0002\u00e1\u00e3\u0005Z.\u0002",
    "\u00e2\u00e0\u0003\u0002\u0002\u0002\u00e2\u00e3\u0003\u0002\u0002\u0002",
    "\u00e3\u01c2\u0003\u0002\u0002\u0002\u00e4\u00e5\u0007$\u0002\u0002",
    "\u00e5\u01c2\u0005N(\u0002\u00e6\u00e8\u0007%\u0002\u0002\u00e7\u00e9",
    "\t\u0002\u0002\u0002\u00e8\u00e7\u0003\u0002\u0002\u0002\u00e8\u00e9",
    "\u0003\u0002\u0002\u0002\u00e9\u00ea\u0003\u0002\u0002\u0002\u00ea\u01c2",
    "\u0005Z.\u0002\u00eb\u00ec\u00071\u0002\u0002\u00ec\u00f0\u0005^0\u0002",
    "\u00ed\u00ee\u0007$\u0002\u0002\u00ee\u00ef\u0007\n\u0002\u0002\u00ef",
    "\u00f1\u0005N(\u0002\u00f0\u00ed\u0003\u0002\u0002\u0002\u00f0\u00f1",
    "\u0003\u0002\u0002\u0002\u00f1\u01c2\u0003\u0002\u0002\u0002\u00f2\u00f6",
    "\u00072\u0002\u0002\u00f3\u00f4\u0007F\u0002\u0002\u00f4\u00f5\u0007",
    "\n\u0002\u0002\u00f5\u00f7\u0007\u0080\u0002\u0002\u00f6\u00f3\u0003",
    "\u0002\u0002\u0002\u00f6\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003",
    "\u0002\u0002\u0002\u00f8\u01c2\u0005^0\u0002\u00f9\u00fd\u00077\u0002",
    "\u0002\u00fa\u00fc\u0005&\u0014\u0002\u00fb\u00fa\u0003\u0002\u0002",
    "\u0002\u00fc\u00ff\u0003\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002",
    "\u0002\u00fd\u00fe\u0003\u0002\u0002\u0002\u00fe\u0100\u0003\u0002\u0002",
    "\u0002\u00ff\u00fd\u0003\u0002\u0002\u0002\u0100\u0101\u0007d\u0002",
    "\u0002\u0101\u0102\u0005\u0006\u0004\u0002\u0102\u0103\u0007e\u0002",
    "\u0002\u0103\u01c2\u0003\u0002\u0002\u0002\u0104\u0105\u0007\u0011\u0002",
    "\u0002\u0105\u01c2\u0005d3\u0002\u0106\u0107\u0007\u0010\u0002\u0002",
    "\u0107\u0108\u0005^0\u0002\u0108\u0109\u0007\n\u0002\u0002\u0109\u010a",
    "\u0005d3\u0002\u010a\u0112\u0003\u0002\u0002\u0002\u010b\u010c\u0007",
    "g\u0002\u0002\u010c\u010d\u0005^0\u0002\u010d\u010e\u0007\n\u0002\u0002",
    "\u010e\u010f\u0005d3\u0002\u010f\u0111\u0003\u0002\u0002\u0002\u0110",
    "\u010b\u0003\u0002\u0002\u0002\u0111\u0114\u0003\u0002\u0002\u0002\u0112",
    "\u0110\u0003\u0002\u0002\u0002\u0112\u0113\u0003\u0002\u0002\u0002\u0113",
    "\u01c2\u0003\u0002\u0002\u0002\u0114\u0112\u0003\u0002\u0002\u0002\u0115",
    "\u0116\u0007&\u0002\u0002\u0116\u01c2\u0005Z.\u0002\u0117\u0118\u0007",
    "\'\u0002\u0002\u0118\u011d\u0005@!\u0002\u0119\u011a\u0007g\u0002\u0002",
    "\u011a\u011c\u0005@!\u0002\u011b\u0119\u0003\u0002\u0002\u0002\u011c",
    "\u011f\u0003\u0002\u0002\u0002\u011d\u011b\u0003\u0002\u0002\u0002\u011d",
    "\u011e\u0003\u0002\u0002\u0002\u011e\u01c2\u0003\u0002\u0002\u0002\u011f",
    "\u011d\u0003\u0002\u0002\u0002\u0120\u0121\u0007(\u0002\u0002\u0121",
    "\u0126\u0005B\"\u0002\u0122\u0123\u0007g\u0002\u0002\u0123\u0125\u0005",
    "B\"\u0002\u0124\u0122\u0003\u0002\u0002\u0002\u0125\u0128\u0003\u0002",
    "\u0002\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0126\u0127\u0003\u0002",
    "\u0002\u0002\u0127\u0129\u0003\u0002\u0002\u0002\u0128\u0126\u0003\u0002",
    "\u0002\u0002\u0129\u012a\u0007!\u0002\u0002\u012a\u012b\u0005Z.\u0002",
    "\u012b\u01c2\u0003\u0002\u0002\u0002\u012c\u012d\u0007)\u0002\u0002",
    "\u012d\u012e\u0007*\u0002\u0002\u012e\u012f\u0007\n\u0002\u0002\u012f",
    "\u0130\u0005^0\u0002\u0130\u0131\u0007\u0080\u0002\u0002\u0131\u01c2",
    "\u0003\u0002\u0002\u0002\u0132\u0133\u0007\u0013\u0002\u0002\u0133\u0134",
    "\u0007x\u0002\u0002\u0134\u0135\u0007\n\u0002\u0002\u0135\u0139\u0005",
    "^0\u0002\u0136\u0137\u0007y\u0002\u0002\u0137\u0138\u0007\n\u0002\u0002",
    "\u0138\u013a\u0005N(\u0002\u0139\u0136\u0003\u0002\u0002\u0002\u0139",
    "\u013a\u0003\u0002\u0002\u0002\u013a\u013b\u0003\u0002\u0002\u0002\u013b",
    "\u013c\u0005Z.\u0002\u013c\u013d\u0007d\u0002\u0002\u013d\u013e\u0005",
    "\u0006\u0004\u0002\u013e\u013f\u0007e\u0002\u0002\u013f\u01c2\u0003",
    "\u0002\u0002\u0002\u0140\u0141\u0007\u0014\u0002\u0002\u0141\u0142\u0007",
    "\u0080\u0002\u0002\u0142\u0143\u0005 \u0011\u0002\u0143\u0144\u0007",
    "\u0015\u0002\u0002\u0144\u0145\u0005 \u0011\u0002\u0145\u01c2\u0003",
    "\u0002\u0002\u0002\u0146\u0148\u00073\u0002\u0002\u0147\u0149\u0005",
    "$\u0013\u0002\u0148\u0147\u0003\u0002\u0002\u0002\u0148\u0149\u0003",
    "\u0002\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u01c2\u0005",
    "^0\u0002\u014b\u014c\u0007@\u0002\u0002\u014c\u0150\u0005Z.\u0002\u014d",
    "\u014f\u0005*\u0016\u0002\u014e\u014d\u0003\u0002\u0002\u0002\u014f",
    "\u0152\u0003\u0002\u0002\u0002\u0150\u014e\u0003\u0002\u0002\u0002\u0150",
    "\u0151\u0003\u0002\u0002\u0002\u0151\u01c2\u0003\u0002\u0002\u0002\u0152",
    "\u0150\u0003\u0002\u0002\u0002\u0153\u0155\u0007;\u0002\u0002\u0154",
    "\u0156\u0005\u0012\n\u0002\u0155\u0154\u0003\u0002\u0002\u0002\u0155",
    "\u0156\u0003\u0002\u0002\u0002\u0156\u0157\u0003\u0002\u0002\u0002\u0157",
    "\u0159\u0005\u0014\u000b\u0002\u0158\u015a\u0005\u0016\f\u0002\u0159",
    "\u0158\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a",
    "\u015e\u0003\u0002\u0002\u0002\u015b\u015d\u0005\f\u0007\u0002\u015c",
    "\u015b\u0003\u0002\u0002\u0002\u015d\u0160\u0003\u0002\u0002\u0002\u015e",
    "\u015c\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f",
    "\u01c2\u0003\u0002\u0002\u0002\u0160\u015e\u0003\u0002\u0002\u0002\u0161",
    "\u0163\u0007>\u0002\u0002\u0162\u0164\u0005\u0018\r\u0002\u0163\u0162",
    "\u0003\u0002\u0002\u0002\u0163\u0164\u0003\u0002\u0002\u0002\u0164\u0165",
    "\u0003\u0002\u0002\u0002\u0165\u01c2\u0005\u001c\u000f\u0002\u0166\u016a",
    "\u0007-\u0002\u0002\u0167\u0168\u0007/\u0002\u0002\u0168\u0169\u0007",
    "\n\u0002\u0002\u0169\u016b\u0005^0\u0002\u016a\u0167\u0003\u0002\u0002",
    "\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b\u016f\u0003\u0002\u0002",
    "\u0002\u016c\u016d\u0007\u0015\u0002\u0002\u016d\u016e\u0007\n\u0002",
    "\u0002\u016e\u0170\u0005^0\u0002\u016f\u016c\u0003\u0002\u0002\u0002",
    "\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0173\u0003\u0002\u0002\u0002",
    "\u0171\u0172\u00070\u0002\u0002\u0172\u0174\u0007\n\u0002\u0002\u0173",
    "\u0171\u0003\u0002\u0002\u0002\u0173\u0174\u0003\u0002\u0002\u0002\u0174",
    "\u0175\u0003\u0002\u0002\u0002\u0175\u01c2\u0005^0\u0002\u0176\u017a",
    "\u0007.\u0002\u0002\u0177\u0178\u0007/\u0002\u0002\u0178\u0179\u0007",
    "\n\u0002\u0002\u0179\u017b\u0005^0\u0002\u017a\u0177\u0003\u0002\u0002",
    "\u0002\u017a\u017b\u0003\u0002\u0002\u0002\u017b\u017f\u0003\u0002\u0002",
    "\u0002\u017c\u017d\u0007\u0015\u0002\u0002\u017d\u017e\u0007\n\u0002",
    "\u0002\u017e\u0180\u0005^0\u0002\u017f\u017c\u0003\u0002\u0002\u0002",
    "\u017f\u0180\u0003\u0002\u0002\u0002\u0180\u0183\u0003\u0002\u0002\u0002",
    "\u0181\u0182\u00070\u0002\u0002\u0182\u0184\u0007\n\u0002\u0002\u0183",
    "\u0181\u0003\u0002\u0002\u0002\u0183\u0184\u0003\u0002\u0002\u0002\u0184",
    "\u0185\u0003\u0002\u0002\u0002\u0185\u01c2\u0005^0\u0002\u0186\u0187",
    "\u0007\u0016\u0002\u0002\u0187\u01c2\u0005\n\u0006\u0002\u0188\u0189",
    "\u0007P\u0002\u0002\u0189\u018a\u0007Q\u0002\u0002\u018a\u018b\u0007",
    "\n\u0002\u0002\u018b\u018c\t\u0003\u0002\u0002\u018c\u018d\u0007U\u0002",
    "\u0002\u018d\u018e\u0007\n\u0002\u0002\u018e\u0193\u0005\\/\u0002\u018f",
    "\u0190\u0007g\u0002\u0002\u0190\u0192\u0005\\/\u0002\u0191\u018f\u0003",
    "\u0002\u0002\u0002\u0192\u0195\u0003\u0002\u0002\u0002\u0193\u0191\u0003",
    "\u0002\u0002\u0002\u0193\u0194\u0003\u0002\u0002\u0002\u0194\u0196\u0003",
    "\u0002\u0002\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0196\u0197\u0005",
    "N(\u0002\u0197\u01c2\u0003\u0002\u0002\u0002\u0198\u019c\u0007^\u0002",
    "\u0002\u0199\u019b\u0005n8\u0002\u019a\u0199\u0003\u0002\u0002\u0002",
    "\u019b\u019e\u0003\u0002\u0002\u0002\u019c\u019a\u0003\u0002\u0002\u0002",
    "\u019c\u019d\u0003\u0002\u0002\u0002\u019d\u019f\u0003\u0002\u0002\u0002",
    "\u019e\u019c\u0003\u0002\u0002\u0002\u019f\u01a4\u0005R*\u0002\u01a0",
    "\u01a1\u0007g\u0002\u0002\u01a1\u01a3\u0005R*\u0002\u01a2\u01a0\u0003",
    "\u0002\u0002\u0002\u01a3\u01a6\u0003\u0002\u0002\u0002\u01a4\u01a2\u0003",
    "\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5\u01b5\u0003",
    "\u0002\u0002\u0002\u01a6\u01a4\u0003\u0002\u0002\u0002\u01a7\u01a8\u0007",
    "_\u0002\u0002\u01a8\u01ab\u0005p9\u0002\u01a9\u01aa\u0007 \u0002\u0002",
    "\u01aa\u01ac\u0005r:\u0002\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ab",
    "\u01ac\u0003\u0002\u0002\u0002\u01ac\u01b6\u0003\u0002\u0002\u0002\u01ad",
    "\u01ae\u0007 \u0002\u0002\u01ae\u01b0\u0005p9\u0002\u01af\u01b1\u0007",
    "g\u0002\u0002\u01b0\u01af\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003",
    "\u0002\u0002\u0002\u01b1\u01b3\u0003\u0002\u0002\u0002\u01b2\u01b4\u0005",
    "r:\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b3\u01b4\u0003\u0002",
    "\u0002\u0002\u01b4\u01b6\u0003\u0002\u0002\u0002\u01b5\u01a7\u0003\u0002",
    "\u0002\u0002\u01b5\u01ad\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002",
    "\u0002\u0002\u01b6\u01c2\u0003\u0002\u0002\u0002\u01b7\u01bb\u0007`",
    "\u0002\u0002\u01b8\u01ba\u00054\u001b\u0002\u01b9\u01b8\u0003\u0002",
    "\u0002\u0002\u01ba\u01bd\u0003\u0002\u0002\u0002\u01bb\u01b9\u0003\u0002",
    "\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bf\u0003\u0002",
    "\u0002\u0002\u01bd\u01bb\u0003\u0002\u0002\u0002\u01be\u01c0\u0005Z",
    ".\u0002\u01bf\u01be\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003\u0002",
    "\u0002\u0002\u01c0\u01c2\u0003\u0002\u0002\u0002\u01c1\u0083\u0003\u0002",
    "\u0002\u0002\u01c1\u0090\u0003\u0002\u0002\u0002\u01c1\u009c\u0003\u0002",
    "\u0002\u0002\u01c1\u00a9\u0003\u0002\u0002\u0002\u01c1\u00b5\u0003\u0002",
    "\u0002\u0002\u01c1\u00c5\u0003\u0002\u0002\u0002\u01c1\u00d2\u0003\u0002",
    "\u0002\u0002\u01c1\u00db\u0003\u0002\u0002\u0002\u01c1\u00e4\u0003\u0002",
    "\u0002\u0002\u01c1\u00e6\u0003\u0002\u0002\u0002\u01c1\u00eb\u0003\u0002",
    "\u0002\u0002\u01c1\u00f2\u0003\u0002\u0002\u0002\u01c1\u00f9\u0003\u0002",
    "\u0002\u0002\u01c1\u0104\u0003\u0002\u0002\u0002\u01c1\u0106\u0003\u0002",
    "\u0002\u0002\u01c1\u0115\u0003\u0002\u0002\u0002\u01c1\u0117\u0003\u0002",
    "\u0002\u0002\u01c1\u0120\u0003\u0002\u0002\u0002\u01c1\u012c\u0003\u0002",
    "\u0002\u0002\u01c1\u0132\u0003\u0002\u0002\u0002\u01c1\u0140\u0003\u0002",
    "\u0002\u0002\u01c1\u0146\u0003\u0002\u0002\u0002\u01c1\u014b\u0003\u0002",
    "\u0002\u0002\u01c1\u0153\u0003\u0002\u0002\u0002\u01c1\u0161\u0003\u0002",
    "\u0002\u0002\u01c1\u0166\u0003\u0002\u0002\u0002\u01c1\u0176\u0003\u0002",
    "\u0002\u0002\u01c1\u0186\u0003\u0002\u0002\u0002\u01c1\u0188\u0003\u0002",
    "\u0002\u0002\u01c1\u0198\u0003\u0002\u0002\u0002\u01c1\u01b7\u0003\u0002",
    "\u0002\u0002\u01c2\t\u0003\u0002\u0002\u0002\u01c3\u01c4\u0005^0\u0002",
    "\u01c4\u01c5\u0007f\u0002\u0002\u01c5\u01c6\u0005^0\u0002\u01c6\u000b",
    "\u0003\u0002\u0002\u0002\u01c7\u01c8\u0005\u0010\t\u0002\u01c8\u01c9",
    "\u0007\n\u0002\u0002\u01c9\u01ca\u0005\u000e\b\u0002\u01ca\r\u0003\u0002",
    "\u0002\u0002\u01cb\u01cc\t\u0004\u0002\u0002\u01cc\u000f\u0003\u0002",
    "\u0002\u0002\u01cd\u01d0\u0007~\u0002\u0002\u01ce\u01d0\u0005T+\u0002",
    "\u01cf\u01cd\u0003\u0002\u0002\u0002\u01cf\u01ce\u0003\u0002\u0002\u0002",
    "\u01d0\u0011\u0003\u0002\u0002\u0002\u01d1\u01d2\u0007x\u0002\u0002",
    "\u01d2\u01d3\u0007\n\u0002\u0002\u01d3\u01d4\u0007\u0080\u0002\u0002",
    "\u01d4\u0013\u0003\u0002\u0002\u0002\u01d5\u01d6\u0007<\u0002\u0002",
    "\u01d6\u01d7\u0007\n\u0002\u0002\u01d7\u01d8\u0007\u0080\u0002\u0002",
    "\u01d8\u0015\u0003\u0002\u0002\u0002\u01d9\u01da\u0007=\u0002\u0002",
    "\u01da\u01db\u0007\n\u0002\u0002\u01db\u01dc\u0005N(\u0002\u01dc\u0017",
    "\u0003\u0002\u0002\u0002\u01dd\u01de\u0007?\u0002\u0002\u01de\u01df",
    "\u0007\n\u0002\u0002\u01df\u01e0\u0007\u0080\u0002\u0002\u01e0\u0019",
    "\u0003\u0002\u0002\u0002\u01e1\u01e2\u0005`1\u0002\u01e2\u01e3\u0007",
    "b\u0002\u0002\u01e3\u01e4\u0005X-\u0002\u01e4\u01e7\u0007c\u0002\u0002",
    "\u01e5\u01e6\u0007#\u0002\u0002\u01e6\u01e8\u0005^0\u0002\u01e7\u01e5",
    "\u0003\u0002\u0002\u0002\u01e7\u01e8\u0003\u0002\u0002\u0002\u01e8\u001b",
    "\u0003\u0002\u0002\u0002\u01e9\u01eb\u0005\u001a\u000e\u0002\u01ea\u01e9",
    "\u0003\u0002\u0002\u0002\u01eb\u01ee\u0003\u0002\u0002\u0002\u01ec\u01ea",
    "\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u001d",
    "\u0003\u0002\u0002\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002\u01ef\u01f2",
    "\u0005^0\u0002\u01f0\u01f1\u0007#\u0002\u0002\u01f1\u01f3\u0005^0\u0002",
    "\u01f2\u01f0\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003\u0002\u0002\u0002",
    "\u01f3\u001f\u0003\u0002\u0002\u0002\u01f4\u01f9\u0005\u001e\u0010\u0002",
    "\u01f5\u01f6\u0007g\u0002\u0002\u01f6\u01f8\u0005\u001e\u0010\u0002",
    "\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f8\u01fb\u0003\u0002\u0002\u0002",
    "\u01f9\u01f7\u0003\u0002\u0002\u0002\u01f9\u01fa\u0003\u0002\u0002\u0002",
    "\u01fa!\u0003\u0002\u0002\u0002\u01fb\u01f9\u0003\u0002\u0002\u0002",
    "\u01fc\u01fd\u0007\u001a\u0002\u0002\u01fd\u01fe\u0007\n\u0002\u0002",
    "\u01fe\u0203\u0005N(\u0002\u01ff\u0200\u0007\u001b\u0002\u0002\u0200",
    "\u0201\u0007\n\u0002\u0002\u0201\u0203\u0005H%\u0002\u0202\u01fc\u0003",
    "\u0002\u0002\u0002\u0202\u01ff\u0003\u0002\u0002\u0002\u0203#\u0003",
    "\u0002\u0002\u0002\u0204\u0205\u00074\u0002\u0002\u0205\u0206\u0007",
    "\n\u0002\u0002\u0206\u0208\u0007\u0080\u0002\u0002\u0207\u0204\u0003",
    "\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002\u0208\u020c\u0003",
    "\u0002\u0002\u0002\u0209\u020a\u00075\u0002\u0002\u020a\u020b\u0007",
    "\n\u0002\u0002\u020b\u020d\u0007z\u0002\u0002\u020c\u0209\u0003\u0002",
    "\u0002\u0002\u020c\u020d\u0003\u0002\u0002\u0002\u020d\u0211\u0003\u0002",
    "\u0002\u0002\u020e\u020f\u00076\u0002\u0002\u020f\u0210\u0007\n\u0002",
    "\u0002\u0210\u0212\u0007\u0080\u0002\u0002\u0211\u020e\u0003\u0002\u0002",
    "\u0002\u0211\u0212\u0003\u0002\u0002\u0002\u0212%\u0003\u0002\u0002",
    "\u0002\u0213\u0214\u00078\u0002\u0002\u0214\u0215\u0007\n\u0002\u0002",
    "\u0215\u021d\u0007{\u0002\u0002\u0216\u0217\u00079\u0002\u0002\u0217",
    "\u0218\u0007\n\u0002\u0002\u0218\u021d\u0007{\u0002\u0002\u0219\u021a",
    "\u0007:\u0002\u0002\u021a\u021b\u0007\n\u0002\u0002\u021b\u021d\u0007",
    "{\u0002\u0002\u021c\u0213\u0003\u0002\u0002\u0002\u021c\u0216\u0003",
    "\u0002\u0002\u0002\u021c\u0219\u0003\u0002\u0002\u0002\u021d\'\u0003",
    "\u0002\u0002\u0002\u021e\u021f\u0007\u0003\u0002\u0002\u021f\u0220\u0007",
    "\n\u0002\u0002\u0220\u0234\u0005N(\u0002\u0221\u0222\u0007\u0004\u0002",
    "\u0002\u0222\u0223\u0007\n\u0002\u0002\u0223\u0234\u0005> \u0002\u0224",
    "\u0225\u0007\u0005\u0002\u0002\u0225\u0226\u0007\n\u0002\u0002\u0226",
    "\u0234\u0005N(\u0002\u0227\u0228\u0007\u0006\u0002\u0002\u0228\u0229",
    "\u0007\n\u0002\u0002\u0229\u0234\u0005N(\u0002\u022a\u022b\u0007\b\u0002",
    "\u0002\u022b\u022c\u0007\n\u0002\u0002\u022c\u0234\u0005N(\u0002\u022d",
    "\u022e\u0007\t\u0002\u0002\u022e\u022f\u0007\n\u0002\u0002\u022f\u0234",
    "\u0005N(\u0002\u0230\u0231\u0007\u0007\u0002\u0002\u0231\u0232\u0007",
    "\n\u0002\u0002\u0232\u0234\u0007z\u0002\u0002\u0233\u021e\u0003\u0002",
    "\u0002\u0002\u0233\u0221\u0003\u0002\u0002\u0002\u0233\u0224\u0003\u0002",
    "\u0002\u0002\u0233\u0227\u0003\u0002\u0002\u0002\u0233\u022a\u0003\u0002",
    "\u0002\u0002\u0233\u022d\u0003\u0002\u0002\u0002\u0233\u0230\u0003\u0002",
    "\u0002\u0002\u0234)\u0003\u0002\u0002\u0002\u0235\u0239\u0005,\u0017",
    "\u0002\u0236\u0239\u0005.\u0018\u0002\u0237\u0239\u00050\u0019\u0002",
    "\u0238\u0235\u0003\u0002\u0002\u0002\u0238\u0236\u0003\u0002\u0002\u0002",
    "\u0238\u0237\u0003\u0002\u0002\u0002\u0239+\u0003\u0002\u0002\u0002",
    "\u023a\u023b\u0007C\u0002\u0002\u023b\u023c\u0007\n\u0002\u0002\u023c",
    "\u024a\u0007\u0081\u0002\u0002\u023d\u023e\u0007D\u0002\u0002\u023e",
    "\u023f\u0007\n\u0002\u0002\u023f\u024a\u0007\u0081\u0002\u0002\u0240",
    "\u0241\u0007E\u0002\u0002\u0241\u0242\u0007\n\u0002\u0002\u0242\u024a",
    "\u0007{\u0002\u0002\u0243\u0244\u0007A\u0002\u0002\u0244\u0245\u0007",
    "\n\u0002\u0002\u0245\u024a\u00052\u001a\u0002\u0246\u0247\u0007B\u0002",
    "\u0002\u0247\u0248\u0007\n\u0002\u0002\u0248\u024a\u00052\u001a\u0002",
    "\u0249\u023a\u0003\u0002\u0002\u0002\u0249\u023d\u0003\u0002\u0002\u0002",
    "\u0249\u0240\u0003\u0002\u0002\u0002\u0249\u0243\u0003\u0002\u0002\u0002",
    "\u0249\u0246\u0003\u0002\u0002\u0002\u024a-\u0003\u0002\u0002\u0002",
    "\u024b\u024c\u0007F\u0002\u0002\u024c\u024d\u0007\n\u0002\u0002\u024d",
    "\u025b\u0007\u0080\u0002\u0002\u024e\u024f\u0007G\u0002\u0002\u024f",
    "\u0252\u0007\n\u0002\u0002\u0250\u0253\u0007z\u0002\u0002\u0251\u0253",
    "\u0005Z.\u0002\u0252\u0250\u0003\u0002\u0002\u0002\u0252\u0251\u0003",
    "\u0002\u0002\u0002\u0253\u025b\u0003\u0002\u0002\u0002\u0254\u0255\u0007",
    "H\u0002\u0002\u0255\u0256\u0007\n\u0002\u0002\u0256\u025b\u0007\u0080",
    "\u0002\u0002\u0257\u0258\u0007I\u0002\u0002\u0258\u0259\u0007\n\u0002",
    "\u0002\u0259\u025b\u0007z\u0002\u0002\u025a\u024b\u0003\u0002\u0002",
    "\u0002\u025a\u024e\u0003\u0002\u0002\u0002\u025a\u0254\u0003\u0002\u0002",
    "\u0002\u025a\u0257\u0003\u0002\u0002\u0002\u025b/\u0003\u0002\u0002",
    "\u0002\u025c\u025d\u0007J\u0002\u0002\u025d\u025e\u0007\n\u0002\u0002",
    "\u025e\u0266\u0007{\u0002\u0002\u025f\u0260\u0007K\u0002\u0002\u0260",
    "\u0261\u0007\n\u0002\u0002\u0261\u0266\u0007{\u0002\u0002\u0262\u0263",
    "\u0007L\u0002\u0002\u0263\u0264\u0007\n\u0002\u0002\u0264\u0266\u0007",
    "z\u0002\u0002\u0265\u025c\u0003\u0002\u0002\u0002\u0265\u025f\u0003",
    "\u0002\u0002\u0002\u0265\u0262\u0003\u0002\u0002\u0002\u02661\u0003",
    "\u0002\u0002\u0002\u0267\u026e\u0005h5\u0002\u0268\u0269\u0007\u0010",
    "\u0002\u0002\u0269\u026a\u0007b\u0002\u0002\u026a\u026b\u0005d3\u0002",
    "\u026b\u026c\u0007c\u0002\u0002\u026c\u026e\u0003\u0002\u0002\u0002",
    "\u026d\u0267\u0003\u0002\u0002\u0002\u026d\u0268\u0003\u0002\u0002\u0002",
    "\u026e3\u0003\u0002\u0002\u0002\u026f\u0270\u0007a\u0002\u0002\u0270",
    "\u0271\u0007\n\u0002\u0002\u0271\u0272\u0005^0\u0002\u02725\u0003\u0002",
    "\u0002\u0002\u0273\u0275\u0007,\u0002\u0002\u0274\u0273\u0003\u0002",
    "\u0002\u0002\u0274\u0275\u0003\u0002\u0002\u0002\u0275\u0276\u0003\u0002",
    "\u0002\u0002\u0276\u0278\u0005<\u001f\u0002\u0277\u0279\u0005D#\u0002",
    "\u0278\u0277\u0003\u0002\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002",
    "\u02797\u0003\u0002\u0002\u0002\u027a\u027d\u0005N(\u0002\u027b\u027d",
    "\u0007\u0080\u0002\u0002\u027c\u027a\u0003\u0002\u0002\u0002\u027c\u027b",
    "\u0003\u0002\u0002\u0002\u027d9\u0003\u0002\u0002\u0002\u027e\u0281",
    "\u0005N(\u0002\u027f\u0281\u0007\u0080\u0002\u0002\u0280\u027e\u0003",
    "\u0002\u0002\u0002\u0280\u027f\u0003\u0002\u0002\u0002\u0281;\u0003",
    "\u0002\u0002\u0002\u0282\u0283\u0007\u0005\u0002\u0002\u0283\u0284\u0007",
    "\n\u0002\u0002\u0284\u0286\u00058\u001d\u0002\u0285\u0282\u0003\u0002",
    "\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002\u0286\u028a\u0003\u0002",
    "\u0002\u0002\u0287\u0288\u0007\u0006\u0002\u0002\u0288\u0289\u0007\n",
    "\u0002\u0002\u0289\u028b\u0005:\u001e\u0002\u028a\u0287\u0003\u0002",
    "\u0002\u0002\u028a\u028b\u0003\u0002\u0002\u0002\u028b\u028f\u0003\u0002",
    "\u0002\u0002\u028c\u028d\u0007]\u0002\u0002\u028d\u028e\u0007\n\u0002",
    "\u0002\u028e\u0290\u0005N(\u0002\u028f\u028c\u0003\u0002\u0002\u0002",
    "\u028f\u0290\u0003\u0002\u0002\u0002\u0290\u0294\u0003\u0002\u0002\u0002",
    "\u0291\u0292\u0007\\\u0002\u0002\u0292\u0293\u0007\n\u0002\u0002\u0293",
    "\u0295\u0007z\u0002\u0002\u0294\u0291\u0003\u0002\u0002\u0002\u0294",
    "\u0295\u0003\u0002\u0002\u0002\u0295=\u0003\u0002\u0002\u0002\u0296",
    "\u0299\u0005N(\u0002\u0297\u0299\u0007\u0081\u0002\u0002\u0298\u0296",
    "\u0003\u0002\u0002\u0002\u0298\u0297\u0003\u0002\u0002\u0002\u0299?",
    "\u0003\u0002\u0002\u0002\u029a\u029b\u0005^0\u0002\u029b\u029c\u0007",
    "#\u0002\u0002\u029c\u029d\u0005^0\u0002\u029dA\u0003\u0002\u0002\u0002",
    "\u029e\u029f\u0007\u0080\u0002\u0002\u029f\u02a0\u0007\"\u0002\u0002",
    "\u02a0\u02a1\u0007\u0080\u0002\u0002\u02a1C\u0003\u0002\u0002\u0002",
    "\u02a2\u02a3\b#\u0001\u0002\u02a3\u02a4\u0007u\u0002\u0002\u02a4\u02ab",
    "\u0005D#\u0007\u02a5\u02a6\u0007b\u0002\u0002\u02a6\u02a7\u0005D#\u0002",
    "\u02a7\u02a8\u0007c\u0002\u0002\u02a8\u02ab\u0003\u0002\u0002\u0002",
    "\u02a9\u02ab\u0005F$\u0002\u02aa\u02a2\u0003\u0002\u0002\u0002\u02aa",
    "\u02a5\u0003\u0002\u0002\u0002\u02aa\u02a9\u0003\u0002\u0002\u0002\u02ab",
    "\u02b6\u0003\u0002\u0002\u0002\u02ac\u02ae\f\u0006\u0002\u0002\u02ad",
    "\u02af\u0007s\u0002\u0002\u02ae\u02ad\u0003\u0002\u0002\u0002\u02ae",
    "\u02af\u0003\u0002\u0002\u0002\u02af\u02b0\u0003\u0002\u0002\u0002\u02b0",
    "\u02b5\u0005D#\u0007\u02b1\u02b2\f\u0005\u0002\u0002\u02b2\u02b3\u0007",
    "t\u0002\u0002\u02b3\u02b5\u0005D#\u0006\u02b4\u02ac\u0003\u0002\u0002",
    "\u0002\u02b4\u02b1\u0003\u0002\u0002\u0002\u02b5\u02b8\u0003\u0002\u0002",
    "\u0002\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002",
    "\u0002\u02b7E\u0003\u0002\u0002\u0002\u02b8\u02b6\u0003\u0002\u0002",
    "\u0002\u02b9\u02ba\u0005^0\u0002\u02ba\u02bb\t\u0005\u0002\u0002\u02bb",
    "\u02bc\u0005J&\u0002\u02bc\u02c3\u0003\u0002\u0002\u0002\u02bd\u02be",
    "\u0005^0\u0002\u02be\u02bf\u0007!\u0002\u0002\u02bf\u02c0\u0005L\'\u0002",
    "\u02c0\u02c3\u0003\u0002\u0002\u0002\u02c1\u02c3\u0005J&\u0002\u02c2",
    "\u02b9\u0003\u0002\u0002\u0002\u02c2\u02bd\u0003\u0002\u0002\u0002\u02c2",
    "\u02c1\u0003\u0002\u0002\u0002\u02c3G\u0003\u0002\u0002\u0002\u02c4",
    "\u02c9\u0005T+\u0002\u02c5\u02c9\u0007\u0081\u0002\u0002\u02c6\u02c9",
    "\u0007~\u0002\u0002\u02c7\u02c9\u0007\u007f\u0002\u0002\u02c8\u02c4",
    "\u0003\u0002\u0002\u0002\u02c8\u02c5\u0003\u0002\u0002\u0002\u02c8\u02c6",
    "\u0003\u0002\u0002\u0002\u02c8\u02c7\u0003\u0002\u0002\u0002\u02c9I",
    "\u0003\u0002\u0002\u0002\u02ca\u02d1\u0005N(\u0002\u02cb\u02d1\u0005",
    "P)\u0002\u02cc\u02d1\u0005H%\u0002\u02cd\u02d1\u0007\u0080\u0002\u0002",
    "\u02ce\u02d1\u0007h\u0002\u0002\u02cf\u02d1\u0007}\u0002\u0002\u02d0",
    "\u02ca\u0003\u0002\u0002\u0002\u02d0\u02cb\u0003\u0002\u0002\u0002\u02d0",
    "\u02cc\u0003\u0002\u0002\u0002\u02d0\u02cd\u0003\u0002\u0002\u0002\u02d0",
    "\u02ce\u0003\u0002\u0002\u0002\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d1",
    "K\u0003\u0002\u0002\u0002\u02d2\u02d3\u0007b\u0002\u0002\u02d3\u02d8",
    "\u0005J&\u0002\u02d4\u02d5\u0007g\u0002\u0002\u02d5\u02d7\u0005J&\u0002",
    "\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d7\u02da\u0003\u0002\u0002\u0002",
    "\u02d8\u02d6\u0003\u0002\u0002\u0002\u02d8\u02d9\u0003\u0002\u0002\u0002",
    "\u02d9\u02db\u0003\u0002\u0002\u0002\u02da\u02d8\u0003\u0002\u0002\u0002",
    "\u02db\u02dc\u0007c\u0002\u0002\u02dcM\u0003\u0002\u0002\u0002\u02dd",
    "\u02df\t\u0002\u0002\u0002\u02de\u02dd\u0003\u0002\u0002\u0002\u02de",
    "\u02df\u0003\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0",
    "\u02e1\u0007{\u0002\u0002\u02e1O\u0003\u0002\u0002\u0002\u02e2\u02e4",
    "\t\u0002\u0002\u0002\u02e3\u02e2\u0003\u0002\u0002\u0002\u02e3\u02e4",
    "\u0003\u0002\u0002\u0002\u02e4\u02e5\u0003\u0002\u0002\u0002\u02e5\u02e6",
    "\u0007|\u0002\u0002\u02e6Q\u0003\u0002\u0002\u0002\u02e7\u02e8\u0005",
    "`1\u0002\u02e8\u02ec\u0007b\u0002\u0002\u02e9\u02ea\u0005b2\u0002\u02ea",
    "\u02eb\u0007b\u0002\u0002\u02eb\u02ed\u0003\u0002\u0002\u0002\u02ec",
    "\u02e9\u0003\u0002\u0002\u0002\u02ec\u02ed\u0003\u0002\u0002\u0002\u02ed",
    "\u02ef\u0003\u0002\u0002\u0002\u02ee\u02f0\u0005^0\u0002\u02ef\u02ee",
    "\u0003\u0002\u0002\u0002\u02ef\u02f0\u0003\u0002\u0002\u0002\u02f0\u02f3",
    "\u0003\u0002\u0002\u0002\u02f1\u02f2\u0007g\u0002\u0002\u02f2\u02f4",
    "\u0005^0\u0002\u02f3\u02f1\u0003\u0002\u0002\u0002\u02f3\u02f4\u0003",
    "\u0002\u0002\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5\u02fb\u0007",
    "c\u0002\u0002\u02f6\u02f7\u0007g\u0002\u0002\u02f7\u02f9\u0005> \u0002",
    "\u02f8\u02f6\u0003\u0002\u0002\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002",
    "\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa\u02fc\u0007c\u0002\u0002",
    "\u02fb\u02f8\u0003\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002",
    "\u02fc\u02ff\u0003\u0002\u0002\u0002\u02fd\u02fe\u0007#\u0002\u0002",
    "\u02fe\u0300\u0005^0\u0002\u02ff\u02fd\u0003\u0002\u0002\u0002\u02ff",
    "\u0300\u0003\u0002\u0002\u0002\u0300S\u0003\u0002\u0002\u0002\u0301",
    "\u0302\t\u0006\u0002\u0002\u0302U\u0003\u0002\u0002\u0002\u0303\u0305",
    "\u0005^0\u0002\u0304\u0306\t\u0007\u0002\u0002\u0305\u0304\u0003\u0002",
    "\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306W\u0003\u0002",
    "\u0002\u0002\u0307\u030c\u0005T+\u0002\u0308\u030c\u0007~\u0002\u0002",
    "\u0309\u030c\u0007\u007f\u0002\u0002\u030a\u030c\u0007h\u0002\u0002",
    "\u030b\u0307\u0003\u0002\u0002\u0002\u030b\u0308\u0003\u0002\u0002\u0002",
    "\u030b\u0309\u0003\u0002\u0002\u0002\u030b\u030a\u0003\u0002\u0002\u0002",
    "\u030b\u030c\u0003\u0002\u0002\u0002\u030cY\u0003\u0002\u0002\u0002",
    "\u030d\u0312\u0005^0\u0002\u030e\u030f\u0007g\u0002\u0002\u030f\u0311",
    "\u0005^0\u0002\u0310\u030e\u0003\u0002\u0002\u0002\u0311\u0314\u0003",
    "\u0002\u0002\u0002\u0312\u0310\u0003\u0002\u0002\u0002\u0312\u0313\u0003",
    "\u0002\u0002\u0002\u0313[\u0003\u0002\u0002\u0002\u0314\u0312\u0003",
    "\u0002\u0002\u0002\u0315\u0316\t\b\u0002\u0002\u0316]\u0003\u0002\u0002",
    "\u0002\u0317\u031d\u0005T+\u0002\u0318\u031d\u0007~\u0002\u0002\u0319",
    "\u031d\u0007\u007f\u0002\u0002\u031a\u031d\u0007z\u0002\u0002\u031b",
    "\u031d\u0007{\u0002\u0002\u031c\u0317\u0003\u0002\u0002\u0002\u031c",
    "\u0318\u0003\u0002\u0002\u0002\u031c\u0319\u0003\u0002\u0002\u0002\u031c",
    "\u031a\u0003\u0002\u0002\u0002\u031c\u031b\u0003\u0002\u0002\u0002\u031d",
    "_\u0003\u0002\u0002\u0002\u031e\u0322\u0005T+\u0002\u031f\u0322\u0007",
    "~\u0002\u0002\u0320\u0322\u0007z\u0002\u0002\u0321\u031e\u0003\u0002",
    "\u0002\u0002\u0321\u031f\u0003\u0002\u0002\u0002\u0321\u0320\u0003\u0002",
    "\u0002\u0002\u0322a\u0003\u0002\u0002\u0002\u0323\u0326\u0005T+\u0002",
    "\u0324\u0326\u0007~\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002",
    "\u0325\u0324\u0003\u0002\u0002\u0002\u0326c\u0003\u0002\u0002\u0002",
    "\u0327\u0328\b3\u0001\u0002\u0328\u0329\u0005`1\u0002\u0329\u0332\u0007",
    "b\u0002\u0002\u032a\u032f\u0005d3\u0002\u032b\u032c\u0007g\u0002\u0002",
    "\u032c\u032e\u0005d3\u0002\u032d\u032b\u0003\u0002\u0002\u0002\u032e",
    "\u0331\u0003\u0002\u0002\u0002\u032f\u032d\u0003\u0002\u0002\u0002\u032f",
    "\u0330\u0003\u0002\u0002\u0002\u0330\u0333\u0003\u0002\u0002\u0002\u0331",
    "\u032f\u0003\u0002\u0002\u0002\u0332\u032a\u0003\u0002\u0002\u0002\u0332",
    "\u0333\u0003\u0002\u0002\u0002\u0333\u0334\u0003\u0002\u0002\u0002\u0334",
    "\u0335\u0007c\u0002\u0002\u0335\u0344\u0003\u0002\u0002\u0002\u0336",
    "\u0337\u0005j6\u0002\u0337\u0338\u0007\u0012\u0002\u0002\u0338\u0339",
    "\u0007\u0080\u0002\u0002\u0339\u0344\u0003\u0002\u0002\u0002\u033a\u0344",
    "\u0005f4\u0002\u033b\u033c\t\u0002\u0002\u0002\u033c\u0344\u0005d3\n",
    "\u033d\u033e\u0007b\u0002\u0002\u033e\u033f\u0005d3\u0002\u033f\u0340",
    "\u0007c\u0002\u0002\u0340\u0344\u0003\u0002\u0002\u0002\u0341\u0342",
    "\u0007u\u0002\u0002\u0342\u0344\u0005d3\u0003\u0343\u0327\u0003\u0002",
    "\u0002\u0002\u0343\u0336\u0003\u0002\u0002\u0002\u0343\u033a\u0003\u0002",
    "\u0002\u0002\u0343\u033b\u0003\u0002\u0002\u0002\u0343\u033d\u0003\u0002",
    "\u0002\u0002\u0343\u0341\u0003\u0002\u0002\u0002\u0344\u0356\u0003\u0002",
    "\u0002\u0002\u0345\u0346\f\t\u0002\u0002\u0346\u0347\t\t\u0002\u0002",
    "\u0347\u0355\u0005d3\n\u0348\u0349\f\b\u0002\u0002\u0349\u034a\t\u0002",
    "\u0002\u0002\u034a\u0355\u0005d3\t\u034b\u034c\f\u0007\u0002\u0002\u034c",
    "\u034d\t\u0005\u0002\u0002\u034d\u0355\u0005d3\b\u034e\u034f\f\u0005",
    "\u0002\u0002\u034f\u0350\u0007s\u0002\u0002\u0350\u0355\u0005d3\u0006",
    "\u0351\u0352\f\u0004\u0002\u0002\u0352\u0353\u0007t\u0002\u0002\u0353",
    "\u0355\u0005d3\u0005\u0354\u0345\u0003\u0002\u0002\u0002\u0354\u0348",
    "\u0003\u0002\u0002\u0002\u0354\u034b\u0003\u0002\u0002\u0002\u0354\u034e",
    "\u0003\u0002\u0002\u0002\u0354\u0351\u0003\u0002\u0002\u0002\u0355\u0358",
    "\u0003\u0002\u0002\u0002\u0356\u0354\u0003\u0002\u0002\u0002\u0356\u0357",
    "\u0003\u0002\u0002\u0002\u0357e\u0003\u0002\u0002\u0002\u0358\u0356",
    "\u0003\u0002\u0002\u0002\u0359\u035c\u0005h5\u0002\u035a\u035c\u0005",
    "j6\u0002\u035b\u0359\u0003\u0002\u0002\u0002\u035b\u035a\u0003\u0002",
    "\u0002\u0002\u035cg\u0003\u0002\u0002\u0002\u035d\u035e\t\u0004\u0002",
    "\u0002\u035ei\u0003\u0002\u0002\u0002\u035f\u0363\u0007~\u0002\u0002",
    "\u0360\u0363\u0007z\u0002\u0002\u0361\u0363\u0005T+\u0002\u0362\u035f",
    "\u0003\u0002\u0002\u0002\u0362\u0360\u0003\u0002\u0002\u0002\u0362\u0361",
    "\u0003\u0002\u0002\u0002\u0363k\u0003\u0002\u0002\u0002\u0364\u0365",
    "\u0007M\u0002\u0002\u0365\u0366\u0007\n\u0002\u0002\u0366\u0367\u0005",
    "N(\u0002\u0367\u0368\u0007N\u0002\u0002\u0368\u0369\u0007\n\u0002\u0002",
    "\u0369\u036a\u0005N(\u0002\u036a\u036b\u0007O\u0002\u0002\u036b\u036c",
    "\u0007\n\u0002\u0002\u036c\u036d\u0005N(\u0002\u036dm\u0003\u0002\u0002",
    "\u0002\u036e\u036f\u0007$\u0002\u0002\u036f\u0370\u0007\n\u0002\u0002",
    "\u0370\u0371\u0005N(\u0002\u0371o\u0003\u0002\u0002\u0002\u0372\u0376",
    "\u0005^0\u0002\u0373\u0375\u0005(\u0015\u0002\u0374\u0373\u0003\u0002",
    "\u0002\u0002\u0375\u0378\u0003\u0002\u0002\u0002\u0376\u0374\u0003\u0002",
    "\u0002\u0002\u0376\u0377\u0003\u0002\u0002\u0002\u0377q\u0003\u0002",
    "\u0002\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0379\u037d\u0005^",
    "0\u0002\u037a\u037c\u0005(\u0015\u0002\u037b\u037a\u0003\u0002\u0002",
    "\u0002\u037c\u037f\u0003\u0002\u0002\u0002\u037d\u037b\u0003\u0002\u0002",
    "\u0002\u037d\u037e\u0003\u0002\u0002\u0002\u037es\u0003\u0002\u0002",
    "\u0002\u037f\u037d\u0003\u0002\u0002\u0002lx~\u0085\u008d\u0094\u0099",
    "\u00a2\u00a7\u00ad\u00b3\u00b9\u00bf\u00c3\u00cb\u00d0\u00d4\u00d9\u00dd",
    "\u00e2\u00e8\u00f0\u00f6\u00fd\u0112\u011d\u0126\u0139\u0148\u0150\u0155",
    "\u0159\u015e\u0163\u016a\u016f\u0173\u017a\u017f\u0183\u0193\u019c\u01a4",
    "\u01ab\u01b0\u01b3\u01b5\u01bb\u01bf\u01c1\u01cf\u01e7\u01ec\u01f2\u01f9",
    "\u0202\u0207\u020c\u0211\u021c\u0233\u0238\u0249\u0252\u025a\u0265\u026d",
    "\u0274\u0278\u027c\u0280\u0285\u028a\u028f\u0294\u0298\u02aa\u02ae\u02b4",
    "\u02b6\u02c2\u02c8\u02d0\u02d8\u02de\u02e3\u02ec\u02ef\u02f3\u02f8\u02fb",
    "\u02ff\u0305\u030b\u0312\u031c\u0321\u0325\u032f\u0332\u0343\u0354\u0356",
    "\u035b\u0362\u0376\u037d"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'bins'", "'span'", "'start'", "'end'", "'align'", 
                     "'starttime'", "'endtime'", null, "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'eval'", "'where'", "'like'", "'join'", 
                     "'lookup'", "'output'", "'from'", "'stats'", "'timechart'", 
                     "'movingavg'", "'window'", "'model'", "'eventstats'", 
                     "'top'", "'rare'", "'sort'", "'by'", null, "'with'", 
                     "'as'", "'limit'", "'fields'", "'dedup'", "'rename'", 
                     "'replace'", "'rex'", "'field'", "'bin'", "'search'", 
                     "'jsonpath'", "'xmlpath'", "'input'", "'path'", "'mvexpand'", 
                     "'mvcombine'", "'iplocation'", "'prefix'", "'allfields'", 
                     "'lang'", "'append'", "'maxtime'", "'maxout'", "'timeout'", 
                     "'export'", "'sink'", "'batchsize'", "'convert'", "'timeformat'", 
                     "'transaction'", "'startswith'", "'endswith'", "'maxspan'", 
                     "'maxpause'", "'maxevents'", "'delim'", "'mvlist'", 
                     "'nullstr'", "'mvraw'", "'maxopentxn'", "'maxopenevents'", 
                     "'keepevicted'", "'interval'", "'minBound'", "'maxBound'", 
                     "'compose'", "'mode'", "'FAST'", "'SMART'", "'DETAILED'", 
                     "'actions'", "'LIMIT'", "'HISTOGRAM'", "'SUMMARY'", 
                     "'RESULT'", "'SIMPLE_SUMMARY'", "'MAPPING_SUMMARY'", 
                     "'async'", "'parallel'", "'chart'", "'over'", "'addtotals'", 
                     "'fieldname'", "'('", "')'", "'['", "']'", "':'", "','", 
                     "'*'", "'/'", "'%'", "'+'", "'-'", null, "'|'", "'{'", 
                     "'}'", "'\"'", "'''", null, null, null, null, null, 
                     "'type'", "'max'" ];

var symbolicNames = [ null, "BINS", "SPAN", "START", "END", "ALIGN", "START_TIME", 
                      "END_TIME", "EQ", "NEQJ", "LT", "LTE", "GT", "GTE", 
                      "EVAL", "WHERE", "LIKE", "JOIN", "LOOKUP", "OUTPUT", 
                      "FROM", "STATS", "TIMECHART", "MOVINGAVG", "WINDOW", 
                      "MODEL", "EVENTSTATS", "TOP", "RARE", "SORT", "BY", 
                      "IN", "WITH", "AS", "LIMIT", "FIELDS", "DEDUP", "RENAME", 
                      "REPLACE", "REX", "FIELD", "BUCKET", "SEARCH", "JSONPATH", 
                      "XMLPATH", "INPUT", "PATH", "MVEXPAND", "MVCOMBINE", 
                      "IPLOCATION", "PREFIX", "ALLFIELDS", "LANG", "APPEND", 
                      "APPEND_MAXTIME", "APPEND_MAXOUT", "APPEND_TIMEOUT", 
                      "EXPORT", "EXPORT_SINKTYPE", "EXPORT_BATCH_SIZE", 
                      "CONVERT", "TIMEFORMAT", "TRANSACTION", "TRANSACTION_STARTSWITH", 
                      "TRANSACTION_ENDSWITH", "TRANSACTION_MAXSPAN", "TRANSACTION_MAXPAUSE", 
                      "TRANSACTION_MAXEVENTS", "TRANSACTION_DELIM", "TRANSACTION_MVLIST", 
                      "TRANSACTION_NULLSTR", "TRANSACTION_MVRAW", "TRANSACTION_MAXOPENTXN", 
                      "TRANSACTION_MAXOPENEVENTS", "TRANSACTION_KEEPEVICTED", 
                      "TIMELINE_INTERVAL", "TIMELINE_MIN_BOUND", "TIMELINE_MAX_BOUND", 
                      "COMPOSE", "COMPOSE_MODE", "COMPOSE_MODE_FAST", "COMPOSE_MODE_SMART", 
                      "COMPOSE_MODE_DETAILED", "COMPOSE_ACTIONS", "COMPOSE_ACTION_LIMIT", 
                      "COMPOSE_ACTION_HISTOGRAM", "COMPOSE_ACTION_SUMMARY", 
                      "COMPOSE_ACTION_RESULT", "COMPOSE_ACTION_SIMPLESUMMARY", 
                      "COMPOSE_ACTION_MAPPINGSUMMARY", "ASYNC", "PARALLEL", 
                      "CHART", "OVER", "ADDTOTALS", "FIELDNAME", "LPAREN", 
                      "RPAREN", "LBRACK", "RBRACK", "COLON", "COMMA", "STAR", 
                      "SLASH", "PERCENT", "PLUS", "MINUS", "QMARK", "VBAR", 
                      "LCURLY", "RCURLY", "DQUOTE", "SQUOTE", "AND", "OR", 
                      "NOT", "DESC", "ASC", "TYPE", "MAX", "BOOL", "INT", 
                      "NUM", "REGEX", "IDENTIFIER", "IDENTIFIER_WITH_STAR", 
                      "QUOTED_STRING", "UNQOTED_STRING", "WS" ];

var ruleNames =  [ "main", "operators", "from", "operator", "from_source", 
                   "args", "args_value", "args_name", "export_field", "sink_field", 
                   "batch_field", "timeformat_field", "convert_func", "convert_func_field", 
                   "lookup_field", "lookup_fields", "movingavg_option", 
                   "iplocation_option", "append_option", "bucket_option", 
                   "transaction_options", "transaction_define_option", "transaction_rendering_option", 
                   "transaction_memcontrol_option", "transaction_filter", 
                   "addtotals_option", "search", "start_value", "end_value", 
                   "search_option", "spanValue", "rename_field", "replace_with", 
                   "search_expression", "search_query", "unqoted_string_value", 
                   "search_query_value", "search_query_value_list", "signed_int", 
                   "signed_num", "stats_func", "reserve_field", "sort_field", 
                   "convert_field", "field_list", "compose_value", "field", 
                   "funcName", "sparklineFunc", "eval_expression", "eval_primaryValue", 
                   "eval_fvalue", "eval_field", "timeline_options", "chart_option", 
                   "row_split", "column_split" ];

function Splv1Parser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

Splv1Parser.prototype = Object.create(antlr4.Parser.prototype);
Splv1Parser.prototype.constructor = Splv1Parser;

Object.defineProperty(Splv1Parser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

Splv1Parser.EOF = antlr4.Token.EOF;
Splv1Parser.BINS = 1;
Splv1Parser.SPAN = 2;
Splv1Parser.START = 3;
Splv1Parser.END = 4;
Splv1Parser.ALIGN = 5;
Splv1Parser.START_TIME = 6;
Splv1Parser.END_TIME = 7;
Splv1Parser.EQ = 8;
Splv1Parser.NEQJ = 9;
Splv1Parser.LT = 10;
Splv1Parser.LTE = 11;
Splv1Parser.GT = 12;
Splv1Parser.GTE = 13;
Splv1Parser.EVAL = 14;
Splv1Parser.WHERE = 15;
Splv1Parser.LIKE = 16;
Splv1Parser.JOIN = 17;
Splv1Parser.LOOKUP = 18;
Splv1Parser.OUTPUT = 19;
Splv1Parser.FROM = 20;
Splv1Parser.STATS = 21;
Splv1Parser.TIMECHART = 22;
Splv1Parser.MOVINGAVG = 23;
Splv1Parser.WINDOW = 24;
Splv1Parser.MODEL = 25;
Splv1Parser.EVENTSTATS = 26;
Splv1Parser.TOP = 27;
Splv1Parser.RARE = 28;
Splv1Parser.SORT = 29;
Splv1Parser.BY = 30;
Splv1Parser.IN = 31;
Splv1Parser.WITH = 32;
Splv1Parser.AS = 33;
Splv1Parser.LIMIT = 34;
Splv1Parser.FIELDS = 35;
Splv1Parser.DEDUP = 36;
Splv1Parser.RENAME = 37;
Splv1Parser.REPLACE = 38;
Splv1Parser.REX = 39;
Splv1Parser.FIELD = 40;
Splv1Parser.BUCKET = 41;
Splv1Parser.SEARCH = 42;
Splv1Parser.JSONPATH = 43;
Splv1Parser.XMLPATH = 44;
Splv1Parser.INPUT = 45;
Splv1Parser.PATH = 46;
Splv1Parser.MVEXPAND = 47;
Splv1Parser.MVCOMBINE = 48;
Splv1Parser.IPLOCATION = 49;
Splv1Parser.PREFIX = 50;
Splv1Parser.ALLFIELDS = 51;
Splv1Parser.LANG = 52;
Splv1Parser.APPEND = 53;
Splv1Parser.APPEND_MAXTIME = 54;
Splv1Parser.APPEND_MAXOUT = 55;
Splv1Parser.APPEND_TIMEOUT = 56;
Splv1Parser.EXPORT = 57;
Splv1Parser.EXPORT_SINKTYPE = 58;
Splv1Parser.EXPORT_BATCH_SIZE = 59;
Splv1Parser.CONVERT = 60;
Splv1Parser.TIMEFORMAT = 61;
Splv1Parser.TRANSACTION = 62;
Splv1Parser.TRANSACTION_STARTSWITH = 63;
Splv1Parser.TRANSACTION_ENDSWITH = 64;
Splv1Parser.TRANSACTION_MAXSPAN = 65;
Splv1Parser.TRANSACTION_MAXPAUSE = 66;
Splv1Parser.TRANSACTION_MAXEVENTS = 67;
Splv1Parser.TRANSACTION_DELIM = 68;
Splv1Parser.TRANSACTION_MVLIST = 69;
Splv1Parser.TRANSACTION_NULLSTR = 70;
Splv1Parser.TRANSACTION_MVRAW = 71;
Splv1Parser.TRANSACTION_MAXOPENTXN = 72;
Splv1Parser.TRANSACTION_MAXOPENEVENTS = 73;
Splv1Parser.TRANSACTION_KEEPEVICTED = 74;
Splv1Parser.TIMELINE_INTERVAL = 75;
Splv1Parser.TIMELINE_MIN_BOUND = 76;
Splv1Parser.TIMELINE_MAX_BOUND = 77;
Splv1Parser.COMPOSE = 78;
Splv1Parser.COMPOSE_MODE = 79;
Splv1Parser.COMPOSE_MODE_FAST = 80;
Splv1Parser.COMPOSE_MODE_SMART = 81;
Splv1Parser.COMPOSE_MODE_DETAILED = 82;
Splv1Parser.COMPOSE_ACTIONS = 83;
Splv1Parser.COMPOSE_ACTION_LIMIT = 84;
Splv1Parser.COMPOSE_ACTION_HISTOGRAM = 85;
Splv1Parser.COMPOSE_ACTION_SUMMARY = 86;
Splv1Parser.COMPOSE_ACTION_RESULT = 87;
Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY = 88;
Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY = 89;
Splv1Parser.ASYNC = 90;
Splv1Parser.PARALLEL = 91;
Splv1Parser.CHART = 92;
Splv1Parser.OVER = 93;
Splv1Parser.ADDTOTALS = 94;
Splv1Parser.FIELDNAME = 95;
Splv1Parser.LPAREN = 96;
Splv1Parser.RPAREN = 97;
Splv1Parser.LBRACK = 98;
Splv1Parser.RBRACK = 99;
Splv1Parser.COLON = 100;
Splv1Parser.COMMA = 101;
Splv1Parser.STAR = 102;
Splv1Parser.SLASH = 103;
Splv1Parser.PERCENT = 104;
Splv1Parser.PLUS = 105;
Splv1Parser.MINUS = 106;
Splv1Parser.QMARK = 107;
Splv1Parser.VBAR = 108;
Splv1Parser.LCURLY = 109;
Splv1Parser.RCURLY = 110;
Splv1Parser.DQUOTE = 111;
Splv1Parser.SQUOTE = 112;
Splv1Parser.AND = 113;
Splv1Parser.OR = 114;
Splv1Parser.NOT = 115;
Splv1Parser.DESC = 116;
Splv1Parser.ASC = 117;
Splv1Parser.TYPE = 118;
Splv1Parser.MAX = 119;
Splv1Parser.BOOL = 120;
Splv1Parser.INT = 121;
Splv1Parser.NUM = 122;
Splv1Parser.REGEX = 123;
Splv1Parser.IDENTIFIER = 124;
Splv1Parser.IDENTIFIER_WITH_STAR = 125;
Splv1Parser.QUOTED_STRING = 126;
Splv1Parser.UNQOTED_STRING = 127;
Splv1Parser.WS = 128;

Splv1Parser.RULE_main = 0;
Splv1Parser.RULE_operators = 1;
Splv1Parser.RULE_from = 2;
Splv1Parser.RULE_operator = 3;
Splv1Parser.RULE_from_source = 4;
Splv1Parser.RULE_args = 5;
Splv1Parser.RULE_args_value = 6;
Splv1Parser.RULE_args_name = 7;
Splv1Parser.RULE_export_field = 8;
Splv1Parser.RULE_sink_field = 9;
Splv1Parser.RULE_batch_field = 10;
Splv1Parser.RULE_timeformat_field = 11;
Splv1Parser.RULE_convert_func = 12;
Splv1Parser.RULE_convert_func_field = 13;
Splv1Parser.RULE_lookup_field = 14;
Splv1Parser.RULE_lookup_fields = 15;
Splv1Parser.RULE_movingavg_option = 16;
Splv1Parser.RULE_iplocation_option = 17;
Splv1Parser.RULE_append_option = 18;
Splv1Parser.RULE_bucket_option = 19;
Splv1Parser.RULE_transaction_options = 20;
Splv1Parser.RULE_transaction_define_option = 21;
Splv1Parser.RULE_transaction_rendering_option = 22;
Splv1Parser.RULE_transaction_memcontrol_option = 23;
Splv1Parser.RULE_transaction_filter = 24;
Splv1Parser.RULE_addtotals_option = 25;
Splv1Parser.RULE_search = 26;
Splv1Parser.RULE_start_value = 27;
Splv1Parser.RULE_end_value = 28;
Splv1Parser.RULE_search_option = 29;
Splv1Parser.RULE_spanValue = 30;
Splv1Parser.RULE_rename_field = 31;
Splv1Parser.RULE_replace_with = 32;
Splv1Parser.RULE_search_expression = 33;
Splv1Parser.RULE_search_query = 34;
Splv1Parser.RULE_unqoted_string_value = 35;
Splv1Parser.RULE_search_query_value = 36;
Splv1Parser.RULE_search_query_value_list = 37;
Splv1Parser.RULE_signed_int = 38;
Splv1Parser.RULE_signed_num = 39;
Splv1Parser.RULE_stats_func = 40;
Splv1Parser.RULE_reserve_field = 41;
Splv1Parser.RULE_sort_field = 42;
Splv1Parser.RULE_convert_field = 43;
Splv1Parser.RULE_field_list = 44;
Splv1Parser.RULE_compose_value = 45;
Splv1Parser.RULE_field = 46;
Splv1Parser.RULE_funcName = 47;
Splv1Parser.RULE_sparklineFunc = 48;
Splv1Parser.RULE_eval_expression = 49;
Splv1Parser.RULE_eval_primaryValue = 50;
Splv1Parser.RULE_eval_fvalue = 51;
Splv1Parser.RULE_eval_field = 52;
Splv1Parser.RULE_timeline_options = 53;
Splv1Parser.RULE_chart_option = 54;
Splv1Parser.RULE_row_split = 55;
Splv1Parser.RULE_column_split = 56;


function MainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_main;
    return this;
}

MainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MainContext.prototype.constructor = MainContext;

MainContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

MainContext.prototype.EOF = function() {
    return this.getToken(Splv1Parser.EOF, 0);
};

MainContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterMain(this);
	}
};

MainContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitMain(this);
	}
};




Splv1Parser.MainContext = MainContext;

Splv1Parser.prototype.main = function() {

    var localctx = new MainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, Splv1Parser.RULE_main);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 114;
        this.operators();
        this.state = 115;
        this.match(Splv1Parser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_operators;
    return this;
}

OperatorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorsContext.prototype.constructor = OperatorsContext;

OperatorsContext.prototype.search = function() {
    return this.getTypedRuleContext(SearchContext,0);
};

OperatorsContext.prototype.VBAR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.VBAR);
    } else {
        return this.getToken(Splv1Parser.VBAR, i);
    }
};


OperatorsContext.prototype.operator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OperatorContext);
    } else {
        return this.getTypedRuleContext(OperatorContext,i);
    }
};

OperatorsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterOperators(this);
	}
};

OperatorsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitOperators(this);
	}
};




Splv1Parser.OperatorsContext = OperatorsContext;

Splv1Parser.prototype.operators = function() {

    var localctx = new OperatorsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, Splv1Parser.RULE_operators);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 118;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
        if(la_===1) {
            this.state = 117;
            this.search();

        }
        this.state = 124;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Splv1Parser.VBAR) {
            this.state = 120;
            this.match(Splv1Parser.VBAR);
            this.state = 121;
            this.operator();
            this.state = 126;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_from;
    return this;
}

FromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromContext.prototype.constructor = FromContext;

FromContext.prototype.operators = function() {
    return this.getTypedRuleContext(OperatorsContext,0);
};

FromContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterFrom(this);
	}
};

FromContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitFrom(this);
	}
};




Splv1Parser.FromContext = FromContext;

Splv1Parser.prototype.from = function() {

    var localctx = new FromContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, Splv1Parser.RULE_from);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 127;
        this.operators();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_operator;
    return this;
}

OperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OperatorContext.prototype.constructor = OperatorContext;


 
OperatorContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function EventstatsContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EventstatsContext.prototype = Object.create(OperatorContext.prototype);
EventstatsContext.prototype.constructor = EventstatsContext;

Splv1Parser.EventstatsContext = EventstatsContext;

EventstatsContext.prototype.EVENTSTATS = function() {
    return this.getToken(Splv1Parser.EVENTSTATS, 0);
};

EventstatsContext.prototype.stats_func = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Stats_funcContext);
    } else {
        return this.getTypedRuleContext(Stats_funcContext,i);
    }
};

EventstatsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};


EventstatsContext.prototype.BY = function() {
    return this.getToken(Splv1Parser.BY, 0);
};

EventstatsContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};
EventstatsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEventstats(this);
	}
};

EventstatsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEventstats(this);
	}
};


function IplocationContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.option = null; // Iplocation_optionContext;
    this.ipfield = null; // FieldContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

IplocationContext.prototype = Object.create(OperatorContext.prototype);
IplocationContext.prototype.constructor = IplocationContext;

Splv1Parser.IplocationContext = IplocationContext;

IplocationContext.prototype.IPLOCATION = function() {
    return this.getToken(Splv1Parser.IPLOCATION, 0);
};

IplocationContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

IplocationContext.prototype.iplocation_option = function() {
    return this.getTypedRuleContext(Iplocation_optionContext,0);
};
IplocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterIplocation(this);
	}
};

IplocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitIplocation(this);
	}
};


function AddtotalsContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AddtotalsContext.prototype = Object.create(OperatorContext.prototype);
AddtotalsContext.prototype.constructor = AddtotalsContext;

Splv1Parser.AddtotalsContext = AddtotalsContext;

AddtotalsContext.prototype.ADDTOTALS = function() {
    return this.getToken(Splv1Parser.ADDTOTALS, 0);
};

AddtotalsContext.prototype.addtotals_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Addtotals_optionContext);
    } else {
        return this.getTypedRuleContext(Addtotals_optionContext,i);
    }
};

AddtotalsContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};
AddtotalsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterAddtotals(this);
	}
};

AddtotalsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitAddtotals(this);
	}
};


function ReplaceContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this._replace_with = null; // Replace_withContext;
    this.withs = []; // of Replace_withContexts;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ReplaceContext.prototype = Object.create(OperatorContext.prototype);
ReplaceContext.prototype.constructor = ReplaceContext;

Splv1Parser.ReplaceContext = ReplaceContext;

ReplaceContext.prototype.REPLACE = function() {
    return this.getToken(Splv1Parser.REPLACE, 0);
};

ReplaceContext.prototype.IN = function() {
    return this.getToken(Splv1Parser.IN, 0);
};

ReplaceContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};

ReplaceContext.prototype.replace_with = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Replace_withContext);
    } else {
        return this.getTypedRuleContext(Replace_withContext,i);
    }
};

ReplaceContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};

ReplaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterReplace(this);
	}
};

ReplaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitReplace(this);
	}
};


function ConvertContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.timeformat = null; // Timeformat_fieldContext;
    this.funcs = null; // Convert_func_fieldContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConvertContext.prototype = Object.create(OperatorContext.prototype);
ConvertContext.prototype.constructor = ConvertContext;

Splv1Parser.ConvertContext = ConvertContext;

ConvertContext.prototype.CONVERT = function() {
    return this.getToken(Splv1Parser.CONVERT, 0);
};

ConvertContext.prototype.convert_func_field = function() {
    return this.getTypedRuleContext(Convert_func_fieldContext,0);
};

ConvertContext.prototype.timeformat_field = function() {
    return this.getTypedRuleContext(Timeformat_fieldContext,0);
};
ConvertContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterConvert(this);
	}
};

ConvertContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitConvert(this);
	}
};


function TimechartContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TimechartContext.prototype = Object.create(OperatorContext.prototype);
TimechartContext.prototype.constructor = TimechartContext;

Splv1Parser.TimechartContext = TimechartContext;

TimechartContext.prototype.TIMECHART = function() {
    return this.getToken(Splv1Parser.TIMECHART, 0);
};

TimechartContext.prototype.stats_func = function() {
    return this.getTypedRuleContext(Stats_funcContext,0);
};

TimechartContext.prototype.bucket_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bucket_optionContext);
    } else {
        return this.getTypedRuleContext(Bucket_optionContext,i);
    }
};

TimechartContext.prototype.BY = function() {
    return this.getToken(Splv1Parser.BY, 0);
};

TimechartContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};
TimechartContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterTimechart(this);
	}
};

TimechartContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitTimechart(this);
	}
};


function MovingavgContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.oldField = null; // FieldContext;
    this.alias = null; // FieldContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MovingavgContext.prototype = Object.create(OperatorContext.prototype);
MovingavgContext.prototype.constructor = MovingavgContext;

Splv1Parser.MovingavgContext = MovingavgContext;

MovingavgContext.prototype.MOVINGAVG = function() {
    return this.getToken(Splv1Parser.MOVINGAVG, 0);
};

MovingavgContext.prototype.movingavg_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Movingavg_optionContext);
    } else {
        return this.getTypedRuleContext(Movingavg_optionContext,i);
    }
};

MovingavgContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

MovingavgContext.prototype.AS = function() {
    return this.getToken(Splv1Parser.AS, 0);
};

MovingavgContext.prototype.BY = function() {
    return this.getToken(Splv1Parser.BY, 0);
};

MovingavgContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};
MovingavgContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterMovingavg(this);
	}
};

MovingavgContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitMovingavg(this);
	}
};


function TopContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.limit = null; // Signed_intContext;
    this.topField = null; // Field_listContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TopContext.prototype = Object.create(OperatorContext.prototype);
TopContext.prototype.constructor = TopContext;

Splv1Parser.TopContext = TopContext;

TopContext.prototype.TOP = function() {
    return this.getToken(Splv1Parser.TOP, 0);
};

TopContext.prototype.field_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Field_listContext);
    } else {
        return this.getTypedRuleContext(Field_listContext,i);
    }
};

TopContext.prototype.BY = function() {
    return this.getToken(Splv1Parser.BY, 0);
};

TopContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};
TopContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterTop(this);
	}
};

TopContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitTop(this);
	}
};


function StatsContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StatsContext.prototype = Object.create(OperatorContext.prototype);
StatsContext.prototype.constructor = StatsContext;

Splv1Parser.StatsContext = StatsContext;

StatsContext.prototype.STATS = function() {
    return this.getToken(Splv1Parser.STATS, 0);
};

StatsContext.prototype.stats_func = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Stats_funcContext);
    } else {
        return this.getTypedRuleContext(Stats_funcContext,i);
    }
};

StatsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};


StatsContext.prototype.BY = function() {
    return this.getToken(Splv1Parser.BY, 0);
};

StatsContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};
StatsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterStats(this);
	}
};

StatsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitStats(this);
	}
};


function RareContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.limit = null; // Signed_intContext;
    this.topField = null; // FieldContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RareContext.prototype = Object.create(OperatorContext.prototype);
RareContext.prototype.constructor = RareContext;

Splv1Parser.RareContext = RareContext;

RareContext.prototype.RARE = function() {
    return this.getToken(Splv1Parser.RARE, 0);
};

RareContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

RareContext.prototype.BY = function() {
    return this.getToken(Splv1Parser.BY, 0);
};

RareContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};

RareContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};
RareContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterRare(this);
	}
};

RareContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitRare(this);
	}
};


function LimitContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.limit = null; // Signed_intContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LimitContext.prototype = Object.create(OperatorContext.prototype);
LimitContext.prototype.constructor = LimitContext;

Splv1Parser.LimitContext = LimitContext;

LimitContext.prototype.LIMIT = function() {
    return this.getToken(Splv1Parser.LIMIT, 0);
};

LimitContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};
LimitContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterLimit(this);
	}
};

LimitContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitLimit(this);
	}
};


function JsonpathContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.in = null; // FieldContext;
    this.out = null; // FieldContext;
    this.path = null; // FieldContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JsonpathContext.prototype = Object.create(OperatorContext.prototype);
JsonpathContext.prototype.constructor = JsonpathContext;

Splv1Parser.JsonpathContext = JsonpathContext;

JsonpathContext.prototype.JSONPATH = function() {
    return this.getToken(Splv1Parser.JSONPATH, 0);
};

JsonpathContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

JsonpathContext.prototype.INPUT = function() {
    return this.getToken(Splv1Parser.INPUT, 0);
};

JsonpathContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.EQ);
    } else {
        return this.getToken(Splv1Parser.EQ, i);
    }
};


JsonpathContext.prototype.OUTPUT = function() {
    return this.getToken(Splv1Parser.OUTPUT, 0);
};

JsonpathContext.prototype.PATH = function() {
    return this.getToken(Splv1Parser.PATH, 0);
};
JsonpathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterJsonpath(this);
	}
};

JsonpathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitJsonpath(this);
	}
};


function WhereContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

WhereContext.prototype = Object.create(OperatorContext.prototype);
WhereContext.prototype.constructor = WhereContext;

Splv1Parser.WhereContext = WhereContext;

WhereContext.prototype.WHERE = function() {
    return this.getToken(Splv1Parser.WHERE, 0);
};

WhereContext.prototype.eval_expression = function() {
    return this.getTypedRuleContext(Eval_expressionContext,0);
};
WhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterWhere(this);
	}
};

WhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitWhere(this);
	}
};


function JoinContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.type = null; // FieldContext;
    this.max = null; // Signed_intContext;
    this.on = null; // Field_listContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinContext.prototype = Object.create(OperatorContext.prototype);
JoinContext.prototype.constructor = JoinContext;

Splv1Parser.JoinContext = JoinContext;

JoinContext.prototype.JOIN = function() {
    return this.getToken(Splv1Parser.JOIN, 0);
};

JoinContext.prototype.TYPE = function() {
    return this.getToken(Splv1Parser.TYPE, 0);
};

JoinContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.EQ);
    } else {
        return this.getToken(Splv1Parser.EQ, i);
    }
};


JoinContext.prototype.LBRACK = function() {
    return this.getToken(Splv1Parser.LBRACK, 0);
};

JoinContext.prototype.from = function() {
    return this.getTypedRuleContext(FromContext,0);
};

JoinContext.prototype.RBRACK = function() {
    return this.getToken(Splv1Parser.RBRACK, 0);
};

JoinContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

JoinContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};

JoinContext.prototype.MAX = function() {
    return this.getToken(Splv1Parser.MAX, 0);
};

JoinContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};
JoinContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterJoin(this);
	}
};

JoinContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitJoin(this);
	}
};


function ExportContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExportContext.prototype = Object.create(OperatorContext.prototype);
ExportContext.prototype.constructor = ExportContext;

Splv1Parser.ExportContext = ExportContext;

ExportContext.prototype.EXPORT = function() {
    return this.getToken(Splv1Parser.EXPORT, 0);
};

ExportContext.prototype.sink_field = function() {
    return this.getTypedRuleContext(Sink_fieldContext,0);
};

ExportContext.prototype.export_field = function() {
    return this.getTypedRuleContext(Export_fieldContext,0);
};

ExportContext.prototype.batch_field = function() {
    return this.getTypedRuleContext(Batch_fieldContext,0);
};

ExportContext.prototype.args = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgsContext);
    } else {
        return this.getTypedRuleContext(ArgsContext,i);
    }
};
ExportContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterExport(this);
	}
};

ExportContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitExport(this);
	}
};


function LookupContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.table = null; // Token;
    this.in = null; // Lookup_fieldsContext;
    this.outs = null; // Lookup_fieldsContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LookupContext.prototype = Object.create(OperatorContext.prototype);
LookupContext.prototype.constructor = LookupContext;

Splv1Parser.LookupContext = LookupContext;

LookupContext.prototype.LOOKUP = function() {
    return this.getToken(Splv1Parser.LOOKUP, 0);
};

LookupContext.prototype.OUTPUT = function() {
    return this.getToken(Splv1Parser.OUTPUT, 0);
};

LookupContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

LookupContext.prototype.lookup_fields = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Lookup_fieldsContext);
    } else {
        return this.getTypedRuleContext(Lookup_fieldsContext,i);
    }
};
LookupContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterLookup(this);
	}
};

LookupContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitLookup(this);
	}
};


function SortContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.limit = null; // Signed_intContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SortContext.prototype = Object.create(OperatorContext.prototype);
SortContext.prototype.constructor = SortContext;

Splv1Parser.SortContext = SortContext;

SortContext.prototype.SORT = function() {
    return this.getToken(Splv1Parser.SORT, 0);
};

SortContext.prototype.BY = function() {
    return this.getToken(Splv1Parser.BY, 0);
};

SortContext.prototype.sort_field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Sort_fieldContext);
    } else {
        return this.getTypedRuleContext(Sort_fieldContext,i);
    }
};

SortContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};


SortContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};
SortContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSort(this);
	}
};

SortContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSort(this);
	}
};


function MvexpandContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.limit = null; // Signed_intContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MvexpandContext.prototype = Object.create(OperatorContext.prototype);
MvexpandContext.prototype.constructor = MvexpandContext;

Splv1Parser.MvexpandContext = MvexpandContext;

MvexpandContext.prototype.MVEXPAND = function() {
    return this.getToken(Splv1Parser.MVEXPAND, 0);
};

MvexpandContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

MvexpandContext.prototype.LIMIT = function() {
    return this.getToken(Splv1Parser.LIMIT, 0);
};

MvexpandContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

MvexpandContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};
MvexpandContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterMvexpand(this);
	}
};

MvexpandContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitMvexpand(this);
	}
};


function DedupContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DedupContext.prototype = Object.create(OperatorContext.prototype);
DedupContext.prototype.constructor = DedupContext;

Splv1Parser.DedupContext = DedupContext;

DedupContext.prototype.DEDUP = function() {
    return this.getToken(Splv1Parser.DEDUP, 0);
};

DedupContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};
DedupContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterDedup(this);
	}
};

DedupContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitDedup(this);
	}
};


function XmlpathContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.in = null; // FieldContext;
    this.out = null; // FieldContext;
    this.path = null; // FieldContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

XmlpathContext.prototype = Object.create(OperatorContext.prototype);
XmlpathContext.prototype.constructor = XmlpathContext;

Splv1Parser.XmlpathContext = XmlpathContext;

XmlpathContext.prototype.XMLPATH = function() {
    return this.getToken(Splv1Parser.XMLPATH, 0);
};

XmlpathContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

XmlpathContext.prototype.INPUT = function() {
    return this.getToken(Splv1Parser.INPUT, 0);
};

XmlpathContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.EQ);
    } else {
        return this.getToken(Splv1Parser.EQ, i);
    }
};


XmlpathContext.prototype.OUTPUT = function() {
    return this.getToken(Splv1Parser.OUTPUT, 0);
};

XmlpathContext.prototype.PATH = function() {
    return this.getToken(Splv1Parser.PATH, 0);
};
XmlpathContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterXmlpath(this);
	}
};

XmlpathContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitXmlpath(this);
	}
};


function BucketContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.binField = null; // FieldContext;
    this.asField = null; // FieldContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BucketContext.prototype = Object.create(OperatorContext.prototype);
BucketContext.prototype.constructor = BucketContext;

Splv1Parser.BucketContext = BucketContext;

BucketContext.prototype.BUCKET = function() {
    return this.getToken(Splv1Parser.BUCKET, 0);
};

BucketContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

BucketContext.prototype.AS = function() {
    return this.getToken(Splv1Parser.AS, 0);
};

BucketContext.prototype.bucket_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bucket_optionContext);
    } else {
        return this.getTypedRuleContext(Bucket_optionContext,i);
    }
};
BucketContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterBucket(this);
	}
};

BucketContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitBucket(this);
	}
};


function From_funcContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

From_funcContext.prototype = Object.create(OperatorContext.prototype);
From_funcContext.prototype.constructor = From_funcContext;

Splv1Parser.From_funcContext = From_funcContext;

From_funcContext.prototype.FROM = function() {
    return this.getToken(Splv1Parser.FROM, 0);
};

From_funcContext.prototype.from_source = function() {
    return this.getTypedRuleContext(From_sourceContext,0);
};
From_funcContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterFrom_func(this);
	}
};

From_funcContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitFrom_func(this);
	}
};


function RegexContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.regex_expression = null; // Token;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RegexContext.prototype = Object.create(OperatorContext.prototype);
RegexContext.prototype.constructor = RegexContext;

Splv1Parser.RegexContext = RegexContext;

RegexContext.prototype.REX = function() {
    return this.getToken(Splv1Parser.REX, 0);
};

RegexContext.prototype.FIELD = function() {
    return this.getToken(Splv1Parser.FIELD, 0);
};

RegexContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

RegexContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

RegexContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};
RegexContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterRegex(this);
	}
};

RegexContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitRegex(this);
	}
};


function EvalContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EvalContext.prototype = Object.create(OperatorContext.prototype);
EvalContext.prototype.constructor = EvalContext;

Splv1Parser.EvalContext = EvalContext;

EvalContext.prototype.EVAL = function() {
    return this.getToken(Splv1Parser.EVAL, 0);
};

EvalContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

EvalContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.EQ);
    } else {
        return this.getToken(Splv1Parser.EQ, i);
    }
};


EvalContext.prototype.eval_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Eval_expressionContext);
    } else {
        return this.getTypedRuleContext(Eval_expressionContext,i);
    }
};

EvalContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};

EvalContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval(this);
	}
};

EvalContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval(this);
	}
};


function RenameContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RenameContext.prototype = Object.create(OperatorContext.prototype);
RenameContext.prototype.constructor = RenameContext;

Splv1Parser.RenameContext = RenameContext;

RenameContext.prototype.RENAME = function() {
    return this.getToken(Splv1Parser.RENAME, 0);
};

RenameContext.prototype.rename_field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Rename_fieldContext);
    } else {
        return this.getTypedRuleContext(Rename_fieldContext,i);
    }
};

RenameContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};

RenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterRename(this);
	}
};

RenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitRename(this);
	}
};


function ComposeContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.mode_field = null; // Token;
    this.limit = null; // Signed_intContext;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ComposeContext.prototype = Object.create(OperatorContext.prototype);
ComposeContext.prototype.constructor = ComposeContext;

Splv1Parser.ComposeContext = ComposeContext;

ComposeContext.prototype.COMPOSE = function() {
    return this.getToken(Splv1Parser.COMPOSE, 0);
};

ComposeContext.prototype.COMPOSE_MODE = function() {
    return this.getToken(Splv1Parser.COMPOSE_MODE, 0);
};

ComposeContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.EQ);
    } else {
        return this.getToken(Splv1Parser.EQ, i);
    }
};


ComposeContext.prototype.COMPOSE_ACTIONS = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTIONS, 0);
};

ComposeContext.prototype.compose_value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Compose_valueContext);
    } else {
        return this.getTypedRuleContext(Compose_valueContext,i);
    }
};

ComposeContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

ComposeContext.prototype.COMPOSE_MODE_FAST = function() {
    return this.getToken(Splv1Parser.COMPOSE_MODE_FAST, 0);
};

ComposeContext.prototype.COMPOSE_MODE_SMART = function() {
    return this.getToken(Splv1Parser.COMPOSE_MODE_SMART, 0);
};

ComposeContext.prototype.COMPOSE_MODE_DETAILED = function() {
    return this.getToken(Splv1Parser.COMPOSE_MODE_DETAILED, 0);
};

ComposeContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};

ComposeContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterCompose(this);
	}
};

ComposeContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitCompose(this);
	}
};


function MvcombineContext(parser, ctx) {
	OperatorContext.call(this, parser);
    this.delim = null; // Token;
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MvcombineContext.prototype = Object.create(OperatorContext.prototype);
MvcombineContext.prototype.constructor = MvcombineContext;

Splv1Parser.MvcombineContext = MvcombineContext;

MvcombineContext.prototype.MVCOMBINE = function() {
    return this.getToken(Splv1Parser.MVCOMBINE, 0);
};

MvcombineContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

MvcombineContext.prototype.TRANSACTION_DELIM = function() {
    return this.getToken(Splv1Parser.TRANSACTION_DELIM, 0);
};

MvcombineContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

MvcombineContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};
MvcombineContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterMvcombine(this);
	}
};

MvcombineContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitMvcombine(this);
	}
};


function FieldsContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FieldsContext.prototype = Object.create(OperatorContext.prototype);
FieldsContext.prototype.constructor = FieldsContext;

Splv1Parser.FieldsContext = FieldsContext;

FieldsContext.prototype.FIELDS = function() {
    return this.getToken(Splv1Parser.FIELDS, 0);
};

FieldsContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};

FieldsContext.prototype.MINUS = function() {
    return this.getToken(Splv1Parser.MINUS, 0);
};

FieldsContext.prototype.PLUS = function() {
    return this.getToken(Splv1Parser.PLUS, 0);
};
FieldsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterFields(this);
	}
};

FieldsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitFields(this);
	}
};


function ChartContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ChartContext.prototype = Object.create(OperatorContext.prototype);
ChartContext.prototype.constructor = ChartContext;

Splv1Parser.ChartContext = ChartContext;

ChartContext.prototype.CHART = function() {
    return this.getToken(Splv1Parser.CHART, 0);
};

ChartContext.prototype.stats_func = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Stats_funcContext);
    } else {
        return this.getTypedRuleContext(Stats_funcContext,i);
    }
};

ChartContext.prototype.chart_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Chart_optionContext);
    } else {
        return this.getTypedRuleContext(Chart_optionContext,i);
    }
};

ChartContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};


ChartContext.prototype.OVER = function() {
    return this.getToken(Splv1Parser.OVER, 0);
};

ChartContext.prototype.row_split = function() {
    return this.getTypedRuleContext(Row_splitContext,0);
};

ChartContext.prototype.BY = function() {
    return this.getToken(Splv1Parser.BY, 0);
};

ChartContext.prototype.column_split = function() {
    return this.getTypedRuleContext(Column_splitContext,0);
};
ChartContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterChart(this);
	}
};

ChartContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitChart(this);
	}
};


function AppendContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AppendContext.prototype = Object.create(OperatorContext.prototype);
AppendContext.prototype.constructor = AppendContext;

Splv1Parser.AppendContext = AppendContext;

AppendContext.prototype.APPEND = function() {
    return this.getToken(Splv1Parser.APPEND, 0);
};

AppendContext.prototype.LBRACK = function() {
    return this.getToken(Splv1Parser.LBRACK, 0);
};

AppendContext.prototype.from = function() {
    return this.getTypedRuleContext(FromContext,0);
};

AppendContext.prototype.RBRACK = function() {
    return this.getToken(Splv1Parser.RBRACK, 0);
};

AppendContext.prototype.append_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Append_optionContext);
    } else {
        return this.getTypedRuleContext(Append_optionContext,i);
    }
};
AppendContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterAppend(this);
	}
};

AppendContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitAppend(this);
	}
};


function TransactionContext(parser, ctx) {
	OperatorContext.call(this, parser);
    OperatorContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TransactionContext.prototype = Object.create(OperatorContext.prototype);
TransactionContext.prototype.constructor = TransactionContext;

Splv1Parser.TransactionContext = TransactionContext;

TransactionContext.prototype.TRANSACTION = function() {
    return this.getToken(Splv1Parser.TRANSACTION, 0);
};

TransactionContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};

TransactionContext.prototype.transaction_options = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Transaction_optionsContext);
    } else {
        return this.getTypedRuleContext(Transaction_optionsContext,i);
    }
};
TransactionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterTransaction(this);
	}
};

TransactionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitTransaction(this);
	}
};



Splv1Parser.OperatorContext = OperatorContext;

Splv1Parser.prototype.operator = function() {

    var localctx = new OperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, Splv1Parser.RULE_operator);
    var _la = 0; // Token type
    try {
        this.state = 447;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.SORT:
            localctx = new SortContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 129;
            this.match(Splv1Parser.SORT);
            this.state = 131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 105)) & ~0x1f) == 0 && ((1 << (_la - 105)) & ((1 << (Splv1Parser.PLUS - 105)) | (1 << (Splv1Parser.MINUS - 105)) | (1 << (Splv1Parser.INT - 105)))) !== 0)) {
                this.state = 130;
                localctx.limit = this.signed_int();
            }

            this.state = 133;
            this.match(Splv1Parser.BY);
            this.state = 134;
            this.sort_field();
            this.state = 139;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Splv1Parser.COMMA) {
                this.state = 135;
                this.match(Splv1Parser.COMMA);
                this.state = 136;
                this.sort_field();
                this.state = 141;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case Splv1Parser.BUCKET:
            localctx = new BucketContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 142;
            this.match(Splv1Parser.BUCKET);
            this.state = 143;
            localctx.binField = this.field();
            this.state = 146;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.AS) {
                this.state = 144;
                this.match(Splv1Parser.AS);
                this.state = 145;
                localctx.asField = this.field();
            }

            this.state = 151;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME))) !== 0)) {
                this.state = 148;
                this.bucket_option();
                this.state = 153;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case Splv1Parser.STATS:
            localctx = new StatsContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 154;
            this.match(Splv1Parser.STATS);
            this.state = 155;
            this.stats_func();
            this.state = 160;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Splv1Parser.COMMA) {
                this.state = 156;
                this.match(Splv1Parser.COMMA);
                this.state = 157;
                this.stats_func();
                this.state = 162;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 165;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.BY) {
                this.state = 163;
                this.match(Splv1Parser.BY);
                this.state = 164;
                this.field_list();
            }

            break;
        case Splv1Parser.TIMECHART:
            localctx = new TimechartContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 167;
            this.match(Splv1Parser.TIMECHART);
            this.state = 171;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,8,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 168;
                    this.bucket_option(); 
                }
                this.state = 173;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,8,this._ctx);
            }

            this.state = 174;
            this.stats_func();
            this.state = 177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.BY) {
                this.state = 175;
                this.match(Splv1Parser.BY);
                this.state = 176;
                this.field();
            }

            break;
        case Splv1Parser.MOVINGAVG:
            localctx = new MovingavgContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 179;
            this.match(Splv1Parser.MOVINGAVG);
            this.state = 183;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 180;
                    this.movingavg_option(); 
                }
                this.state = 185;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
            }

            this.state = 186;
            localctx.oldField = this.field();
            this.state = 189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.AS) {
                this.state = 187;
                this.match(Splv1Parser.AS);
                this.state = 188;
                localctx.alias = this.field();
            }

            this.state = 193;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.BY) {
                this.state = 191;
                this.match(Splv1Parser.BY);
                this.state = 192;
                this.field_list();
            }

            break;
        case Splv1Parser.EVENTSTATS:
            localctx = new EventstatsContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 195;
            this.match(Splv1Parser.EVENTSTATS);
            this.state = 196;
            this.stats_func();
            this.state = 201;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Splv1Parser.COMMA) {
                this.state = 197;
                this.match(Splv1Parser.COMMA);
                this.state = 198;
                this.stats_func();
                this.state = 203;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 206;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.BY) {
                this.state = 204;
                this.match(Splv1Parser.BY);
                this.state = 205;
                this.field_list();
            }

            break;
        case Splv1Parser.TOP:
            localctx = new TopContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 208;
            this.match(Splv1Parser.TOP);
            this.state = 210;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
            if(la_===1) {
                this.state = 209;
                localctx.limit = this.signed_int();

            }
            this.state = 212;
            localctx.topField = this.field_list();
            this.state = 215;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.BY) {
                this.state = 213;
                this.match(Splv1Parser.BY);
                this.state = 214;
                this.field_list();
            }

            break;
        case Splv1Parser.RARE:
            localctx = new RareContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 217;
            this.match(Splv1Parser.RARE);
            this.state = 219;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            if(la_===1) {
                this.state = 218;
                localctx.limit = this.signed_int();

            }
            this.state = 221;
            localctx.topField = this.field();
            this.state = 224;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.BY) {
                this.state = 222;
                this.match(Splv1Parser.BY);
                this.state = 223;
                this.field_list();
            }

            break;
        case Splv1Parser.LIMIT:
            localctx = new LimitContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 226;
            this.match(Splv1Parser.LIMIT);
            this.state = 227;
            localctx.limit = this.signed_int();
            break;
        case Splv1Parser.FIELDS:
            localctx = new FieldsContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 228;
            this.match(Splv1Parser.FIELDS);
            this.state = 230;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.PLUS || _la===Splv1Parser.MINUS) {
                this.state = 229;
                _la = this._input.LA(1);
                if(!(_la===Splv1Parser.PLUS || _la===Splv1Parser.MINUS)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 232;
            this.field_list();
            break;
        case Splv1Parser.MVEXPAND:
            localctx = new MvexpandContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 233;
            this.match(Splv1Parser.MVEXPAND);
            this.state = 234;
            this.field();
            this.state = 238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.LIMIT) {
                this.state = 235;
                this.match(Splv1Parser.LIMIT);
                this.state = 236;
                this.match(Splv1Parser.EQ);
                this.state = 237;
                localctx.limit = this.signed_int();
            }

            break;
        case Splv1Parser.MVCOMBINE:
            localctx = new MvcombineContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 240;
            this.match(Splv1Parser.MVCOMBINE);
            this.state = 244;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
            if(la_===1) {
                this.state = 241;
                this.match(Splv1Parser.TRANSACTION_DELIM);
                this.state = 242;
                this.match(Splv1Parser.EQ);
                this.state = 243;
                localctx.delim = this.match(Splv1Parser.QUOTED_STRING);

            }
            this.state = 246;
            this.field();
            break;
        case Splv1Parser.APPEND:
            localctx = new AppendContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 247;
            this.match(Splv1Parser.APPEND);
            this.state = 251;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (Splv1Parser.APPEND_MAXTIME - 54)) | (1 << (Splv1Parser.APPEND_MAXOUT - 54)) | (1 << (Splv1Parser.APPEND_TIMEOUT - 54)))) !== 0)) {
                this.state = 248;
                this.append_option();
                this.state = 253;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 254;
            this.match(Splv1Parser.LBRACK);
            this.state = 255;
            this.from();
            this.state = 256;
            this.match(Splv1Parser.RBRACK);
            break;
        case Splv1Parser.WHERE:
            localctx = new WhereContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 258;
            this.match(Splv1Parser.WHERE);
            this.state = 259;
            this.eval_expression(0);
            break;
        case Splv1Parser.EVAL:
            localctx = new EvalContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 260;
            this.match(Splv1Parser.EVAL);

            this.state = 261;
            this.field();
            this.state = 262;
            this.match(Splv1Parser.EQ);
            this.state = 263;
            this.eval_expression(0);
            this.state = 272;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Splv1Parser.COMMA) {
                this.state = 265;
                this.match(Splv1Parser.COMMA);
                this.state = 266;
                this.field();
                this.state = 267;
                this.match(Splv1Parser.EQ);
                this.state = 268;
                this.eval_expression(0);
                this.state = 274;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case Splv1Parser.DEDUP:
            localctx = new DedupContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 275;
            this.match(Splv1Parser.DEDUP);
            this.state = 276;
            this.field_list();
            break;
        case Splv1Parser.RENAME:
            localctx = new RenameContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 277;
            this.match(Splv1Parser.RENAME);
            this.state = 278;
            this.rename_field();
            this.state = 283;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Splv1Parser.COMMA) {
                this.state = 279;
                this.match(Splv1Parser.COMMA);
                this.state = 280;
                this.rename_field();
                this.state = 285;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case Splv1Parser.REPLACE:
            localctx = new ReplaceContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 286;
            this.match(Splv1Parser.REPLACE);
            this.state = 287;
            localctx._replace_with = this.replace_with();
            localctx.withs.push(localctx._replace_with);
            this.state = 292;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Splv1Parser.COMMA) {
                this.state = 288;
                this.match(Splv1Parser.COMMA);
                this.state = 289;
                localctx._replace_with = this.replace_with();
                localctx.withs.push(localctx._replace_with);
                this.state = 294;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 295;
            this.match(Splv1Parser.IN);
            this.state = 296;
            this.field_list();
            break;
        case Splv1Parser.REX:
            localctx = new RegexContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 298;
            this.match(Splv1Parser.REX);
            this.state = 299;
            this.match(Splv1Parser.FIELD);
            this.state = 300;
            this.match(Splv1Parser.EQ);
            this.state = 301;
            this.field();
            this.state = 302;
            localctx.regex_expression = this.match(Splv1Parser.QUOTED_STRING);
            break;
        case Splv1Parser.JOIN:
            localctx = new JoinContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 304;
            this.match(Splv1Parser.JOIN);
            this.state = 305;
            this.match(Splv1Parser.TYPE);
            this.state = 306;
            this.match(Splv1Parser.EQ);
            this.state = 307;
            localctx.type = this.field();
            this.state = 311;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
            if(la_===1) {
                this.state = 308;
                this.match(Splv1Parser.MAX);
                this.state = 309;
                this.match(Splv1Parser.EQ);
                this.state = 310;
                localctx.max = this.signed_int();

            }
            this.state = 313;
            localctx.on = this.field_list();
            this.state = 314;
            this.match(Splv1Parser.LBRACK);
            this.state = 315;
            this.from();
            this.state = 316;
            this.match(Splv1Parser.RBRACK);
            break;
        case Splv1Parser.LOOKUP:
            localctx = new LookupContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 318;
            this.match(Splv1Parser.LOOKUP);
            this.state = 319;
            localctx.table = this.match(Splv1Parser.QUOTED_STRING);
            this.state = 320;
            localctx.in = this.lookup_fields();
            this.state = 321;
            this.match(Splv1Parser.OUTPUT);
            this.state = 322;
            localctx.outs = this.lookup_fields();
            break;
        case Splv1Parser.IPLOCATION:
            localctx = new IplocationContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 324;
            this.match(Splv1Parser.IPLOCATION);
            this.state = 326;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 325;
                localctx.option = this.iplocation_option();

            }
            this.state = 328;
            localctx.ipfield = this.field();
            break;
        case Splv1Parser.TRANSACTION:
            localctx = new TransactionContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 329;
            this.match(Splv1Parser.TRANSACTION);
            this.state = 330;
            this.field_list();
            this.state = 334;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (Splv1Parser.TRANSACTION_STARTSWITH - 63)) | (1 << (Splv1Parser.TRANSACTION_ENDSWITH - 63)) | (1 << (Splv1Parser.TRANSACTION_MAXSPAN - 63)) | (1 << (Splv1Parser.TRANSACTION_MAXPAUSE - 63)) | (1 << (Splv1Parser.TRANSACTION_MAXEVENTS - 63)) | (1 << (Splv1Parser.TRANSACTION_DELIM - 63)) | (1 << (Splv1Parser.TRANSACTION_MVLIST - 63)) | (1 << (Splv1Parser.TRANSACTION_NULLSTR - 63)) | (1 << (Splv1Parser.TRANSACTION_MVRAW - 63)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENTXN - 63)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENEVENTS - 63)) | (1 << (Splv1Parser.TRANSACTION_KEEPEVICTED - 63)))) !== 0)) {
                this.state = 331;
                this.transaction_options();
                this.state = 336;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case Splv1Parser.EXPORT:
            localctx = new ExportContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 337;
            this.match(Splv1Parser.EXPORT);
            this.state = 339;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.TYPE) {
                this.state = 338;
                this.export_field();
            }

            this.state = 341;
            this.sink_field();
            this.state = 343;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
            if(la_===1) {
                this.state = 342;
                this.batch_field();

            }
            this.state = 348;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME) | (1 << Splv1Parser.EVAL) | (1 << Splv1Parser.WHERE) | (1 << Splv1Parser.LIKE) | (1 << Splv1Parser.JOIN) | (1 << Splv1Parser.LOOKUP) | (1 << Splv1Parser.OUTPUT) | (1 << Splv1Parser.FROM) | (1 << Splv1Parser.STATS) | (1 << Splv1Parser.TIMECHART) | (1 << Splv1Parser.MOVINGAVG) | (1 << Splv1Parser.WINDOW) | (1 << Splv1Parser.MODEL) | (1 << Splv1Parser.EVENTSTATS) | (1 << Splv1Parser.TOP) | (1 << Splv1Parser.RARE) | (1 << Splv1Parser.SORT) | (1 << Splv1Parser.BY) | (1 << Splv1Parser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Splv1Parser.WITH - 32)) | (1 << (Splv1Parser.AS - 32)) | (1 << (Splv1Parser.LIMIT - 32)) | (1 << (Splv1Parser.FIELDS - 32)) | (1 << (Splv1Parser.DEDUP - 32)) | (1 << (Splv1Parser.RENAME - 32)) | (1 << (Splv1Parser.REPLACE - 32)) | (1 << (Splv1Parser.REX - 32)) | (1 << (Splv1Parser.FIELD - 32)) | (1 << (Splv1Parser.BUCKET - 32)) | (1 << (Splv1Parser.SEARCH - 32)) | (1 << (Splv1Parser.JSONPATH - 32)) | (1 << (Splv1Parser.XMLPATH - 32)) | (1 << (Splv1Parser.INPUT - 32)) | (1 << (Splv1Parser.PATH - 32)) | (1 << (Splv1Parser.MVEXPAND - 32)) | (1 << (Splv1Parser.MVCOMBINE - 32)) | (1 << (Splv1Parser.IPLOCATION - 32)) | (1 << (Splv1Parser.PREFIX - 32)) | (1 << (Splv1Parser.ALLFIELDS - 32)) | (1 << (Splv1Parser.LANG - 32)) | (1 << (Splv1Parser.APPEND - 32)) | (1 << (Splv1Parser.APPEND_MAXTIME - 32)) | (1 << (Splv1Parser.APPEND_MAXOUT - 32)) | (1 << (Splv1Parser.APPEND_TIMEOUT - 32)) | (1 << (Splv1Parser.EXPORT - 32)) | (1 << (Splv1Parser.EXPORT_SINKTYPE - 32)) | (1 << (Splv1Parser.EXPORT_BATCH_SIZE - 32)) | (1 << (Splv1Parser.CONVERT - 32)) | (1 << (Splv1Parser.TIMEFORMAT - 32)) | (1 << (Splv1Parser.TRANSACTION - 32)) | (1 << (Splv1Parser.TRANSACTION_STARTSWITH - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Splv1Parser.TRANSACTION_ENDSWITH - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXSPAN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXPAUSE - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_DELIM - 64)) | (1 << (Splv1Parser.TRANSACTION_MVLIST - 64)) | (1 << (Splv1Parser.TRANSACTION_NULLSTR - 64)) | (1 << (Splv1Parser.TRANSACTION_MVRAW - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENTXN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_KEEPEVICTED - 64)) | (1 << (Splv1Parser.TIMELINE_INTERVAL - 64)) | (1 << (Splv1Parser.TIMELINE_MIN_BOUND - 64)) | (1 << (Splv1Parser.TIMELINE_MAX_BOUND - 64)) | (1 << (Splv1Parser.COMPOSE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_FAST - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_SMART - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_DETAILED - 64)) | (1 << (Splv1Parser.COMPOSE_ACTIONS - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_LIMIT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_HISTOGRAM - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_RESULT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY - 64)) | (1 << (Splv1Parser.ASYNC - 64)) | (1 << (Splv1Parser.PARALLEL - 64)) | (1 << (Splv1Parser.CHART - 64)) | (1 << (Splv1Parser.OVER - 64)) | (1 << (Splv1Parser.ADDTOTALS - 64)) | (1 << (Splv1Parser.FIELDNAME - 64)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (Splv1Parser.DESC - 116)) | (1 << (Splv1Parser.ASC - 116)) | (1 << (Splv1Parser.TYPE - 116)) | (1 << (Splv1Parser.MAX - 116)) | (1 << (Splv1Parser.IDENTIFIER - 116)))) !== 0)) {
                this.state = 345;
                this.args();
                this.state = 350;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        case Splv1Parser.CONVERT:
            localctx = new ConvertContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 351;
            this.match(Splv1Parser.CONVERT);
            this.state = 353;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
            if(la_===1) {
                this.state = 352;
                localctx.timeformat = this.timeformat_field();

            }
            this.state = 355;
            localctx.funcs = this.convert_func_field();
            break;
        case Splv1Parser.JSONPATH:
            localctx = new JsonpathContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 356;
            this.match(Splv1Parser.JSONPATH);
            this.state = 360;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
            if(la_===1) {
                this.state = 357;
                this.match(Splv1Parser.INPUT);
                this.state = 358;
                this.match(Splv1Parser.EQ);
                this.state = 359;
                localctx.in = this.field();

            }
            this.state = 365;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
            if(la_===1) {
                this.state = 362;
                this.match(Splv1Parser.OUTPUT);
                this.state = 363;
                this.match(Splv1Parser.EQ);
                this.state = 364;
                localctx.out = this.field();

            }
            this.state = 369;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            if(la_===1) {
                this.state = 367;
                this.match(Splv1Parser.PATH);
                this.state = 368;
                this.match(Splv1Parser.EQ);

            }
            this.state = 371;
            localctx.path = this.field();
            break;
        case Splv1Parser.XMLPATH:
            localctx = new XmlpathContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 372;
            this.match(Splv1Parser.XMLPATH);
            this.state = 376;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
            if(la_===1) {
                this.state = 373;
                this.match(Splv1Parser.INPUT);
                this.state = 374;
                this.match(Splv1Parser.EQ);
                this.state = 375;
                localctx.in = this.field();

            }
            this.state = 381;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
            if(la_===1) {
                this.state = 378;
                this.match(Splv1Parser.OUTPUT);
                this.state = 379;
                this.match(Splv1Parser.EQ);
                this.state = 380;
                localctx.out = this.field();

            }
            this.state = 385;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 383;
                this.match(Splv1Parser.PATH);
                this.state = 384;
                this.match(Splv1Parser.EQ);

            }
            this.state = 387;
            localctx.path = this.field();
            break;
        case Splv1Parser.FROM:
            localctx = new From_funcContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 388;
            this.match(Splv1Parser.FROM);
            this.state = 389;
            this.from_source();
            break;
        case Splv1Parser.COMPOSE:
            localctx = new ComposeContext(this, localctx);
            this.enterOuterAlt(localctx, 29);
            this.state = 390;
            this.match(Splv1Parser.COMPOSE);
            this.state = 391;
            this.match(Splv1Parser.COMPOSE_MODE);
            this.state = 392;
            this.match(Splv1Parser.EQ);
            this.state = 393;
            localctx.mode_field = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & ((1 << (Splv1Parser.COMPOSE_MODE_FAST - 80)) | (1 << (Splv1Parser.COMPOSE_MODE_SMART - 80)) | (1 << (Splv1Parser.COMPOSE_MODE_DETAILED - 80)))) !== 0))) {
                localctx.mode_field = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 394;
            this.match(Splv1Parser.COMPOSE_ACTIONS);
            this.state = 395;
            this.match(Splv1Parser.EQ);
            this.state = 396;
            this.compose_value();
            this.state = 401;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Splv1Parser.COMMA) {
                this.state = 397;
                this.match(Splv1Parser.COMMA);
                this.state = 398;
                this.compose_value();
                this.state = 403;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 404;
            localctx.limit = this.signed_int();
            break;
        case Splv1Parser.CHART:
            localctx = new ChartContext(this, localctx);
            this.enterOuterAlt(localctx, 30);
            this.state = 406;
            this.match(Splv1Parser.CHART);
            this.state = 410;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 407;
                    this.chart_option(); 
                }
                this.state = 412;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
            }

            this.state = 413;
            this.stats_func();
            this.state = 418;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===Splv1Parser.COMMA) {
                this.state = 414;
                this.match(Splv1Parser.COMMA);
                this.state = 415;
                this.stats_func();
                this.state = 420;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 435;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case Splv1Parser.OVER:
            	this.state = 421;
            	this.match(Splv1Parser.OVER);
            	this.state = 422;
            	this.row_split();
            	this.state = 425;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===Splv1Parser.BY) {
            	    this.state = 423;
            	    this.match(Splv1Parser.BY);
            	    this.state = 424;
            	    this.column_split();
            	}

            	break;
            case Splv1Parser.BY:
            	this.state = 427;
            	this.match(Splv1Parser.BY);
            	this.state = 428;
            	this.row_split();
            	this.state = 430;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if(_la===Splv1Parser.COMMA) {
            	    this.state = 429;
            	    this.match(Splv1Parser.COMMA);
            	}

            	this.state = 433;
            	this._errHandler.sync(this);
            	_la = this._input.LA(1);
            	if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME) | (1 << Splv1Parser.EVAL) | (1 << Splv1Parser.WHERE) | (1 << Splv1Parser.LIKE) | (1 << Splv1Parser.JOIN) | (1 << Splv1Parser.LOOKUP) | (1 << Splv1Parser.OUTPUT) | (1 << Splv1Parser.FROM) | (1 << Splv1Parser.STATS) | (1 << Splv1Parser.TIMECHART) | (1 << Splv1Parser.MOVINGAVG) | (1 << Splv1Parser.WINDOW) | (1 << Splv1Parser.MODEL) | (1 << Splv1Parser.EVENTSTATS) | (1 << Splv1Parser.TOP) | (1 << Splv1Parser.RARE) | (1 << Splv1Parser.SORT) | (1 << Splv1Parser.BY) | (1 << Splv1Parser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Splv1Parser.WITH - 32)) | (1 << (Splv1Parser.AS - 32)) | (1 << (Splv1Parser.LIMIT - 32)) | (1 << (Splv1Parser.FIELDS - 32)) | (1 << (Splv1Parser.DEDUP - 32)) | (1 << (Splv1Parser.RENAME - 32)) | (1 << (Splv1Parser.REPLACE - 32)) | (1 << (Splv1Parser.REX - 32)) | (1 << (Splv1Parser.FIELD - 32)) | (1 << (Splv1Parser.BUCKET - 32)) | (1 << (Splv1Parser.SEARCH - 32)) | (1 << (Splv1Parser.JSONPATH - 32)) | (1 << (Splv1Parser.XMLPATH - 32)) | (1 << (Splv1Parser.INPUT - 32)) | (1 << (Splv1Parser.PATH - 32)) | (1 << (Splv1Parser.MVEXPAND - 32)) | (1 << (Splv1Parser.MVCOMBINE - 32)) | (1 << (Splv1Parser.IPLOCATION - 32)) | (1 << (Splv1Parser.PREFIX - 32)) | (1 << (Splv1Parser.ALLFIELDS - 32)) | (1 << (Splv1Parser.LANG - 32)) | (1 << (Splv1Parser.APPEND - 32)) | (1 << (Splv1Parser.APPEND_MAXTIME - 32)) | (1 << (Splv1Parser.APPEND_MAXOUT - 32)) | (1 << (Splv1Parser.APPEND_TIMEOUT - 32)) | (1 << (Splv1Parser.EXPORT - 32)) | (1 << (Splv1Parser.EXPORT_SINKTYPE - 32)) | (1 << (Splv1Parser.EXPORT_BATCH_SIZE - 32)) | (1 << (Splv1Parser.CONVERT - 32)) | (1 << (Splv1Parser.TIMEFORMAT - 32)) | (1 << (Splv1Parser.TRANSACTION - 32)) | (1 << (Splv1Parser.TRANSACTION_STARTSWITH - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Splv1Parser.TRANSACTION_ENDSWITH - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXSPAN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXPAUSE - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_DELIM - 64)) | (1 << (Splv1Parser.TRANSACTION_MVLIST - 64)) | (1 << (Splv1Parser.TRANSACTION_NULLSTR - 64)) | (1 << (Splv1Parser.TRANSACTION_MVRAW - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENTXN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_KEEPEVICTED - 64)) | (1 << (Splv1Parser.TIMELINE_INTERVAL - 64)) | (1 << (Splv1Parser.TIMELINE_MIN_BOUND - 64)) | (1 << (Splv1Parser.TIMELINE_MAX_BOUND - 64)) | (1 << (Splv1Parser.COMPOSE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_FAST - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_SMART - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_DETAILED - 64)) | (1 << (Splv1Parser.COMPOSE_ACTIONS - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_LIMIT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_HISTOGRAM - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_RESULT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY - 64)) | (1 << (Splv1Parser.ASYNC - 64)) | (1 << (Splv1Parser.PARALLEL - 64)) | (1 << (Splv1Parser.CHART - 64)) | (1 << (Splv1Parser.OVER - 64)) | (1 << (Splv1Parser.ADDTOTALS - 64)) | (1 << (Splv1Parser.FIELDNAME - 64)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (Splv1Parser.DESC - 116)) | (1 << (Splv1Parser.ASC - 116)) | (1 << (Splv1Parser.TYPE - 116)) | (1 << (Splv1Parser.MAX - 116)) | (1 << (Splv1Parser.BOOL - 116)) | (1 << (Splv1Parser.INT - 116)) | (1 << (Splv1Parser.IDENTIFIER - 116)) | (1 << (Splv1Parser.IDENTIFIER_WITH_STAR - 116)))) !== 0)) {
            	    this.state = 432;
            	    this.column_split();
            	}

            	break;
            case Splv1Parser.EOF:
            case Splv1Parser.RBRACK:
            case Splv1Parser.VBAR:
            	break;
            default:
            	break;
            }
            break;
        case Splv1Parser.ADDTOTALS:
            localctx = new AddtotalsContext(this, localctx);
            this.enterOuterAlt(localctx, 31);
            this.state = 437;
            this.match(Splv1Parser.ADDTOTALS);
            this.state = 441;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 438;
                    this.addtotals_option(); 
                }
                this.state = 443;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
            }

            this.state = 445;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME) | (1 << Splv1Parser.EVAL) | (1 << Splv1Parser.WHERE) | (1 << Splv1Parser.LIKE) | (1 << Splv1Parser.JOIN) | (1 << Splv1Parser.LOOKUP) | (1 << Splv1Parser.OUTPUT) | (1 << Splv1Parser.FROM) | (1 << Splv1Parser.STATS) | (1 << Splv1Parser.TIMECHART) | (1 << Splv1Parser.MOVINGAVG) | (1 << Splv1Parser.WINDOW) | (1 << Splv1Parser.MODEL) | (1 << Splv1Parser.EVENTSTATS) | (1 << Splv1Parser.TOP) | (1 << Splv1Parser.RARE) | (1 << Splv1Parser.SORT) | (1 << Splv1Parser.BY) | (1 << Splv1Parser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Splv1Parser.WITH - 32)) | (1 << (Splv1Parser.AS - 32)) | (1 << (Splv1Parser.LIMIT - 32)) | (1 << (Splv1Parser.FIELDS - 32)) | (1 << (Splv1Parser.DEDUP - 32)) | (1 << (Splv1Parser.RENAME - 32)) | (1 << (Splv1Parser.REPLACE - 32)) | (1 << (Splv1Parser.REX - 32)) | (1 << (Splv1Parser.FIELD - 32)) | (1 << (Splv1Parser.BUCKET - 32)) | (1 << (Splv1Parser.SEARCH - 32)) | (1 << (Splv1Parser.JSONPATH - 32)) | (1 << (Splv1Parser.XMLPATH - 32)) | (1 << (Splv1Parser.INPUT - 32)) | (1 << (Splv1Parser.PATH - 32)) | (1 << (Splv1Parser.MVEXPAND - 32)) | (1 << (Splv1Parser.MVCOMBINE - 32)) | (1 << (Splv1Parser.IPLOCATION - 32)) | (1 << (Splv1Parser.PREFIX - 32)) | (1 << (Splv1Parser.ALLFIELDS - 32)) | (1 << (Splv1Parser.LANG - 32)) | (1 << (Splv1Parser.APPEND - 32)) | (1 << (Splv1Parser.APPEND_MAXTIME - 32)) | (1 << (Splv1Parser.APPEND_MAXOUT - 32)) | (1 << (Splv1Parser.APPEND_TIMEOUT - 32)) | (1 << (Splv1Parser.EXPORT - 32)) | (1 << (Splv1Parser.EXPORT_SINKTYPE - 32)) | (1 << (Splv1Parser.EXPORT_BATCH_SIZE - 32)) | (1 << (Splv1Parser.CONVERT - 32)) | (1 << (Splv1Parser.TIMEFORMAT - 32)) | (1 << (Splv1Parser.TRANSACTION - 32)) | (1 << (Splv1Parser.TRANSACTION_STARTSWITH - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Splv1Parser.TRANSACTION_ENDSWITH - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXSPAN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXPAUSE - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_DELIM - 64)) | (1 << (Splv1Parser.TRANSACTION_MVLIST - 64)) | (1 << (Splv1Parser.TRANSACTION_NULLSTR - 64)) | (1 << (Splv1Parser.TRANSACTION_MVRAW - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENTXN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_KEEPEVICTED - 64)) | (1 << (Splv1Parser.TIMELINE_INTERVAL - 64)) | (1 << (Splv1Parser.TIMELINE_MIN_BOUND - 64)) | (1 << (Splv1Parser.TIMELINE_MAX_BOUND - 64)) | (1 << (Splv1Parser.COMPOSE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_FAST - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_SMART - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_DETAILED - 64)) | (1 << (Splv1Parser.COMPOSE_ACTIONS - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_LIMIT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_HISTOGRAM - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_RESULT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY - 64)) | (1 << (Splv1Parser.ASYNC - 64)) | (1 << (Splv1Parser.PARALLEL - 64)) | (1 << (Splv1Parser.CHART - 64)) | (1 << (Splv1Parser.OVER - 64)) | (1 << (Splv1Parser.ADDTOTALS - 64)) | (1 << (Splv1Parser.FIELDNAME - 64)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (Splv1Parser.DESC - 116)) | (1 << (Splv1Parser.ASC - 116)) | (1 << (Splv1Parser.TYPE - 116)) | (1 << (Splv1Parser.MAX - 116)) | (1 << (Splv1Parser.BOOL - 116)) | (1 << (Splv1Parser.INT - 116)) | (1 << (Splv1Parser.IDENTIFIER - 116)) | (1 << (Splv1Parser.IDENTIFIER_WITH_STAR - 116)))) !== 0)) {
                this.state = 444;
                this.field_list();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function From_sourceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_from_source;
    this.data_source_type = null; // FieldContext
    this.data_source_name = null; // FieldContext
    return this;
}

From_sourceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
From_sourceContext.prototype.constructor = From_sourceContext;

From_sourceContext.prototype.COLON = function() {
    return this.getToken(Splv1Parser.COLON, 0);
};

From_sourceContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

From_sourceContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterFrom_source(this);
	}
};

From_sourceContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitFrom_source(this);
	}
};




Splv1Parser.From_sourceContext = From_sourceContext;

Splv1Parser.prototype.from_source = function() {

    var localctx = new From_sourceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, Splv1Parser.RULE_from_source);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 449;
        localctx.data_source_type = this.field();
        this.state = 450;
        this.match(Splv1Parser.COLON);
        this.state = 451;
        localctx.data_source_name = this.field();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArgsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_args;
    return this;
}

ArgsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgsContext.prototype.constructor = ArgsContext;

ArgsContext.prototype.args_name = function() {
    return this.getTypedRuleContext(Args_nameContext,0);
};

ArgsContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

ArgsContext.prototype.args_value = function() {
    return this.getTypedRuleContext(Args_valueContext,0);
};

ArgsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterArgs(this);
	}
};

ArgsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitArgs(this);
	}
};




Splv1Parser.ArgsContext = ArgsContext;

Splv1Parser.prototype.args = function() {

    var localctx = new ArgsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, Splv1Parser.RULE_args);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 453;
        this.args_name();
        this.state = 454;
        this.match(Splv1Parser.EQ);
        this.state = 455;
        this.args_value();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Args_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_args_value;
    return this;
}

Args_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Args_valueContext.prototype.constructor = Args_valueContext;

Args_valueContext.prototype.INT = function() {
    return this.getToken(Splv1Parser.INT, 0);
};

Args_valueContext.prototype.NUM = function() {
    return this.getToken(Splv1Parser.NUM, 0);
};

Args_valueContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

Args_valueContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

Args_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterArgs_value(this);
	}
};

Args_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitArgs_value(this);
	}
};




Splv1Parser.Args_valueContext = Args_valueContext;

Splv1Parser.prototype.args_value = function() {

    var localctx = new Args_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, Splv1Parser.RULE_args_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        _la = this._input.LA(1);
        if(!(((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (Splv1Parser.BOOL - 120)) | (1 << (Splv1Parser.INT - 120)) | (1 << (Splv1Parser.NUM - 120)) | (1 << (Splv1Parser.QUOTED_STRING - 120)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Args_nameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_args_name;
    return this;
}

Args_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Args_nameContext.prototype.constructor = Args_nameContext;

Args_nameContext.prototype.IDENTIFIER = function() {
    return this.getToken(Splv1Parser.IDENTIFIER, 0);
};

Args_nameContext.prototype.reserve_field = function() {
    return this.getTypedRuleContext(Reserve_fieldContext,0);
};

Args_nameContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterArgs_name(this);
	}
};

Args_nameContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitArgs_name(this);
	}
};




Splv1Parser.Args_nameContext = Args_nameContext;

Splv1Parser.prototype.args_name = function() {

    var localctx = new Args_nameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, Splv1Parser.RULE_args_name);
    try {
        this.state = 461;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 459;
            this.match(Splv1Parser.IDENTIFIER);
            break;
        case Splv1Parser.BINS:
        case Splv1Parser.SPAN:
        case Splv1Parser.START:
        case Splv1Parser.END:
        case Splv1Parser.ALIGN:
        case Splv1Parser.START_TIME:
        case Splv1Parser.END_TIME:
        case Splv1Parser.EVAL:
        case Splv1Parser.WHERE:
        case Splv1Parser.LIKE:
        case Splv1Parser.JOIN:
        case Splv1Parser.LOOKUP:
        case Splv1Parser.OUTPUT:
        case Splv1Parser.FROM:
        case Splv1Parser.STATS:
        case Splv1Parser.TIMECHART:
        case Splv1Parser.MOVINGAVG:
        case Splv1Parser.WINDOW:
        case Splv1Parser.MODEL:
        case Splv1Parser.EVENTSTATS:
        case Splv1Parser.TOP:
        case Splv1Parser.RARE:
        case Splv1Parser.SORT:
        case Splv1Parser.BY:
        case Splv1Parser.IN:
        case Splv1Parser.WITH:
        case Splv1Parser.AS:
        case Splv1Parser.LIMIT:
        case Splv1Parser.FIELDS:
        case Splv1Parser.DEDUP:
        case Splv1Parser.RENAME:
        case Splv1Parser.REPLACE:
        case Splv1Parser.REX:
        case Splv1Parser.FIELD:
        case Splv1Parser.BUCKET:
        case Splv1Parser.SEARCH:
        case Splv1Parser.JSONPATH:
        case Splv1Parser.XMLPATH:
        case Splv1Parser.INPUT:
        case Splv1Parser.PATH:
        case Splv1Parser.MVEXPAND:
        case Splv1Parser.MVCOMBINE:
        case Splv1Parser.IPLOCATION:
        case Splv1Parser.PREFIX:
        case Splv1Parser.ALLFIELDS:
        case Splv1Parser.LANG:
        case Splv1Parser.APPEND:
        case Splv1Parser.APPEND_MAXTIME:
        case Splv1Parser.APPEND_MAXOUT:
        case Splv1Parser.APPEND_TIMEOUT:
        case Splv1Parser.EXPORT:
        case Splv1Parser.EXPORT_SINKTYPE:
        case Splv1Parser.EXPORT_BATCH_SIZE:
        case Splv1Parser.CONVERT:
        case Splv1Parser.TIMEFORMAT:
        case Splv1Parser.TRANSACTION:
        case Splv1Parser.TRANSACTION_STARTSWITH:
        case Splv1Parser.TRANSACTION_ENDSWITH:
        case Splv1Parser.TRANSACTION_MAXSPAN:
        case Splv1Parser.TRANSACTION_MAXPAUSE:
        case Splv1Parser.TRANSACTION_MAXEVENTS:
        case Splv1Parser.TRANSACTION_DELIM:
        case Splv1Parser.TRANSACTION_MVLIST:
        case Splv1Parser.TRANSACTION_NULLSTR:
        case Splv1Parser.TRANSACTION_MVRAW:
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
        case Splv1Parser.TIMELINE_INTERVAL:
        case Splv1Parser.TIMELINE_MIN_BOUND:
        case Splv1Parser.TIMELINE_MAX_BOUND:
        case Splv1Parser.COMPOSE:
        case Splv1Parser.COMPOSE_MODE:
        case Splv1Parser.COMPOSE_MODE_FAST:
        case Splv1Parser.COMPOSE_MODE_SMART:
        case Splv1Parser.COMPOSE_MODE_DETAILED:
        case Splv1Parser.COMPOSE_ACTIONS:
        case Splv1Parser.COMPOSE_ACTION_LIMIT:
        case Splv1Parser.COMPOSE_ACTION_HISTOGRAM:
        case Splv1Parser.COMPOSE_ACTION_SUMMARY:
        case Splv1Parser.COMPOSE_ACTION_RESULT:
        case Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY:
        case Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY:
        case Splv1Parser.ASYNC:
        case Splv1Parser.PARALLEL:
        case Splv1Parser.CHART:
        case Splv1Parser.OVER:
        case Splv1Parser.ADDTOTALS:
        case Splv1Parser.FIELDNAME:
        case Splv1Parser.DESC:
        case Splv1Parser.ASC:
        case Splv1Parser.TYPE:
        case Splv1Parser.MAX:
            this.enterOuterAlt(localctx, 2);
            this.state = 460;
            this.reserve_field();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Export_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_export_field;
    this.type = null; // Token
    return this;
}

Export_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Export_fieldContext.prototype.constructor = Export_fieldContext;

Export_fieldContext.prototype.TYPE = function() {
    return this.getToken(Splv1Parser.TYPE, 0);
};

Export_fieldContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Export_fieldContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

Export_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterExport_field(this);
	}
};

Export_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitExport_field(this);
	}
};




Splv1Parser.Export_fieldContext = Export_fieldContext;

Splv1Parser.prototype.export_field = function() {

    var localctx = new Export_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, Splv1Parser.RULE_export_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 463;
        this.match(Splv1Parser.TYPE);
        this.state = 464;
        this.match(Splv1Parser.EQ);
        this.state = 465;
        localctx.type = this.match(Splv1Parser.QUOTED_STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sink_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_sink_field;
    this.sink = null; // Token
    return this;
}

Sink_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sink_fieldContext.prototype.constructor = Sink_fieldContext;

Sink_fieldContext.prototype.EXPORT_SINKTYPE = function() {
    return this.getToken(Splv1Parser.EXPORT_SINKTYPE, 0);
};

Sink_fieldContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Sink_fieldContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

Sink_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSink_field(this);
	}
};

Sink_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSink_field(this);
	}
};




Splv1Parser.Sink_fieldContext = Sink_fieldContext;

Splv1Parser.prototype.sink_field = function() {

    var localctx = new Sink_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, Splv1Parser.RULE_sink_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 467;
        this.match(Splv1Parser.EXPORT_SINKTYPE);
        this.state = 468;
        this.match(Splv1Parser.EQ);
        this.state = 469;
        localctx.sink = this.match(Splv1Parser.QUOTED_STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Batch_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_batch_field;
    this.max = null; // Signed_intContext
    return this;
}

Batch_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Batch_fieldContext.prototype.constructor = Batch_fieldContext;

Batch_fieldContext.prototype.EXPORT_BATCH_SIZE = function() {
    return this.getToken(Splv1Parser.EXPORT_BATCH_SIZE, 0);
};

Batch_fieldContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Batch_fieldContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

Batch_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterBatch_field(this);
	}
};

Batch_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitBatch_field(this);
	}
};




Splv1Parser.Batch_fieldContext = Batch_fieldContext;

Splv1Parser.prototype.batch_field = function() {

    var localctx = new Batch_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, Splv1Parser.RULE_batch_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 471;
        this.match(Splv1Parser.EXPORT_BATCH_SIZE);
        this.state = 472;
        this.match(Splv1Parser.EQ);
        this.state = 473;
        localctx.max = this.signed_int();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Timeformat_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_timeformat_field;
    this.timeformat = null; // Token
    return this;
}

Timeformat_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timeformat_fieldContext.prototype.constructor = Timeformat_fieldContext;

Timeformat_fieldContext.prototype.TIMEFORMAT = function() {
    return this.getToken(Splv1Parser.TIMEFORMAT, 0);
};

Timeformat_fieldContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Timeformat_fieldContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

Timeformat_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterTimeformat_field(this);
	}
};

Timeformat_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitTimeformat_field(this);
	}
};




Splv1Parser.Timeformat_fieldContext = Timeformat_fieldContext;

Splv1Parser.prototype.timeformat_field = function() {

    var localctx = new Timeformat_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, Splv1Parser.RULE_timeformat_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 475;
        this.match(Splv1Parser.TIMEFORMAT);
        this.state = 476;
        this.match(Splv1Parser.EQ);
        this.state = 477;
        localctx.timeformat = this.match(Splv1Parser.QUOTED_STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Convert_funcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_convert_func;
    this.aggField = null; // Convert_fieldContext
    this.alias = null; // FieldContext
    return this;
}

Convert_funcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Convert_funcContext.prototype.constructor = Convert_funcContext;

Convert_funcContext.prototype.funcName = function() {
    return this.getTypedRuleContext(FuncNameContext,0);
};

Convert_funcContext.prototype.LPAREN = function() {
    return this.getToken(Splv1Parser.LPAREN, 0);
};

Convert_funcContext.prototype.RPAREN = function() {
    return this.getToken(Splv1Parser.RPAREN, 0);
};

Convert_funcContext.prototype.convert_field = function() {
    return this.getTypedRuleContext(Convert_fieldContext,0);
};

Convert_funcContext.prototype.AS = function() {
    return this.getToken(Splv1Parser.AS, 0);
};

Convert_funcContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Convert_funcContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterConvert_func(this);
	}
};

Convert_funcContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitConvert_func(this);
	}
};




Splv1Parser.Convert_funcContext = Convert_funcContext;

Splv1Parser.prototype.convert_func = function() {

    var localctx = new Convert_funcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, Splv1Parser.RULE_convert_func);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 479;
        this.funcName();
        this.state = 480;
        this.match(Splv1Parser.LPAREN);
        this.state = 481;
        localctx.aggField = this.convert_field();
        this.state = 482;
        this.match(Splv1Parser.RPAREN);
        this.state = 485;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
        if(la_===1) {
            this.state = 483;
            this.match(Splv1Parser.AS);
            this.state = 484;
            localctx.alias = this.field();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Convert_func_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_convert_func_field;
    return this;
}

Convert_func_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Convert_func_fieldContext.prototype.constructor = Convert_func_fieldContext;

Convert_func_fieldContext.prototype.convert_func = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Convert_funcContext);
    } else {
        return this.getTypedRuleContext(Convert_funcContext,i);
    }
};

Convert_func_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterConvert_func_field(this);
	}
};

Convert_func_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitConvert_func_field(this);
	}
};




Splv1Parser.Convert_func_fieldContext = Convert_func_fieldContext;

Splv1Parser.prototype.convert_func_field = function() {

    var localctx = new Convert_func_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, Splv1Parser.RULE_convert_func_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME) | (1 << Splv1Parser.EVAL) | (1 << Splv1Parser.WHERE) | (1 << Splv1Parser.LIKE) | (1 << Splv1Parser.JOIN) | (1 << Splv1Parser.LOOKUP) | (1 << Splv1Parser.OUTPUT) | (1 << Splv1Parser.FROM) | (1 << Splv1Parser.STATS) | (1 << Splv1Parser.TIMECHART) | (1 << Splv1Parser.MOVINGAVG) | (1 << Splv1Parser.WINDOW) | (1 << Splv1Parser.MODEL) | (1 << Splv1Parser.EVENTSTATS) | (1 << Splv1Parser.TOP) | (1 << Splv1Parser.RARE) | (1 << Splv1Parser.SORT) | (1 << Splv1Parser.BY) | (1 << Splv1Parser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Splv1Parser.WITH - 32)) | (1 << (Splv1Parser.AS - 32)) | (1 << (Splv1Parser.LIMIT - 32)) | (1 << (Splv1Parser.FIELDS - 32)) | (1 << (Splv1Parser.DEDUP - 32)) | (1 << (Splv1Parser.RENAME - 32)) | (1 << (Splv1Parser.REPLACE - 32)) | (1 << (Splv1Parser.REX - 32)) | (1 << (Splv1Parser.FIELD - 32)) | (1 << (Splv1Parser.BUCKET - 32)) | (1 << (Splv1Parser.SEARCH - 32)) | (1 << (Splv1Parser.JSONPATH - 32)) | (1 << (Splv1Parser.XMLPATH - 32)) | (1 << (Splv1Parser.INPUT - 32)) | (1 << (Splv1Parser.PATH - 32)) | (1 << (Splv1Parser.MVEXPAND - 32)) | (1 << (Splv1Parser.MVCOMBINE - 32)) | (1 << (Splv1Parser.IPLOCATION - 32)) | (1 << (Splv1Parser.PREFIX - 32)) | (1 << (Splv1Parser.ALLFIELDS - 32)) | (1 << (Splv1Parser.LANG - 32)) | (1 << (Splv1Parser.APPEND - 32)) | (1 << (Splv1Parser.APPEND_MAXTIME - 32)) | (1 << (Splv1Parser.APPEND_MAXOUT - 32)) | (1 << (Splv1Parser.APPEND_TIMEOUT - 32)) | (1 << (Splv1Parser.EXPORT - 32)) | (1 << (Splv1Parser.EXPORT_SINKTYPE - 32)) | (1 << (Splv1Parser.EXPORT_BATCH_SIZE - 32)) | (1 << (Splv1Parser.CONVERT - 32)) | (1 << (Splv1Parser.TIMEFORMAT - 32)) | (1 << (Splv1Parser.TRANSACTION - 32)) | (1 << (Splv1Parser.TRANSACTION_STARTSWITH - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Splv1Parser.TRANSACTION_ENDSWITH - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXSPAN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXPAUSE - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_DELIM - 64)) | (1 << (Splv1Parser.TRANSACTION_MVLIST - 64)) | (1 << (Splv1Parser.TRANSACTION_NULLSTR - 64)) | (1 << (Splv1Parser.TRANSACTION_MVRAW - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENTXN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_KEEPEVICTED - 64)) | (1 << (Splv1Parser.TIMELINE_INTERVAL - 64)) | (1 << (Splv1Parser.TIMELINE_MIN_BOUND - 64)) | (1 << (Splv1Parser.TIMELINE_MAX_BOUND - 64)) | (1 << (Splv1Parser.COMPOSE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_FAST - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_SMART - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_DETAILED - 64)) | (1 << (Splv1Parser.COMPOSE_ACTIONS - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_LIMIT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_HISTOGRAM - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_RESULT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY - 64)) | (1 << (Splv1Parser.ASYNC - 64)) | (1 << (Splv1Parser.PARALLEL - 64)) | (1 << (Splv1Parser.CHART - 64)) | (1 << (Splv1Parser.OVER - 64)) | (1 << (Splv1Parser.ADDTOTALS - 64)) | (1 << (Splv1Parser.FIELDNAME - 64)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (Splv1Parser.DESC - 116)) | (1 << (Splv1Parser.ASC - 116)) | (1 << (Splv1Parser.TYPE - 116)) | (1 << (Splv1Parser.MAX - 116)) | (1 << (Splv1Parser.BOOL - 116)) | (1 << (Splv1Parser.IDENTIFIER - 116)))) !== 0)) {
            this.state = 487;
            this.convert_func();
            this.state = 492;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Lookup_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_lookup_field;
    this.oldField = null; // FieldContext
    this.newField = null; // FieldContext
    return this;
}

Lookup_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lookup_fieldContext.prototype.constructor = Lookup_fieldContext;

Lookup_fieldContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

Lookup_fieldContext.prototype.AS = function() {
    return this.getToken(Splv1Parser.AS, 0);
};

Lookup_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterLookup_field(this);
	}
};

Lookup_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitLookup_field(this);
	}
};




Splv1Parser.Lookup_fieldContext = Lookup_fieldContext;

Splv1Parser.prototype.lookup_field = function() {

    var localctx = new Lookup_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, Splv1Parser.RULE_lookup_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 493;
        localctx.oldField = this.field();
        this.state = 496;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Splv1Parser.AS) {
            this.state = 494;
            this.match(Splv1Parser.AS);
            this.state = 495;
            localctx.newField = this.field();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Lookup_fieldsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_lookup_fields;
    return this;
}

Lookup_fieldsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lookup_fieldsContext.prototype.constructor = Lookup_fieldsContext;

Lookup_fieldsContext.prototype.lookup_field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Lookup_fieldContext);
    } else {
        return this.getTypedRuleContext(Lookup_fieldContext,i);
    }
};

Lookup_fieldsContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};


Lookup_fieldsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterLookup_fields(this);
	}
};

Lookup_fieldsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitLookup_fields(this);
	}
};




Splv1Parser.Lookup_fieldsContext = Lookup_fieldsContext;

Splv1Parser.prototype.lookup_fields = function() {

    var localctx = new Lookup_fieldsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, Splv1Parser.RULE_lookup_fields);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        this.lookup_field();
        this.state = 503;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Splv1Parser.COMMA) {
            this.state = 499;
            this.match(Splv1Parser.COMMA);
            this.state = 500;
            this.lookup_field();
            this.state = 505;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Movingavg_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_movingavg_option;
    this.window = null; // Signed_intContext
    this.model = null; // Unqoted_string_valueContext
    return this;
}

Movingavg_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Movingavg_optionContext.prototype.constructor = Movingavg_optionContext;

Movingavg_optionContext.prototype.WINDOW = function() {
    return this.getToken(Splv1Parser.WINDOW, 0);
};

Movingavg_optionContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Movingavg_optionContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

Movingavg_optionContext.prototype.MODEL = function() {
    return this.getToken(Splv1Parser.MODEL, 0);
};

Movingavg_optionContext.prototype.unqoted_string_value = function() {
    return this.getTypedRuleContext(Unqoted_string_valueContext,0);
};

Movingavg_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterMovingavg_option(this);
	}
};

Movingavg_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitMovingavg_option(this);
	}
};




Splv1Parser.Movingavg_optionContext = Movingavg_optionContext;

Splv1Parser.prototype.movingavg_option = function() {

    var localctx = new Movingavg_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, Splv1Parser.RULE_movingavg_option);
    try {
        this.state = 512;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.WINDOW:
            this.enterOuterAlt(localctx, 1);
            this.state = 506;
            this.match(Splv1Parser.WINDOW);
            this.state = 507;
            this.match(Splv1Parser.EQ);
            this.state = 508;
            localctx.window = this.signed_int();
            break;
        case Splv1Parser.MODEL:
            this.enterOuterAlt(localctx, 2);
            this.state = 509;
            this.match(Splv1Parser.MODEL);
            this.state = 510;
            this.match(Splv1Parser.EQ);
            this.state = 511;
            localctx.model = this.unqoted_string_value();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Iplocation_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_iplocation_option;
    this.prefix = null; // Token
    this.allfileds = null; // Token
    this.lang = null; // Token
    return this;
}

Iplocation_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Iplocation_optionContext.prototype.constructor = Iplocation_optionContext;

Iplocation_optionContext.prototype.PREFIX = function() {
    return this.getToken(Splv1Parser.PREFIX, 0);
};

Iplocation_optionContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.EQ);
    } else {
        return this.getToken(Splv1Parser.EQ, i);
    }
};


Iplocation_optionContext.prototype.ALLFIELDS = function() {
    return this.getToken(Splv1Parser.ALLFIELDS, 0);
};

Iplocation_optionContext.prototype.LANG = function() {
    return this.getToken(Splv1Parser.LANG, 0);
};

Iplocation_optionContext.prototype.QUOTED_STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.QUOTED_STRING);
    } else {
        return this.getToken(Splv1Parser.QUOTED_STRING, i);
    }
};


Iplocation_optionContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

Iplocation_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterIplocation_option(this);
	}
};

Iplocation_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitIplocation_option(this);
	}
};




Splv1Parser.Iplocation_optionContext = Iplocation_optionContext;

Splv1Parser.prototype.iplocation_option = function() {

    var localctx = new Iplocation_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, Splv1Parser.RULE_iplocation_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 517;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 514;
            this.match(Splv1Parser.PREFIX);
            this.state = 515;
            this.match(Splv1Parser.EQ);
            this.state = 516;
            localctx.prefix = this.match(Splv1Parser.QUOTED_STRING);

        }
        this.state = 522;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        if(la_===1) {
            this.state = 519;
            this.match(Splv1Parser.ALLFIELDS);
            this.state = 520;
            this.match(Splv1Parser.EQ);
            this.state = 521;
            localctx.allfileds = this.match(Splv1Parser.BOOL);

        }
        this.state = 527;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        if(la_===1) {
            this.state = 524;
            this.match(Splv1Parser.LANG);
            this.state = 525;
            this.match(Splv1Parser.EQ);
            this.state = 526;
            localctx.lang = this.match(Splv1Parser.QUOTED_STRING);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Append_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_append_option;
    this.maxTime = null; // Token
    this.maxOut = null; // Token
    this.timeOut = null; // Token
    return this;
}

Append_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Append_optionContext.prototype.constructor = Append_optionContext;

Append_optionContext.prototype.APPEND_MAXTIME = function() {
    return this.getToken(Splv1Parser.APPEND_MAXTIME, 0);
};

Append_optionContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Append_optionContext.prototype.INT = function() {
    return this.getToken(Splv1Parser.INT, 0);
};

Append_optionContext.prototype.APPEND_MAXOUT = function() {
    return this.getToken(Splv1Parser.APPEND_MAXOUT, 0);
};

Append_optionContext.prototype.APPEND_TIMEOUT = function() {
    return this.getToken(Splv1Parser.APPEND_TIMEOUT, 0);
};

Append_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterAppend_option(this);
	}
};

Append_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitAppend_option(this);
	}
};




Splv1Parser.Append_optionContext = Append_optionContext;

Splv1Parser.prototype.append_option = function() {

    var localctx = new Append_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, Splv1Parser.RULE_append_option);
    try {
        this.state = 538;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.APPEND_MAXTIME:
            this.enterOuterAlt(localctx, 1);
            this.state = 529;
            this.match(Splv1Parser.APPEND_MAXTIME);
            this.state = 530;
            this.match(Splv1Parser.EQ);
            this.state = 531;
            localctx.maxTime = this.match(Splv1Parser.INT);
            break;
        case Splv1Parser.APPEND_MAXOUT:
            this.enterOuterAlt(localctx, 2);
            this.state = 532;
            this.match(Splv1Parser.APPEND_MAXOUT);
            this.state = 533;
            this.match(Splv1Parser.EQ);
            this.state = 534;
            localctx.maxOut = this.match(Splv1Parser.INT);
            break;
        case Splv1Parser.APPEND_TIMEOUT:
            this.enterOuterAlt(localctx, 3);
            this.state = 535;
            this.match(Splv1Parser.APPEND_TIMEOUT);
            this.state = 536;
            this.match(Splv1Parser.EQ);
            this.state = 537;
            localctx.timeOut = this.match(Splv1Parser.INT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Bucket_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_bucket_option;
    this.bins = null; // Signed_intContext
    this.span = null; // SpanValueContext
    this.start = null; // Signed_intContext
    this.end = null; // Signed_intContext
    this.startTime = null; // Signed_intContext
    this.endTime = null; // Signed_intContext
    this.align = null; // Token
    return this;
}

Bucket_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Bucket_optionContext.prototype.constructor = Bucket_optionContext;

Bucket_optionContext.prototype.BINS = function() {
    return this.getToken(Splv1Parser.BINS, 0);
};

Bucket_optionContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Bucket_optionContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

Bucket_optionContext.prototype.SPAN = function() {
    return this.getToken(Splv1Parser.SPAN, 0);
};

Bucket_optionContext.prototype.spanValue = function() {
    return this.getTypedRuleContext(SpanValueContext,0);
};

Bucket_optionContext.prototype.START = function() {
    return this.getToken(Splv1Parser.START, 0);
};

Bucket_optionContext.prototype.END = function() {
    return this.getToken(Splv1Parser.END, 0);
};

Bucket_optionContext.prototype.START_TIME = function() {
    return this.getToken(Splv1Parser.START_TIME, 0);
};

Bucket_optionContext.prototype.END_TIME = function() {
    return this.getToken(Splv1Parser.END_TIME, 0);
};

Bucket_optionContext.prototype.ALIGN = function() {
    return this.getToken(Splv1Parser.ALIGN, 0);
};

Bucket_optionContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

Bucket_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterBucket_option(this);
	}
};

Bucket_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitBucket_option(this);
	}
};




Splv1Parser.Bucket_optionContext = Bucket_optionContext;

Splv1Parser.prototype.bucket_option = function() {

    var localctx = new Bucket_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, Splv1Parser.RULE_bucket_option);
    try {
        this.state = 561;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.BINS:
            this.enterOuterAlt(localctx, 1);
            this.state = 540;
            this.match(Splv1Parser.BINS);
            this.state = 541;
            this.match(Splv1Parser.EQ);
            this.state = 542;
            localctx.bins = this.signed_int();
            break;
        case Splv1Parser.SPAN:
            this.enterOuterAlt(localctx, 2);
            this.state = 543;
            this.match(Splv1Parser.SPAN);
            this.state = 544;
            this.match(Splv1Parser.EQ);
            this.state = 545;
            localctx.span = this.spanValue();
            break;
        case Splv1Parser.START:
            this.enterOuterAlt(localctx, 3);
            this.state = 546;
            this.match(Splv1Parser.START);
            this.state = 547;
            this.match(Splv1Parser.EQ);
            this.state = 548;
            localctx.start = this.signed_int();
            break;
        case Splv1Parser.END:
            this.enterOuterAlt(localctx, 4);
            this.state = 549;
            this.match(Splv1Parser.END);
            this.state = 550;
            this.match(Splv1Parser.EQ);
            this.state = 551;
            localctx.end = this.signed_int();
            break;
        case Splv1Parser.START_TIME:
            this.enterOuterAlt(localctx, 5);
            this.state = 552;
            this.match(Splv1Parser.START_TIME);
            this.state = 553;
            this.match(Splv1Parser.EQ);
            this.state = 554;
            localctx.startTime = this.signed_int();
            break;
        case Splv1Parser.END_TIME:
            this.enterOuterAlt(localctx, 6);
            this.state = 555;
            this.match(Splv1Parser.END_TIME);
            this.state = 556;
            this.match(Splv1Parser.EQ);
            this.state = 557;
            localctx.endTime = this.signed_int();
            break;
        case Splv1Parser.ALIGN:
            this.enterOuterAlt(localctx, 7);
            this.state = 558;
            this.match(Splv1Parser.ALIGN);
            this.state = 559;
            this.match(Splv1Parser.EQ);
            this.state = 560;
            localctx.align = this.match(Splv1Parser.BOOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Transaction_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_transaction_options;
    return this;
}

Transaction_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_optionsContext.prototype.constructor = Transaction_optionsContext;

Transaction_optionsContext.prototype.transaction_define_option = function() {
    return this.getTypedRuleContext(Transaction_define_optionContext,0);
};

Transaction_optionsContext.prototype.transaction_rendering_option = function() {
    return this.getTypedRuleContext(Transaction_rendering_optionContext,0);
};

Transaction_optionsContext.prototype.transaction_memcontrol_option = function() {
    return this.getTypedRuleContext(Transaction_memcontrol_optionContext,0);
};

Transaction_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterTransaction_options(this);
	}
};

Transaction_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitTransaction_options(this);
	}
};




Splv1Parser.Transaction_optionsContext = Transaction_optionsContext;

Splv1Parser.prototype.transaction_options = function() {

    var localctx = new Transaction_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, Splv1Parser.RULE_transaction_options);
    try {
        this.state = 566;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.TRANSACTION_STARTSWITH:
        case Splv1Parser.TRANSACTION_ENDSWITH:
        case Splv1Parser.TRANSACTION_MAXSPAN:
        case Splv1Parser.TRANSACTION_MAXPAUSE:
        case Splv1Parser.TRANSACTION_MAXEVENTS:
            this.enterOuterAlt(localctx, 1);
            this.state = 563;
            this.transaction_define_option();
            break;
        case Splv1Parser.TRANSACTION_DELIM:
        case Splv1Parser.TRANSACTION_MVLIST:
        case Splv1Parser.TRANSACTION_NULLSTR:
        case Splv1Parser.TRANSACTION_MVRAW:
            this.enterOuterAlt(localctx, 2);
            this.state = 564;
            this.transaction_rendering_option();
            break;
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
            this.enterOuterAlt(localctx, 3);
            this.state = 565;
            this.transaction_memcontrol_option();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Transaction_define_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_transaction_define_option;
    this.maxspan = null; // Token
    this.maxpause = null; // Token
    this.maxevent = null; // Token
    return this;
}

Transaction_define_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_define_optionContext.prototype.constructor = Transaction_define_optionContext;

Transaction_define_optionContext.prototype.TRANSACTION_MAXSPAN = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXSPAN, 0);
};

Transaction_define_optionContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Transaction_define_optionContext.prototype.UNQOTED_STRING = function() {
    return this.getToken(Splv1Parser.UNQOTED_STRING, 0);
};

Transaction_define_optionContext.prototype.TRANSACTION_MAXPAUSE = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXPAUSE, 0);
};

Transaction_define_optionContext.prototype.TRANSACTION_MAXEVENTS = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXEVENTS, 0);
};

Transaction_define_optionContext.prototype.INT = function() {
    return this.getToken(Splv1Parser.INT, 0);
};

Transaction_define_optionContext.prototype.TRANSACTION_STARTSWITH = function() {
    return this.getToken(Splv1Parser.TRANSACTION_STARTSWITH, 0);
};

Transaction_define_optionContext.prototype.transaction_filter = function() {
    return this.getTypedRuleContext(Transaction_filterContext,0);
};

Transaction_define_optionContext.prototype.TRANSACTION_ENDSWITH = function() {
    return this.getToken(Splv1Parser.TRANSACTION_ENDSWITH, 0);
};

Transaction_define_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterTransaction_define_option(this);
	}
};

Transaction_define_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitTransaction_define_option(this);
	}
};




Splv1Parser.Transaction_define_optionContext = Transaction_define_optionContext;

Splv1Parser.prototype.transaction_define_option = function() {

    var localctx = new Transaction_define_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, Splv1Parser.RULE_transaction_define_option);
    try {
        this.state = 583;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.TRANSACTION_MAXSPAN:
            this.enterOuterAlt(localctx, 1);
            this.state = 568;
            this.match(Splv1Parser.TRANSACTION_MAXSPAN);
            this.state = 569;
            this.match(Splv1Parser.EQ);
            this.state = 570;
            localctx.maxspan = this.match(Splv1Parser.UNQOTED_STRING);
            break;
        case Splv1Parser.TRANSACTION_MAXPAUSE:
            this.enterOuterAlt(localctx, 2);
            this.state = 571;
            this.match(Splv1Parser.TRANSACTION_MAXPAUSE);
            this.state = 572;
            this.match(Splv1Parser.EQ);
            this.state = 573;
            localctx.maxpause = this.match(Splv1Parser.UNQOTED_STRING);
            break;
        case Splv1Parser.TRANSACTION_MAXEVENTS:
            this.enterOuterAlt(localctx, 3);
            this.state = 574;
            this.match(Splv1Parser.TRANSACTION_MAXEVENTS);
            this.state = 575;
            this.match(Splv1Parser.EQ);
            this.state = 576;
            localctx.maxevent = this.match(Splv1Parser.INT);
            break;
        case Splv1Parser.TRANSACTION_STARTSWITH:
            this.enterOuterAlt(localctx, 4);
            this.state = 577;
            this.match(Splv1Parser.TRANSACTION_STARTSWITH);
            this.state = 578;
            this.match(Splv1Parser.EQ);
            this.state = 579;
            this.transaction_filter();
            break;
        case Splv1Parser.TRANSACTION_ENDSWITH:
            this.enterOuterAlt(localctx, 5);
            this.state = 580;
            this.match(Splv1Parser.TRANSACTION_ENDSWITH);
            this.state = 581;
            this.match(Splv1Parser.EQ);
            this.state = 582;
            this.transaction_filter();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Transaction_rendering_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_transaction_rendering_option;
    this.delim = null; // Token
    this.nullstr = null; // Token
    this.mvraw = null; // Token
    return this;
}

Transaction_rendering_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_rendering_optionContext.prototype.constructor = Transaction_rendering_optionContext;

Transaction_rendering_optionContext.prototype.TRANSACTION_DELIM = function() {
    return this.getToken(Splv1Parser.TRANSACTION_DELIM, 0);
};

Transaction_rendering_optionContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Transaction_rendering_optionContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

Transaction_rendering_optionContext.prototype.TRANSACTION_MVLIST = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MVLIST, 0);
};

Transaction_rendering_optionContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

Transaction_rendering_optionContext.prototype.field_list = function() {
    return this.getTypedRuleContext(Field_listContext,0);
};

Transaction_rendering_optionContext.prototype.TRANSACTION_NULLSTR = function() {
    return this.getToken(Splv1Parser.TRANSACTION_NULLSTR, 0);
};

Transaction_rendering_optionContext.prototype.TRANSACTION_MVRAW = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MVRAW, 0);
};

Transaction_rendering_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterTransaction_rendering_option(this);
	}
};

Transaction_rendering_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitTransaction_rendering_option(this);
	}
};




Splv1Parser.Transaction_rendering_optionContext = Transaction_rendering_optionContext;

Splv1Parser.prototype.transaction_rendering_option = function() {

    var localctx = new Transaction_rendering_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, Splv1Parser.RULE_transaction_rendering_option);
    try {
        this.state = 600;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.TRANSACTION_DELIM:
            this.enterOuterAlt(localctx, 1);
            this.state = 585;
            this.match(Splv1Parser.TRANSACTION_DELIM);
            this.state = 586;
            this.match(Splv1Parser.EQ);
            this.state = 587;
            localctx.delim = this.match(Splv1Parser.QUOTED_STRING);
            break;
        case Splv1Parser.TRANSACTION_MVLIST:
            this.enterOuterAlt(localctx, 2);
            this.state = 588;
            this.match(Splv1Parser.TRANSACTION_MVLIST);
            this.state = 589;
            this.match(Splv1Parser.EQ);
            this.state = 592;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
            switch(la_) {
            case 1:
                this.state = 590;
                this.match(Splv1Parser.BOOL);
                break;

            case 2:
                this.state = 591;
                this.field_list();
                break;

            }
            break;
        case Splv1Parser.TRANSACTION_NULLSTR:
            this.enterOuterAlt(localctx, 3);
            this.state = 594;
            this.match(Splv1Parser.TRANSACTION_NULLSTR);
            this.state = 595;
            this.match(Splv1Parser.EQ);
            this.state = 596;
            localctx.nullstr = this.match(Splv1Parser.QUOTED_STRING);
            break;
        case Splv1Parser.TRANSACTION_MVRAW:
            this.enterOuterAlt(localctx, 4);
            this.state = 597;
            this.match(Splv1Parser.TRANSACTION_MVRAW);
            this.state = 598;
            this.match(Splv1Parser.EQ);
            this.state = 599;
            localctx.mvraw = this.match(Splv1Parser.BOOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Transaction_memcontrol_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_transaction_memcontrol_option;
    this.maxopentxn = null; // Token
    this.maxopenevents = null; // Token
    this.keepevicted = null; // Token
    return this;
}

Transaction_memcontrol_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_memcontrol_optionContext.prototype.constructor = Transaction_memcontrol_optionContext;

Transaction_memcontrol_optionContext.prototype.TRANSACTION_MAXOPENTXN = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXOPENTXN, 0);
};

Transaction_memcontrol_optionContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Transaction_memcontrol_optionContext.prototype.INT = function() {
    return this.getToken(Splv1Parser.INT, 0);
};

Transaction_memcontrol_optionContext.prototype.TRANSACTION_MAXOPENEVENTS = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXOPENEVENTS, 0);
};

Transaction_memcontrol_optionContext.prototype.TRANSACTION_KEEPEVICTED = function() {
    return this.getToken(Splv1Parser.TRANSACTION_KEEPEVICTED, 0);
};

Transaction_memcontrol_optionContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

Transaction_memcontrol_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterTransaction_memcontrol_option(this);
	}
};

Transaction_memcontrol_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitTransaction_memcontrol_option(this);
	}
};




Splv1Parser.Transaction_memcontrol_optionContext = Transaction_memcontrol_optionContext;

Splv1Parser.prototype.transaction_memcontrol_option = function() {

    var localctx = new Transaction_memcontrol_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, Splv1Parser.RULE_transaction_memcontrol_option);
    try {
        this.state = 611;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
            this.enterOuterAlt(localctx, 1);
            this.state = 602;
            this.match(Splv1Parser.TRANSACTION_MAXOPENTXN);
            this.state = 603;
            this.match(Splv1Parser.EQ);
            this.state = 604;
            localctx.maxopentxn = this.match(Splv1Parser.INT);
            break;
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 605;
            this.match(Splv1Parser.TRANSACTION_MAXOPENEVENTS);
            this.state = 606;
            this.match(Splv1Parser.EQ);
            this.state = 607;
            localctx.maxopenevents = this.match(Splv1Parser.INT);
            break;
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
            this.enterOuterAlt(localctx, 3);
            this.state = 608;
            this.match(Splv1Parser.TRANSACTION_KEEPEVICTED);
            this.state = 609;
            this.match(Splv1Parser.EQ);
            this.state = 610;
            localctx.keepevicted = this.match(Splv1Parser.BOOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Transaction_filterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_transaction_filter;
    return this;
}

Transaction_filterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Transaction_filterContext.prototype.constructor = Transaction_filterContext;


 
Transaction_filterContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ConstantFilterContext(parser, ctx) {
	Transaction_filterContext.call(this, parser);
    Transaction_filterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConstantFilterContext.prototype = Object.create(Transaction_filterContext.prototype);
ConstantFilterContext.prototype.constructor = ConstantFilterContext;

Splv1Parser.ConstantFilterContext = ConstantFilterContext;

ConstantFilterContext.prototype.eval_fvalue = function() {
    return this.getTypedRuleContext(Eval_fvalueContext,0);
};
ConstantFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterConstantFilter(this);
	}
};

ConstantFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitConstantFilter(this);
	}
};


function ExpressionFilterContext(parser, ctx) {
	Transaction_filterContext.call(this, parser);
    Transaction_filterContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExpressionFilterContext.prototype = Object.create(Transaction_filterContext.prototype);
ExpressionFilterContext.prototype.constructor = ExpressionFilterContext;

Splv1Parser.ExpressionFilterContext = ExpressionFilterContext;

ExpressionFilterContext.prototype.EVAL = function() {
    return this.getToken(Splv1Parser.EVAL, 0);
};

ExpressionFilterContext.prototype.LPAREN = function() {
    return this.getToken(Splv1Parser.LPAREN, 0);
};

ExpressionFilterContext.prototype.eval_expression = function() {
    return this.getTypedRuleContext(Eval_expressionContext,0);
};

ExpressionFilterContext.prototype.RPAREN = function() {
    return this.getToken(Splv1Parser.RPAREN, 0);
};
ExpressionFilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterExpressionFilter(this);
	}
};

ExpressionFilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitExpressionFilter(this);
	}
};



Splv1Parser.Transaction_filterContext = Transaction_filterContext;

Splv1Parser.prototype.transaction_filter = function() {

    var localctx = new Transaction_filterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, Splv1Parser.RULE_transaction_filter);
    try {
        this.state = 619;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.BOOL:
        case Splv1Parser.INT:
        case Splv1Parser.NUM:
        case Splv1Parser.QUOTED_STRING:
            localctx = new ConstantFilterContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 613;
            this.eval_fvalue();
            break;
        case Splv1Parser.EVAL:
            localctx = new ExpressionFilterContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 614;
            this.match(Splv1Parser.EVAL);
            this.state = 615;
            this.match(Splv1Parser.LPAREN);
            this.state = 616;
            this.eval_expression(0);
            this.state = 617;
            this.match(Splv1Parser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Addtotals_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_addtotals_option;
    this.fieldname = null; // FieldContext
    return this;
}

Addtotals_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Addtotals_optionContext.prototype.constructor = Addtotals_optionContext;

Addtotals_optionContext.prototype.FIELDNAME = function() {
    return this.getToken(Splv1Parser.FIELDNAME, 0);
};

Addtotals_optionContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Addtotals_optionContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Addtotals_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterAddtotals_option(this);
	}
};

Addtotals_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitAddtotals_option(this);
	}
};




Splv1Parser.Addtotals_optionContext = Addtotals_optionContext;

Splv1Parser.prototype.addtotals_option = function() {

    var localctx = new Addtotals_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, Splv1Parser.RULE_addtotals_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.match(Splv1Parser.FIELDNAME);
        this.state = 622;
        this.match(Splv1Parser.EQ);
        this.state = 623;
        localctx.fieldname = this.field();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SearchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_search;
    return this;
}

SearchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SearchContext.prototype.constructor = SearchContext;

SearchContext.prototype.search_option = function() {
    return this.getTypedRuleContext(Search_optionContext,0);
};

SearchContext.prototype.SEARCH = function() {
    return this.getToken(Splv1Parser.SEARCH, 0);
};

SearchContext.prototype.search_expression = function() {
    return this.getTypedRuleContext(Search_expressionContext,0);
};

SearchContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch(this);
	}
};

SearchContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch(this);
	}
};




Splv1Parser.SearchContext = SearchContext;

Splv1Parser.prototype.search = function() {

    var localctx = new SearchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, Splv1Parser.RULE_search);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 626;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
        if(la_===1) {
            this.state = 625;
            this.match(Splv1Parser.SEARCH);

        }
        this.state = 628;
        this.search_option();
        this.state = 630;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME) | (1 << Splv1Parser.EVAL) | (1 << Splv1Parser.WHERE) | (1 << Splv1Parser.LIKE) | (1 << Splv1Parser.JOIN) | (1 << Splv1Parser.LOOKUP) | (1 << Splv1Parser.OUTPUT) | (1 << Splv1Parser.FROM) | (1 << Splv1Parser.STATS) | (1 << Splv1Parser.TIMECHART) | (1 << Splv1Parser.MOVINGAVG) | (1 << Splv1Parser.WINDOW) | (1 << Splv1Parser.MODEL) | (1 << Splv1Parser.EVENTSTATS) | (1 << Splv1Parser.TOP) | (1 << Splv1Parser.RARE) | (1 << Splv1Parser.SORT) | (1 << Splv1Parser.BY) | (1 << Splv1Parser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Splv1Parser.WITH - 32)) | (1 << (Splv1Parser.AS - 32)) | (1 << (Splv1Parser.LIMIT - 32)) | (1 << (Splv1Parser.FIELDS - 32)) | (1 << (Splv1Parser.DEDUP - 32)) | (1 << (Splv1Parser.RENAME - 32)) | (1 << (Splv1Parser.REPLACE - 32)) | (1 << (Splv1Parser.REX - 32)) | (1 << (Splv1Parser.FIELD - 32)) | (1 << (Splv1Parser.BUCKET - 32)) | (1 << (Splv1Parser.SEARCH - 32)) | (1 << (Splv1Parser.JSONPATH - 32)) | (1 << (Splv1Parser.XMLPATH - 32)) | (1 << (Splv1Parser.INPUT - 32)) | (1 << (Splv1Parser.PATH - 32)) | (1 << (Splv1Parser.MVEXPAND - 32)) | (1 << (Splv1Parser.MVCOMBINE - 32)) | (1 << (Splv1Parser.IPLOCATION - 32)) | (1 << (Splv1Parser.PREFIX - 32)) | (1 << (Splv1Parser.ALLFIELDS - 32)) | (1 << (Splv1Parser.LANG - 32)) | (1 << (Splv1Parser.APPEND - 32)) | (1 << (Splv1Parser.APPEND_MAXTIME - 32)) | (1 << (Splv1Parser.APPEND_MAXOUT - 32)) | (1 << (Splv1Parser.APPEND_TIMEOUT - 32)) | (1 << (Splv1Parser.EXPORT - 32)) | (1 << (Splv1Parser.EXPORT_SINKTYPE - 32)) | (1 << (Splv1Parser.EXPORT_BATCH_SIZE - 32)) | (1 << (Splv1Parser.CONVERT - 32)) | (1 << (Splv1Parser.TIMEFORMAT - 32)) | (1 << (Splv1Parser.TRANSACTION - 32)) | (1 << (Splv1Parser.TRANSACTION_STARTSWITH - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Splv1Parser.TRANSACTION_ENDSWITH - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXSPAN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXPAUSE - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_DELIM - 64)) | (1 << (Splv1Parser.TRANSACTION_MVLIST - 64)) | (1 << (Splv1Parser.TRANSACTION_NULLSTR - 64)) | (1 << (Splv1Parser.TRANSACTION_MVRAW - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENTXN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_KEEPEVICTED - 64)) | (1 << (Splv1Parser.TIMELINE_INTERVAL - 64)) | (1 << (Splv1Parser.TIMELINE_MIN_BOUND - 64)) | (1 << (Splv1Parser.TIMELINE_MAX_BOUND - 64)) | (1 << (Splv1Parser.COMPOSE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_FAST - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_SMART - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_DETAILED - 64)) | (1 << (Splv1Parser.COMPOSE_ACTIONS - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_LIMIT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_HISTOGRAM - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_RESULT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY - 64)) | (1 << (Splv1Parser.ASYNC - 64)) | (1 << (Splv1Parser.PARALLEL - 64)) | (1 << (Splv1Parser.CHART - 64)) | (1 << (Splv1Parser.OVER - 64)) | (1 << (Splv1Parser.ADDTOTALS - 64)) | (1 << (Splv1Parser.FIELDNAME - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Splv1Parser.LPAREN - 96)) | (1 << (Splv1Parser.STAR - 96)) | (1 << (Splv1Parser.PLUS - 96)) | (1 << (Splv1Parser.MINUS - 96)) | (1 << (Splv1Parser.NOT - 96)) | (1 << (Splv1Parser.DESC - 96)) | (1 << (Splv1Parser.ASC - 96)) | (1 << (Splv1Parser.TYPE - 96)) | (1 << (Splv1Parser.MAX - 96)) | (1 << (Splv1Parser.BOOL - 96)) | (1 << (Splv1Parser.INT - 96)) | (1 << (Splv1Parser.NUM - 96)) | (1 << (Splv1Parser.REGEX - 96)) | (1 << (Splv1Parser.IDENTIFIER - 96)) | (1 << (Splv1Parser.IDENTIFIER_WITH_STAR - 96)) | (1 << (Splv1Parser.QUOTED_STRING - 96)) | (1 << (Splv1Parser.UNQOTED_STRING - 96)))) !== 0)) {
            this.state = 629;
            this.search_expression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Start_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_start_value;
    return this;
}

Start_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Start_valueContext.prototype.constructor = Start_valueContext;

Start_valueContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

Start_valueContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

Start_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterStart_value(this);
	}
};

Start_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitStart_value(this);
	}
};




Splv1Parser.Start_valueContext = Start_valueContext;

Splv1Parser.prototype.start_value = function() {

    var localctx = new Start_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, Splv1Parser.RULE_start_value);
    try {
        this.state = 634;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.PLUS:
        case Splv1Parser.MINUS:
        case Splv1Parser.INT:
            this.enterOuterAlt(localctx, 1);
            this.state = 632;
            this.signed_int();
            break;
        case Splv1Parser.QUOTED_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 633;
            this.match(Splv1Parser.QUOTED_STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function End_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_end_value;
    return this;
}

End_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
End_valueContext.prototype.constructor = End_valueContext;

End_valueContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

End_valueContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

End_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEnd_value(this);
	}
};

End_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEnd_value(this);
	}
};




Splv1Parser.End_valueContext = End_valueContext;

Splv1Parser.prototype.end_value = function() {

    var localctx = new End_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, Splv1Parser.RULE_end_value);
    try {
        this.state = 638;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.PLUS:
        case Splv1Parser.MINUS:
        case Splv1Parser.INT:
            this.enterOuterAlt(localctx, 1);
            this.state = 636;
            this.signed_int();
            break;
        case Splv1Parser.QUOTED_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 637;
            this.match(Splv1Parser.QUOTED_STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Search_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_search_option;
    this.start = null; // Start_valueContext
    this.end = null; // End_valueContext
    this.parallel = null; // Signed_intContext
    this.async = null; // Token
    return this;
}

Search_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_optionContext.prototype.constructor = Search_optionContext;

Search_optionContext.prototype.START = function() {
    return this.getToken(Splv1Parser.START, 0);
};

Search_optionContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.EQ);
    } else {
        return this.getToken(Splv1Parser.EQ, i);
    }
};


Search_optionContext.prototype.END = function() {
    return this.getToken(Splv1Parser.END, 0);
};

Search_optionContext.prototype.PARALLEL = function() {
    return this.getToken(Splv1Parser.PARALLEL, 0);
};

Search_optionContext.prototype.ASYNC = function() {
    return this.getToken(Splv1Parser.ASYNC, 0);
};

Search_optionContext.prototype.start_value = function() {
    return this.getTypedRuleContext(Start_valueContext,0);
};

Search_optionContext.prototype.end_value = function() {
    return this.getTypedRuleContext(End_valueContext,0);
};

Search_optionContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

Search_optionContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

Search_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_option(this);
	}
};

Search_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_option(this);
	}
};




Splv1Parser.Search_optionContext = Search_optionContext;

Splv1Parser.prototype.search_option = function() {

    var localctx = new Search_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, Splv1Parser.RULE_search_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 643;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
        if(la_===1) {
            this.state = 640;
            this.match(Splv1Parser.START);
            this.state = 641;
            this.match(Splv1Parser.EQ);
            this.state = 642;
            localctx.start = this.start_value();

        }
        this.state = 648;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        if(la_===1) {
            this.state = 645;
            this.match(Splv1Parser.END);
            this.state = 646;
            this.match(Splv1Parser.EQ);
            this.state = 647;
            localctx.end = this.end_value();

        }
        this.state = 653;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
        if(la_===1) {
            this.state = 650;
            this.match(Splv1Parser.PARALLEL);
            this.state = 651;
            this.match(Splv1Parser.EQ);
            this.state = 652;
            localctx.parallel = this.signed_int();

        }
        this.state = 658;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
        if(la_===1) {
            this.state = 655;
            this.match(Splv1Parser.ASYNC);
            this.state = 656;
            this.match(Splv1Parser.EQ);
            this.state = 657;
            localctx.async = this.match(Splv1Parser.BOOL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SpanValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_spanValue;
    this.integerSpan = null; // Signed_intContext
    this.timeSpan = null; // Token
    return this;
}

SpanValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpanValueContext.prototype.constructor = SpanValueContext;

SpanValueContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

SpanValueContext.prototype.UNQOTED_STRING = function() {
    return this.getToken(Splv1Parser.UNQOTED_STRING, 0);
};

SpanValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSpanValue(this);
	}
};

SpanValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSpanValue(this);
	}
};




Splv1Parser.SpanValueContext = SpanValueContext;

Splv1Parser.prototype.spanValue = function() {

    var localctx = new SpanValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, Splv1Parser.RULE_spanValue);
    try {
        this.state = 662;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.PLUS:
        case Splv1Parser.MINUS:
        case Splv1Parser.INT:
            this.enterOuterAlt(localctx, 1);
            this.state = 660;
            localctx.integerSpan = this.signed_int();
            break;
        case Splv1Parser.UNQOTED_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 661;
            localctx.timeSpan = this.match(Splv1Parser.UNQOTED_STRING);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Rename_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_rename_field;
    this.oldField = null; // FieldContext
    this.newField = null; // FieldContext
    return this;
}

Rename_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Rename_fieldContext.prototype.constructor = Rename_fieldContext;

Rename_fieldContext.prototype.AS = function() {
    return this.getToken(Splv1Parser.AS, 0);
};

Rename_fieldContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

Rename_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterRename_field(this);
	}
};

Rename_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitRename_field(this);
	}
};




Splv1Parser.Rename_fieldContext = Rename_fieldContext;

Splv1Parser.prototype.rename_field = function() {

    var localctx = new Rename_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, Splv1Parser.RULE_rename_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 664;
        localctx.oldField = this.field();
        this.state = 665;
        this.match(Splv1Parser.AS);
        this.state = 666;
        localctx.newField = this.field();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Replace_withContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_replace_with;
    this.oldVal = null; // Token
    this.newVal = null; // Token
    return this;
}

Replace_withContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Replace_withContext.prototype.constructor = Replace_withContext;

Replace_withContext.prototype.WITH = function() {
    return this.getToken(Splv1Parser.WITH, 0);
};

Replace_withContext.prototype.QUOTED_STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.QUOTED_STRING);
    } else {
        return this.getToken(Splv1Parser.QUOTED_STRING, i);
    }
};


Replace_withContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterReplace_with(this);
	}
};

Replace_withContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitReplace_with(this);
	}
};




Splv1Parser.Replace_withContext = Replace_withContext;

Splv1Parser.prototype.replace_with = function() {

    var localctx = new Replace_withContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, Splv1Parser.RULE_replace_with);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 668;
        localctx.oldVal = this.match(Splv1Parser.QUOTED_STRING);
        this.state = 669;
        this.match(Splv1Parser.WITH);
        this.state = 670;
        localctx.newVal = this.match(Splv1Parser.QUOTED_STRING);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Search_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_search_expression;
    return this;
}

Search_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_expressionContext.prototype.constructor = Search_expressionContext;


 
Search_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function Search_not_expressionContext(parser, ctx) {
	Search_expressionContext.call(this, parser);
    Search_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Search_not_expressionContext.prototype = Object.create(Search_expressionContext.prototype);
Search_not_expressionContext.prototype.constructor = Search_not_expressionContext;

Splv1Parser.Search_not_expressionContext = Search_not_expressionContext;

Search_not_expressionContext.prototype.NOT = function() {
    return this.getToken(Splv1Parser.NOT, 0);
};

Search_not_expressionContext.prototype.search_expression = function() {
    return this.getTypedRuleContext(Search_expressionContext,0);
};
Search_not_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_not_expression(this);
	}
};

Search_not_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_not_expression(this);
	}
};


function Search_query_expressionContext(parser, ctx) {
	Search_expressionContext.call(this, parser);
    Search_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Search_query_expressionContext.prototype = Object.create(Search_expressionContext.prototype);
Search_query_expressionContext.prototype.constructor = Search_query_expressionContext;

Splv1Parser.Search_query_expressionContext = Search_query_expressionContext;

Search_query_expressionContext.prototype.search_query = function() {
    return this.getTypedRuleContext(Search_queryContext,0);
};
Search_query_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_query_expression(this);
	}
};

Search_query_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_query_expression(this);
	}
};


function Search_parenthesized_expressionContext(parser, ctx) {
	Search_expressionContext.call(this, parser);
    Search_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Search_parenthesized_expressionContext.prototype = Object.create(Search_expressionContext.prototype);
Search_parenthesized_expressionContext.prototype.constructor = Search_parenthesized_expressionContext;

Splv1Parser.Search_parenthesized_expressionContext = Search_parenthesized_expressionContext;

Search_parenthesized_expressionContext.prototype.LPAREN = function() {
    return this.getToken(Splv1Parser.LPAREN, 0);
};

Search_parenthesized_expressionContext.prototype.search_expression = function() {
    return this.getTypedRuleContext(Search_expressionContext,0);
};

Search_parenthesized_expressionContext.prototype.RPAREN = function() {
    return this.getToken(Splv1Parser.RPAREN, 0);
};
Search_parenthesized_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_parenthesized_expression(this);
	}
};

Search_parenthesized_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_parenthesized_expression(this);
	}
};


function Search_or_expressionContext(parser, ctx) {
	Search_expressionContext.call(this, parser);
    this.left = null; // Search_expressionContext;
    this.op = null; // Token;
    this.right = null; // Search_expressionContext;
    Search_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Search_or_expressionContext.prototype = Object.create(Search_expressionContext.prototype);
Search_or_expressionContext.prototype.constructor = Search_or_expressionContext;

Splv1Parser.Search_or_expressionContext = Search_or_expressionContext;

Search_or_expressionContext.prototype.search_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_expressionContext);
    } else {
        return this.getTypedRuleContext(Search_expressionContext,i);
    }
};

Search_or_expressionContext.prototype.OR = function() {
    return this.getToken(Splv1Parser.OR, 0);
};
Search_or_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_or_expression(this);
	}
};

Search_or_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_or_expression(this);
	}
};


function Search_and_expressionContext(parser, ctx) {
	Search_expressionContext.call(this, parser);
    this.left = null; // Search_expressionContext;
    this.op = null; // Token;
    this.right = null; // Search_expressionContext;
    Search_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Search_and_expressionContext.prototype = Object.create(Search_expressionContext.prototype);
Search_and_expressionContext.prototype.constructor = Search_and_expressionContext;

Splv1Parser.Search_and_expressionContext = Search_and_expressionContext;

Search_and_expressionContext.prototype.search_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_expressionContext);
    } else {
        return this.getTypedRuleContext(Search_expressionContext,i);
    }
};

Search_and_expressionContext.prototype.AND = function() {
    return this.getToken(Splv1Parser.AND, 0);
};
Search_and_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_and_expression(this);
	}
};

Search_and_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_and_expression(this);
	}
};



Splv1Parser.prototype.search_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Search_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 66;
    this.enterRecursionRule(localctx, 66, Splv1Parser.RULE_search_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 680;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.NOT:
            localctx = new Search_not_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 673;
            this.match(Splv1Parser.NOT);
            this.state = 674;
            this.search_expression(5);
            break;
        case Splv1Parser.LPAREN:
            localctx = new Search_parenthesized_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 675;
            this.match(Splv1Parser.LPAREN);
            this.state = 676;
            this.search_expression(0);
            this.state = 677;
            this.match(Splv1Parser.RPAREN);
            break;
        case Splv1Parser.BINS:
        case Splv1Parser.SPAN:
        case Splv1Parser.START:
        case Splv1Parser.END:
        case Splv1Parser.ALIGN:
        case Splv1Parser.START_TIME:
        case Splv1Parser.END_TIME:
        case Splv1Parser.EVAL:
        case Splv1Parser.WHERE:
        case Splv1Parser.LIKE:
        case Splv1Parser.JOIN:
        case Splv1Parser.LOOKUP:
        case Splv1Parser.OUTPUT:
        case Splv1Parser.FROM:
        case Splv1Parser.STATS:
        case Splv1Parser.TIMECHART:
        case Splv1Parser.MOVINGAVG:
        case Splv1Parser.WINDOW:
        case Splv1Parser.MODEL:
        case Splv1Parser.EVENTSTATS:
        case Splv1Parser.TOP:
        case Splv1Parser.RARE:
        case Splv1Parser.SORT:
        case Splv1Parser.BY:
        case Splv1Parser.IN:
        case Splv1Parser.WITH:
        case Splv1Parser.AS:
        case Splv1Parser.LIMIT:
        case Splv1Parser.FIELDS:
        case Splv1Parser.DEDUP:
        case Splv1Parser.RENAME:
        case Splv1Parser.REPLACE:
        case Splv1Parser.REX:
        case Splv1Parser.FIELD:
        case Splv1Parser.BUCKET:
        case Splv1Parser.SEARCH:
        case Splv1Parser.JSONPATH:
        case Splv1Parser.XMLPATH:
        case Splv1Parser.INPUT:
        case Splv1Parser.PATH:
        case Splv1Parser.MVEXPAND:
        case Splv1Parser.MVCOMBINE:
        case Splv1Parser.IPLOCATION:
        case Splv1Parser.PREFIX:
        case Splv1Parser.ALLFIELDS:
        case Splv1Parser.LANG:
        case Splv1Parser.APPEND:
        case Splv1Parser.APPEND_MAXTIME:
        case Splv1Parser.APPEND_MAXOUT:
        case Splv1Parser.APPEND_TIMEOUT:
        case Splv1Parser.EXPORT:
        case Splv1Parser.EXPORT_SINKTYPE:
        case Splv1Parser.EXPORT_BATCH_SIZE:
        case Splv1Parser.CONVERT:
        case Splv1Parser.TIMEFORMAT:
        case Splv1Parser.TRANSACTION:
        case Splv1Parser.TRANSACTION_STARTSWITH:
        case Splv1Parser.TRANSACTION_ENDSWITH:
        case Splv1Parser.TRANSACTION_MAXSPAN:
        case Splv1Parser.TRANSACTION_MAXPAUSE:
        case Splv1Parser.TRANSACTION_MAXEVENTS:
        case Splv1Parser.TRANSACTION_DELIM:
        case Splv1Parser.TRANSACTION_MVLIST:
        case Splv1Parser.TRANSACTION_NULLSTR:
        case Splv1Parser.TRANSACTION_MVRAW:
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
        case Splv1Parser.TIMELINE_INTERVAL:
        case Splv1Parser.TIMELINE_MIN_BOUND:
        case Splv1Parser.TIMELINE_MAX_BOUND:
        case Splv1Parser.COMPOSE:
        case Splv1Parser.COMPOSE_MODE:
        case Splv1Parser.COMPOSE_MODE_FAST:
        case Splv1Parser.COMPOSE_MODE_SMART:
        case Splv1Parser.COMPOSE_MODE_DETAILED:
        case Splv1Parser.COMPOSE_ACTIONS:
        case Splv1Parser.COMPOSE_ACTION_LIMIT:
        case Splv1Parser.COMPOSE_ACTION_HISTOGRAM:
        case Splv1Parser.COMPOSE_ACTION_SUMMARY:
        case Splv1Parser.COMPOSE_ACTION_RESULT:
        case Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY:
        case Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY:
        case Splv1Parser.ASYNC:
        case Splv1Parser.PARALLEL:
        case Splv1Parser.CHART:
        case Splv1Parser.OVER:
        case Splv1Parser.ADDTOTALS:
        case Splv1Parser.FIELDNAME:
        case Splv1Parser.STAR:
        case Splv1Parser.PLUS:
        case Splv1Parser.MINUS:
        case Splv1Parser.DESC:
        case Splv1Parser.ASC:
        case Splv1Parser.TYPE:
        case Splv1Parser.MAX:
        case Splv1Parser.BOOL:
        case Splv1Parser.INT:
        case Splv1Parser.NUM:
        case Splv1Parser.REGEX:
        case Splv1Parser.IDENTIFIER:
        case Splv1Parser.IDENTIFIER_WITH_STAR:
        case Splv1Parser.QUOTED_STRING:
        case Splv1Parser.UNQOTED_STRING:
            localctx = new Search_query_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 679;
            this.search_query();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 692;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 690;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Search_and_expressionContext(this, new Search_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, Splv1Parser.RULE_search_expression);
                    this.state = 682;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 684;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===Splv1Parser.AND) {
                        this.state = 683;
                        localctx.op = this.match(Splv1Parser.AND);
                    }

                    this.state = 686;
                    localctx.right = this.search_expression(5);
                    break;

                case 2:
                    localctx = new Search_or_expressionContext(this, new Search_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, Splv1Parser.RULE_search_expression);
                    this.state = 687;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 688;
                    localctx.op = this.match(Splv1Parser.OR);
                    this.state = 689;
                    localctx.right = this.search_expression(4);
                    break;

                } 
            }
            this.state = 694;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Search_queryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_search_query;
    return this;
}

Search_queryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_queryContext.prototype.constructor = Search_queryContext;


 
Search_queryContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function Search_fieldSearch_inContext(parser, ctx) {
	Search_queryContext.call(this, parser);
    Search_queryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Search_fieldSearch_inContext.prototype = Object.create(Search_queryContext.prototype);
Search_fieldSearch_inContext.prototype.constructor = Search_fieldSearch_inContext;

Splv1Parser.Search_fieldSearch_inContext = Search_fieldSearch_inContext;

Search_fieldSearch_inContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Search_fieldSearch_inContext.prototype.IN = function() {
    return this.getToken(Splv1Parser.IN, 0);
};

Search_fieldSearch_inContext.prototype.search_query_value_list = function() {
    return this.getTypedRuleContext(Search_query_value_listContext,0);
};
Search_fieldSearch_inContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_fieldSearch_in(this);
	}
};

Search_fieldSearch_inContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_fieldSearch_in(this);
	}
};


function Search_fieldSearch_compareContext(parser, ctx) {
	Search_queryContext.call(this, parser);
    this.op = null; // Token;
    Search_queryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Search_fieldSearch_compareContext.prototype = Object.create(Search_queryContext.prototype);
Search_fieldSearch_compareContext.prototype.constructor = Search_fieldSearch_compareContext;

Splv1Parser.Search_fieldSearch_compareContext = Search_fieldSearch_compareContext;

Search_fieldSearch_compareContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Search_fieldSearch_compareContext.prototype.search_query_value = function() {
    return this.getTypedRuleContext(Search_query_valueContext,0);
};

Search_fieldSearch_compareContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Search_fieldSearch_compareContext.prototype.NEQJ = function() {
    return this.getToken(Splv1Parser.NEQJ, 0);
};

Search_fieldSearch_compareContext.prototype.LT = function() {
    return this.getToken(Splv1Parser.LT, 0);
};

Search_fieldSearch_compareContext.prototype.LTE = function() {
    return this.getToken(Splv1Parser.LTE, 0);
};

Search_fieldSearch_compareContext.prototype.GT = function() {
    return this.getToken(Splv1Parser.GT, 0);
};

Search_fieldSearch_compareContext.prototype.GTE = function() {
    return this.getToken(Splv1Parser.GTE, 0);
};
Search_fieldSearch_compareContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_fieldSearch_compare(this);
	}
};

Search_fieldSearch_compareContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_fieldSearch_compare(this);
	}
};


function Search_fullSearchContext(parser, ctx) {
	Search_queryContext.call(this, parser);
    Search_queryContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Search_fullSearchContext.prototype = Object.create(Search_queryContext.prototype);
Search_fullSearchContext.prototype.constructor = Search_fullSearchContext;

Splv1Parser.Search_fullSearchContext = Search_fullSearchContext;

Search_fullSearchContext.prototype.search_query_value = function() {
    return this.getTypedRuleContext(Search_query_valueContext,0);
};
Search_fullSearchContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_fullSearch(this);
	}
};

Search_fullSearchContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_fullSearch(this);
	}
};



Splv1Parser.Search_queryContext = Search_queryContext;

Splv1Parser.prototype.search_query = function() {

    var localctx = new Search_queryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, Splv1Parser.RULE_search_query);
    var _la = 0; // Token type
    try {
        this.state = 704;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
        switch(la_) {
        case 1:
            localctx = new Search_fieldSearch_compareContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 695;
            this.field();
            this.state = 696;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.EQ) | (1 << Splv1Parser.NEQJ) | (1 << Splv1Parser.LT) | (1 << Splv1Parser.LTE) | (1 << Splv1Parser.GT) | (1 << Splv1Parser.GTE))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 697;
            this.search_query_value();
            break;

        case 2:
            localctx = new Search_fieldSearch_inContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 699;
            this.field();
            this.state = 700;
            this.match(Splv1Parser.IN);
            this.state = 701;
            this.search_query_value_list();
            break;

        case 3:
            localctx = new Search_fullSearchContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 703;
            this.search_query_value();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Unqoted_string_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_unqoted_string_value;
    return this;
}

Unqoted_string_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Unqoted_string_valueContext.prototype.constructor = Unqoted_string_valueContext;

Unqoted_string_valueContext.prototype.reserve_field = function() {
    return this.getTypedRuleContext(Reserve_fieldContext,0);
};

Unqoted_string_valueContext.prototype.UNQOTED_STRING = function() {
    return this.getToken(Splv1Parser.UNQOTED_STRING, 0);
};

Unqoted_string_valueContext.prototype.IDENTIFIER = function() {
    return this.getToken(Splv1Parser.IDENTIFIER, 0);
};

Unqoted_string_valueContext.prototype.IDENTIFIER_WITH_STAR = function() {
    return this.getToken(Splv1Parser.IDENTIFIER_WITH_STAR, 0);
};

Unqoted_string_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterUnqoted_string_value(this);
	}
};

Unqoted_string_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitUnqoted_string_value(this);
	}
};




Splv1Parser.Unqoted_string_valueContext = Unqoted_string_valueContext;

Splv1Parser.prototype.unqoted_string_value = function() {

    var localctx = new Unqoted_string_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, Splv1Parser.RULE_unqoted_string_value);
    try {
        this.state = 710;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.BINS:
        case Splv1Parser.SPAN:
        case Splv1Parser.START:
        case Splv1Parser.END:
        case Splv1Parser.ALIGN:
        case Splv1Parser.START_TIME:
        case Splv1Parser.END_TIME:
        case Splv1Parser.EVAL:
        case Splv1Parser.WHERE:
        case Splv1Parser.LIKE:
        case Splv1Parser.JOIN:
        case Splv1Parser.LOOKUP:
        case Splv1Parser.OUTPUT:
        case Splv1Parser.FROM:
        case Splv1Parser.STATS:
        case Splv1Parser.TIMECHART:
        case Splv1Parser.MOVINGAVG:
        case Splv1Parser.WINDOW:
        case Splv1Parser.MODEL:
        case Splv1Parser.EVENTSTATS:
        case Splv1Parser.TOP:
        case Splv1Parser.RARE:
        case Splv1Parser.SORT:
        case Splv1Parser.BY:
        case Splv1Parser.IN:
        case Splv1Parser.WITH:
        case Splv1Parser.AS:
        case Splv1Parser.LIMIT:
        case Splv1Parser.FIELDS:
        case Splv1Parser.DEDUP:
        case Splv1Parser.RENAME:
        case Splv1Parser.REPLACE:
        case Splv1Parser.REX:
        case Splv1Parser.FIELD:
        case Splv1Parser.BUCKET:
        case Splv1Parser.SEARCH:
        case Splv1Parser.JSONPATH:
        case Splv1Parser.XMLPATH:
        case Splv1Parser.INPUT:
        case Splv1Parser.PATH:
        case Splv1Parser.MVEXPAND:
        case Splv1Parser.MVCOMBINE:
        case Splv1Parser.IPLOCATION:
        case Splv1Parser.PREFIX:
        case Splv1Parser.ALLFIELDS:
        case Splv1Parser.LANG:
        case Splv1Parser.APPEND:
        case Splv1Parser.APPEND_MAXTIME:
        case Splv1Parser.APPEND_MAXOUT:
        case Splv1Parser.APPEND_TIMEOUT:
        case Splv1Parser.EXPORT:
        case Splv1Parser.EXPORT_SINKTYPE:
        case Splv1Parser.EXPORT_BATCH_SIZE:
        case Splv1Parser.CONVERT:
        case Splv1Parser.TIMEFORMAT:
        case Splv1Parser.TRANSACTION:
        case Splv1Parser.TRANSACTION_STARTSWITH:
        case Splv1Parser.TRANSACTION_ENDSWITH:
        case Splv1Parser.TRANSACTION_MAXSPAN:
        case Splv1Parser.TRANSACTION_MAXPAUSE:
        case Splv1Parser.TRANSACTION_MAXEVENTS:
        case Splv1Parser.TRANSACTION_DELIM:
        case Splv1Parser.TRANSACTION_MVLIST:
        case Splv1Parser.TRANSACTION_NULLSTR:
        case Splv1Parser.TRANSACTION_MVRAW:
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
        case Splv1Parser.TIMELINE_INTERVAL:
        case Splv1Parser.TIMELINE_MIN_BOUND:
        case Splv1Parser.TIMELINE_MAX_BOUND:
        case Splv1Parser.COMPOSE:
        case Splv1Parser.COMPOSE_MODE:
        case Splv1Parser.COMPOSE_MODE_FAST:
        case Splv1Parser.COMPOSE_MODE_SMART:
        case Splv1Parser.COMPOSE_MODE_DETAILED:
        case Splv1Parser.COMPOSE_ACTIONS:
        case Splv1Parser.COMPOSE_ACTION_LIMIT:
        case Splv1Parser.COMPOSE_ACTION_HISTOGRAM:
        case Splv1Parser.COMPOSE_ACTION_SUMMARY:
        case Splv1Parser.COMPOSE_ACTION_RESULT:
        case Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY:
        case Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY:
        case Splv1Parser.ASYNC:
        case Splv1Parser.PARALLEL:
        case Splv1Parser.CHART:
        case Splv1Parser.OVER:
        case Splv1Parser.ADDTOTALS:
        case Splv1Parser.FIELDNAME:
        case Splv1Parser.DESC:
        case Splv1Parser.ASC:
        case Splv1Parser.TYPE:
        case Splv1Parser.MAX:
            this.enterOuterAlt(localctx, 1);
            this.state = 706;
            this.reserve_field();
            break;
        case Splv1Parser.UNQOTED_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 707;
            this.match(Splv1Parser.UNQOTED_STRING);
            break;
        case Splv1Parser.IDENTIFIER:
            this.enterOuterAlt(localctx, 3);
            this.state = 708;
            this.match(Splv1Parser.IDENTIFIER);
            break;
        case Splv1Parser.IDENTIFIER_WITH_STAR:
            this.enterOuterAlt(localctx, 4);
            this.state = 709;
            this.match(Splv1Parser.IDENTIFIER_WITH_STAR);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Search_query_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_search_query_value;
    return this;
}

Search_query_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_query_valueContext.prototype.constructor = Search_query_valueContext;

Search_query_valueContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

Search_query_valueContext.prototype.signed_num = function() {
    return this.getTypedRuleContext(Signed_numContext,0);
};

Search_query_valueContext.prototype.unqoted_string_value = function() {
    return this.getTypedRuleContext(Unqoted_string_valueContext,0);
};

Search_query_valueContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

Search_query_valueContext.prototype.STAR = function() {
    return this.getToken(Splv1Parser.STAR, 0);
};

Search_query_valueContext.prototype.REGEX = function() {
    return this.getToken(Splv1Parser.REGEX, 0);
};

Search_query_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_query_value(this);
	}
};

Search_query_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_query_value(this);
	}
};




Splv1Parser.Search_query_valueContext = Search_query_valueContext;

Splv1Parser.prototype.search_query_value = function() {

    var localctx = new Search_query_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, Splv1Parser.RULE_search_query_value);
    try {
        this.state = 718;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 712;
            this.signed_int();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 713;
            this.signed_num();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 714;
            this.unqoted_string_value();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 715;
            this.match(Splv1Parser.QUOTED_STRING);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 716;
            this.match(Splv1Parser.STAR);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 717;
            this.match(Splv1Parser.REGEX);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Search_query_value_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_search_query_value_list;
    return this;
}

Search_query_value_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Search_query_value_listContext.prototype.constructor = Search_query_value_listContext;

Search_query_value_listContext.prototype.LPAREN = function() {
    return this.getToken(Splv1Parser.LPAREN, 0);
};

Search_query_value_listContext.prototype.RPAREN = function() {
    return this.getToken(Splv1Parser.RPAREN, 0);
};

Search_query_value_listContext.prototype.search_query_value = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Search_query_valueContext);
    } else {
        return this.getTypedRuleContext(Search_query_valueContext,i);
    }
};

Search_query_value_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};


Search_query_value_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSearch_query_value_list(this);
	}
};

Search_query_value_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSearch_query_value_list(this);
	}
};




Splv1Parser.Search_query_value_listContext = Search_query_value_listContext;

Splv1Parser.prototype.search_query_value_list = function() {

    var localctx = new Search_query_value_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, Splv1Parser.RULE_search_query_value_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 720;
        this.match(Splv1Parser.LPAREN);

        this.state = 721;
        this.search_query_value();
        this.state = 726;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Splv1Parser.COMMA) {
            this.state = 722;
            this.match(Splv1Parser.COMMA);
            this.state = 723;
            this.search_query_value();
            this.state = 728;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 729;
        this.match(Splv1Parser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signed_intContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_signed_int;
    return this;
}

Signed_intContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_intContext.prototype.constructor = Signed_intContext;

Signed_intContext.prototype.INT = function() {
    return this.getToken(Splv1Parser.INT, 0);
};

Signed_intContext.prototype.MINUS = function() {
    return this.getToken(Splv1Parser.MINUS, 0);
};

Signed_intContext.prototype.PLUS = function() {
    return this.getToken(Splv1Parser.PLUS, 0);
};

Signed_intContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSigned_int(this);
	}
};

Signed_intContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSigned_int(this);
	}
};




Splv1Parser.Signed_intContext = Signed_intContext;

Splv1Parser.prototype.signed_int = function() {

    var localctx = new Signed_intContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, Splv1Parser.RULE_signed_int);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 732;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Splv1Parser.PLUS || _la===Splv1Parser.MINUS) {
            this.state = 731;
            _la = this._input.LA(1);
            if(!(_la===Splv1Parser.PLUS || _la===Splv1Parser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 734;
        this.match(Splv1Parser.INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Signed_numContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_signed_num;
    return this;
}

Signed_numContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_numContext.prototype.constructor = Signed_numContext;

Signed_numContext.prototype.NUM = function() {
    return this.getToken(Splv1Parser.NUM, 0);
};

Signed_numContext.prototype.MINUS = function() {
    return this.getToken(Splv1Parser.MINUS, 0);
};

Signed_numContext.prototype.PLUS = function() {
    return this.getToken(Splv1Parser.PLUS, 0);
};

Signed_numContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSigned_num(this);
	}
};

Signed_numContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSigned_num(this);
	}
};




Splv1Parser.Signed_numContext = Signed_numContext;

Splv1Parser.prototype.signed_num = function() {

    var localctx = new Signed_numContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, Splv1Parser.RULE_signed_num);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 737;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Splv1Parser.PLUS || _la===Splv1Parser.MINUS) {
            this.state = 736;
            _la = this._input.LA(1);
            if(!(_la===Splv1Parser.PLUS || _la===Splv1Parser.MINUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 739;
        this.match(Splv1Parser.NUM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Stats_funcContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_stats_func;
    this.aggField = null; // FieldContext
    this.secondField = null; // FieldContext
    this.span = null; // SpanValueContext
    this.alias = null; // FieldContext
    return this;
}

Stats_funcContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Stats_funcContext.prototype.constructor = Stats_funcContext;

Stats_funcContext.prototype.funcName = function() {
    return this.getTypedRuleContext(FuncNameContext,0);
};

Stats_funcContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.LPAREN);
    } else {
        return this.getToken(Splv1Parser.LPAREN, i);
    }
};


Stats_funcContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.RPAREN);
    } else {
        return this.getToken(Splv1Parser.RPAREN, i);
    }
};


Stats_funcContext.prototype.sparklineFunc = function() {
    return this.getTypedRuleContext(SparklineFuncContext,0);
};

Stats_funcContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};


Stats_funcContext.prototype.AS = function() {
    return this.getToken(Splv1Parser.AS, 0);
};

Stats_funcContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

Stats_funcContext.prototype.spanValue = function() {
    return this.getTypedRuleContext(SpanValueContext,0);
};

Stats_funcContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterStats_func(this);
	}
};

Stats_funcContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitStats_func(this);
	}
};




Splv1Parser.Stats_funcContext = Stats_funcContext;

Splv1Parser.prototype.stats_func = function() {

    var localctx = new Stats_funcContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, Splv1Parser.RULE_stats_func);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 741;
        this.funcName();
        this.state = 742;
        this.match(Splv1Parser.LPAREN);
        this.state = 746;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        if(la_===1) {
            this.state = 743;
            this.sparklineFunc();
            this.state = 744;
            this.match(Splv1Parser.LPAREN);

        }
        this.state = 749;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME) | (1 << Splv1Parser.EVAL) | (1 << Splv1Parser.WHERE) | (1 << Splv1Parser.LIKE) | (1 << Splv1Parser.JOIN) | (1 << Splv1Parser.LOOKUP) | (1 << Splv1Parser.OUTPUT) | (1 << Splv1Parser.FROM) | (1 << Splv1Parser.STATS) | (1 << Splv1Parser.TIMECHART) | (1 << Splv1Parser.MOVINGAVG) | (1 << Splv1Parser.WINDOW) | (1 << Splv1Parser.MODEL) | (1 << Splv1Parser.EVENTSTATS) | (1 << Splv1Parser.TOP) | (1 << Splv1Parser.RARE) | (1 << Splv1Parser.SORT) | (1 << Splv1Parser.BY) | (1 << Splv1Parser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Splv1Parser.WITH - 32)) | (1 << (Splv1Parser.AS - 32)) | (1 << (Splv1Parser.LIMIT - 32)) | (1 << (Splv1Parser.FIELDS - 32)) | (1 << (Splv1Parser.DEDUP - 32)) | (1 << (Splv1Parser.RENAME - 32)) | (1 << (Splv1Parser.REPLACE - 32)) | (1 << (Splv1Parser.REX - 32)) | (1 << (Splv1Parser.FIELD - 32)) | (1 << (Splv1Parser.BUCKET - 32)) | (1 << (Splv1Parser.SEARCH - 32)) | (1 << (Splv1Parser.JSONPATH - 32)) | (1 << (Splv1Parser.XMLPATH - 32)) | (1 << (Splv1Parser.INPUT - 32)) | (1 << (Splv1Parser.PATH - 32)) | (1 << (Splv1Parser.MVEXPAND - 32)) | (1 << (Splv1Parser.MVCOMBINE - 32)) | (1 << (Splv1Parser.IPLOCATION - 32)) | (1 << (Splv1Parser.PREFIX - 32)) | (1 << (Splv1Parser.ALLFIELDS - 32)) | (1 << (Splv1Parser.LANG - 32)) | (1 << (Splv1Parser.APPEND - 32)) | (1 << (Splv1Parser.APPEND_MAXTIME - 32)) | (1 << (Splv1Parser.APPEND_MAXOUT - 32)) | (1 << (Splv1Parser.APPEND_TIMEOUT - 32)) | (1 << (Splv1Parser.EXPORT - 32)) | (1 << (Splv1Parser.EXPORT_SINKTYPE - 32)) | (1 << (Splv1Parser.EXPORT_BATCH_SIZE - 32)) | (1 << (Splv1Parser.CONVERT - 32)) | (1 << (Splv1Parser.TIMEFORMAT - 32)) | (1 << (Splv1Parser.TRANSACTION - 32)) | (1 << (Splv1Parser.TRANSACTION_STARTSWITH - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Splv1Parser.TRANSACTION_ENDSWITH - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXSPAN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXPAUSE - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_DELIM - 64)) | (1 << (Splv1Parser.TRANSACTION_MVLIST - 64)) | (1 << (Splv1Parser.TRANSACTION_NULLSTR - 64)) | (1 << (Splv1Parser.TRANSACTION_MVRAW - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENTXN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_KEEPEVICTED - 64)) | (1 << (Splv1Parser.TIMELINE_INTERVAL - 64)) | (1 << (Splv1Parser.TIMELINE_MIN_BOUND - 64)) | (1 << (Splv1Parser.TIMELINE_MAX_BOUND - 64)) | (1 << (Splv1Parser.COMPOSE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_FAST - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_SMART - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_DETAILED - 64)) | (1 << (Splv1Parser.COMPOSE_ACTIONS - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_LIMIT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_HISTOGRAM - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_RESULT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY - 64)) | (1 << (Splv1Parser.ASYNC - 64)) | (1 << (Splv1Parser.PARALLEL - 64)) | (1 << (Splv1Parser.CHART - 64)) | (1 << (Splv1Parser.OVER - 64)) | (1 << (Splv1Parser.ADDTOTALS - 64)) | (1 << (Splv1Parser.FIELDNAME - 64)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (Splv1Parser.DESC - 116)) | (1 << (Splv1Parser.ASC - 116)) | (1 << (Splv1Parser.TYPE - 116)) | (1 << (Splv1Parser.MAX - 116)) | (1 << (Splv1Parser.BOOL - 116)) | (1 << (Splv1Parser.INT - 116)) | (1 << (Splv1Parser.IDENTIFIER - 116)) | (1 << (Splv1Parser.IDENTIFIER_WITH_STAR - 116)))) !== 0)) {
            this.state = 748;
            localctx.aggField = this.field();
        }

        this.state = 753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Splv1Parser.COMMA) {
            this.state = 751;
            this.match(Splv1Parser.COMMA);
            this.state = 752;
            localctx.secondField = this.field();
        }

        this.state = 755;
        this.match(Splv1Parser.RPAREN);
        this.state = 761;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
        if(la_===1) {
            this.state = 758;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===Splv1Parser.COMMA) {
                this.state = 756;
                this.match(Splv1Parser.COMMA);
                this.state = 757;
                localctx.span = this.spanValue();
            }

            this.state = 760;
            this.match(Splv1Parser.RPAREN);

        }
        this.state = 765;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Splv1Parser.AS) {
            this.state = 763;
            this.match(Splv1Parser.AS);
            this.state = 764;
            localctx.alias = this.field();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Reserve_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_reserve_field;
    return this;
}

Reserve_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Reserve_fieldContext.prototype.constructor = Reserve_fieldContext;

Reserve_fieldContext.prototype.EVAL = function() {
    return this.getToken(Splv1Parser.EVAL, 0);
};

Reserve_fieldContext.prototype.WHERE = function() {
    return this.getToken(Splv1Parser.WHERE, 0);
};

Reserve_fieldContext.prototype.JOIN = function() {
    return this.getToken(Splv1Parser.JOIN, 0);
};

Reserve_fieldContext.prototype.FROM = function() {
    return this.getToken(Splv1Parser.FROM, 0);
};

Reserve_fieldContext.prototype.STATS = function() {
    return this.getToken(Splv1Parser.STATS, 0);
};

Reserve_fieldContext.prototype.TOP = function() {
    return this.getToken(Splv1Parser.TOP, 0);
};

Reserve_fieldContext.prototype.SORT = function() {
    return this.getToken(Splv1Parser.SORT, 0);
};

Reserve_fieldContext.prototype.DESC = function() {
    return this.getToken(Splv1Parser.DESC, 0);
};

Reserve_fieldContext.prototype.ASC = function() {
    return this.getToken(Splv1Parser.ASC, 0);
};

Reserve_fieldContext.prototype.BY = function() {
    return this.getToken(Splv1Parser.BY, 0);
};

Reserve_fieldContext.prototype.IN = function() {
    return this.getToken(Splv1Parser.IN, 0);
};

Reserve_fieldContext.prototype.WITH = function() {
    return this.getToken(Splv1Parser.WITH, 0);
};

Reserve_fieldContext.prototype.AS = function() {
    return this.getToken(Splv1Parser.AS, 0);
};

Reserve_fieldContext.prototype.LIMIT = function() {
    return this.getToken(Splv1Parser.LIMIT, 0);
};

Reserve_fieldContext.prototype.FIELDS = function() {
    return this.getToken(Splv1Parser.FIELDS, 0);
};

Reserve_fieldContext.prototype.DEDUP = function() {
    return this.getToken(Splv1Parser.DEDUP, 0);
};

Reserve_fieldContext.prototype.REPLACE = function() {
    return this.getToken(Splv1Parser.REPLACE, 0);
};

Reserve_fieldContext.prototype.RENAME = function() {
    return this.getToken(Splv1Parser.RENAME, 0);
};

Reserve_fieldContext.prototype.REX = function() {
    return this.getToken(Splv1Parser.REX, 0);
};

Reserve_fieldContext.prototype.FIELD = function() {
    return this.getToken(Splv1Parser.FIELD, 0);
};

Reserve_fieldContext.prototype.BUCKET = function() {
    return this.getToken(Splv1Parser.BUCKET, 0);
};

Reserve_fieldContext.prototype.TYPE = function() {
    return this.getToken(Splv1Parser.TYPE, 0);
};

Reserve_fieldContext.prototype.BINS = function() {
    return this.getToken(Splv1Parser.BINS, 0);
};

Reserve_fieldContext.prototype.SPAN = function() {
    return this.getToken(Splv1Parser.SPAN, 0);
};

Reserve_fieldContext.prototype.START = function() {
    return this.getToken(Splv1Parser.START, 0);
};

Reserve_fieldContext.prototype.END = function() {
    return this.getToken(Splv1Parser.END, 0);
};

Reserve_fieldContext.prototype.LOOKUP = function() {
    return this.getToken(Splv1Parser.LOOKUP, 0);
};

Reserve_fieldContext.prototype.OUTPUT = function() {
    return this.getToken(Splv1Parser.OUTPUT, 0);
};

Reserve_fieldContext.prototype.LIKE = function() {
    return this.getToken(Splv1Parser.LIKE, 0);
};

Reserve_fieldContext.prototype.JSONPATH = function() {
    return this.getToken(Splv1Parser.JSONPATH, 0);
};

Reserve_fieldContext.prototype.INPUT = function() {
    return this.getToken(Splv1Parser.INPUT, 0);
};

Reserve_fieldContext.prototype.PATH = function() {
    return this.getToken(Splv1Parser.PATH, 0);
};

Reserve_fieldContext.prototype.XMLPATH = function() {
    return this.getToken(Splv1Parser.XMLPATH, 0);
};

Reserve_fieldContext.prototype.EXPORT = function() {
    return this.getToken(Splv1Parser.EXPORT, 0);
};

Reserve_fieldContext.prototype.EXPORT_SINKTYPE = function() {
    return this.getToken(Splv1Parser.EXPORT_SINKTYPE, 0);
};

Reserve_fieldContext.prototype.TIMECHART = function() {
    return this.getToken(Splv1Parser.TIMECHART, 0);
};

Reserve_fieldContext.prototype.START_TIME = function() {
    return this.getToken(Splv1Parser.START_TIME, 0);
};

Reserve_fieldContext.prototype.END_TIME = function() {
    return this.getToken(Splv1Parser.END_TIME, 0);
};

Reserve_fieldContext.prototype.CONVERT = function() {
    return this.getToken(Splv1Parser.CONVERT, 0);
};

Reserve_fieldContext.prototype.TIMEFORMAT = function() {
    return this.getToken(Splv1Parser.TIMEFORMAT, 0);
};

Reserve_fieldContext.prototype.MOVINGAVG = function() {
    return this.getToken(Splv1Parser.MOVINGAVG, 0);
};

Reserve_fieldContext.prototype.WINDOW = function() {
    return this.getToken(Splv1Parser.WINDOW, 0);
};

Reserve_fieldContext.prototype.MODEL = function() {
    return this.getToken(Splv1Parser.MODEL, 0);
};

Reserve_fieldContext.prototype.TIMELINE_INTERVAL = function() {
    return this.getToken(Splv1Parser.TIMELINE_INTERVAL, 0);
};

Reserve_fieldContext.prototype.TIMELINE_MIN_BOUND = function() {
    return this.getToken(Splv1Parser.TIMELINE_MIN_BOUND, 0);
};

Reserve_fieldContext.prototype.TIMELINE_MAX_BOUND = function() {
    return this.getToken(Splv1Parser.TIMELINE_MAX_BOUND, 0);
};

Reserve_fieldContext.prototype.ALIGN = function() {
    return this.getToken(Splv1Parser.ALIGN, 0);
};

Reserve_fieldContext.prototype.EVENTSTATS = function() {
    return this.getToken(Splv1Parser.EVENTSTATS, 0);
};

Reserve_fieldContext.prototype.RARE = function() {
    return this.getToken(Splv1Parser.RARE, 0);
};

Reserve_fieldContext.prototype.SEARCH = function() {
    return this.getToken(Splv1Parser.SEARCH, 0);
};

Reserve_fieldContext.prototype.MVEXPAND = function() {
    return this.getToken(Splv1Parser.MVEXPAND, 0);
};

Reserve_fieldContext.prototype.MVCOMBINE = function() {
    return this.getToken(Splv1Parser.MVCOMBINE, 0);
};

Reserve_fieldContext.prototype.TRANSACTION = function() {
    return this.getToken(Splv1Parser.TRANSACTION, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_STARTSWITH = function() {
    return this.getToken(Splv1Parser.TRANSACTION_STARTSWITH, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_ENDSWITH = function() {
    return this.getToken(Splv1Parser.TRANSACTION_ENDSWITH, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_MAXSPAN = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXSPAN, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_MAXPAUSE = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXPAUSE, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_MAXEVENTS = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXEVENTS, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_DELIM = function() {
    return this.getToken(Splv1Parser.TRANSACTION_DELIM, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_MVLIST = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MVLIST, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_NULLSTR = function() {
    return this.getToken(Splv1Parser.TRANSACTION_NULLSTR, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_MVRAW = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MVRAW, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_MAXOPENTXN = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXOPENTXN, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_MAXOPENEVENTS = function() {
    return this.getToken(Splv1Parser.TRANSACTION_MAXOPENEVENTS, 0);
};

Reserve_fieldContext.prototype.TRANSACTION_KEEPEVICTED = function() {
    return this.getToken(Splv1Parser.TRANSACTION_KEEPEVICTED, 0);
};

Reserve_fieldContext.prototype.APPEND = function() {
    return this.getToken(Splv1Parser.APPEND, 0);
};

Reserve_fieldContext.prototype.APPEND_MAXTIME = function() {
    return this.getToken(Splv1Parser.APPEND_MAXTIME, 0);
};

Reserve_fieldContext.prototype.APPEND_MAXOUT = function() {
    return this.getToken(Splv1Parser.APPEND_MAXOUT, 0);
};

Reserve_fieldContext.prototype.APPEND_TIMEOUT = function() {
    return this.getToken(Splv1Parser.APPEND_TIMEOUT, 0);
};

Reserve_fieldContext.prototype.IPLOCATION = function() {
    return this.getToken(Splv1Parser.IPLOCATION, 0);
};

Reserve_fieldContext.prototype.ALLFIELDS = function() {
    return this.getToken(Splv1Parser.ALLFIELDS, 0);
};

Reserve_fieldContext.prototype.LANG = function() {
    return this.getToken(Splv1Parser.LANG, 0);
};

Reserve_fieldContext.prototype.PREFIX = function() {
    return this.getToken(Splv1Parser.PREFIX, 0);
};

Reserve_fieldContext.prototype.COMPOSE = function() {
    return this.getToken(Splv1Parser.COMPOSE, 0);
};

Reserve_fieldContext.prototype.COMPOSE_MODE = function() {
    return this.getToken(Splv1Parser.COMPOSE_MODE, 0);
};

Reserve_fieldContext.prototype.COMPOSE_MODE_FAST = function() {
    return this.getToken(Splv1Parser.COMPOSE_MODE_FAST, 0);
};

Reserve_fieldContext.prototype.COMPOSE_MODE_SMART = function() {
    return this.getToken(Splv1Parser.COMPOSE_MODE_SMART, 0);
};

Reserve_fieldContext.prototype.COMPOSE_MODE_DETAILED = function() {
    return this.getToken(Splv1Parser.COMPOSE_MODE_DETAILED, 0);
};

Reserve_fieldContext.prototype.COMPOSE_ACTIONS = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTIONS, 0);
};

Reserve_fieldContext.prototype.COMPOSE_ACTION_LIMIT = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_LIMIT, 0);
};

Reserve_fieldContext.prototype.COMPOSE_ACTION_HISTOGRAM = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_HISTOGRAM, 0);
};

Reserve_fieldContext.prototype.COMPOSE_ACTION_SUMMARY = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_SUMMARY, 0);
};

Reserve_fieldContext.prototype.COMPOSE_ACTION_RESULT = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_RESULT, 0);
};

Reserve_fieldContext.prototype.COMPOSE_ACTION_SIMPLESUMMARY = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY, 0);
};

Reserve_fieldContext.prototype.COMPOSE_ACTION_MAPPINGSUMMARY = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY, 0);
};

Reserve_fieldContext.prototype.PARALLEL = function() {
    return this.getToken(Splv1Parser.PARALLEL, 0);
};

Reserve_fieldContext.prototype.ASYNC = function() {
    return this.getToken(Splv1Parser.ASYNC, 0);
};

Reserve_fieldContext.prototype.MAX = function() {
    return this.getToken(Splv1Parser.MAX, 0);
};

Reserve_fieldContext.prototype.EXPORT_BATCH_SIZE = function() {
    return this.getToken(Splv1Parser.EXPORT_BATCH_SIZE, 0);
};

Reserve_fieldContext.prototype.CHART = function() {
    return this.getToken(Splv1Parser.CHART, 0);
};

Reserve_fieldContext.prototype.OVER = function() {
    return this.getToken(Splv1Parser.OVER, 0);
};

Reserve_fieldContext.prototype.ADDTOTALS = function() {
    return this.getToken(Splv1Parser.ADDTOTALS, 0);
};

Reserve_fieldContext.prototype.FIELDNAME = function() {
    return this.getToken(Splv1Parser.FIELDNAME, 0);
};

Reserve_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterReserve_field(this);
	}
};

Reserve_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitReserve_field(this);
	}
};




Splv1Parser.Reserve_fieldContext = Reserve_fieldContext;

Splv1Parser.prototype.reserve_field = function() {

    var localctx = new Reserve_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, Splv1Parser.RULE_reserve_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 767;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME) | (1 << Splv1Parser.EVAL) | (1 << Splv1Parser.WHERE) | (1 << Splv1Parser.LIKE) | (1 << Splv1Parser.JOIN) | (1 << Splv1Parser.LOOKUP) | (1 << Splv1Parser.OUTPUT) | (1 << Splv1Parser.FROM) | (1 << Splv1Parser.STATS) | (1 << Splv1Parser.TIMECHART) | (1 << Splv1Parser.MOVINGAVG) | (1 << Splv1Parser.WINDOW) | (1 << Splv1Parser.MODEL) | (1 << Splv1Parser.EVENTSTATS) | (1 << Splv1Parser.TOP) | (1 << Splv1Parser.RARE) | (1 << Splv1Parser.SORT) | (1 << Splv1Parser.BY) | (1 << Splv1Parser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Splv1Parser.WITH - 32)) | (1 << (Splv1Parser.AS - 32)) | (1 << (Splv1Parser.LIMIT - 32)) | (1 << (Splv1Parser.FIELDS - 32)) | (1 << (Splv1Parser.DEDUP - 32)) | (1 << (Splv1Parser.RENAME - 32)) | (1 << (Splv1Parser.REPLACE - 32)) | (1 << (Splv1Parser.REX - 32)) | (1 << (Splv1Parser.FIELD - 32)) | (1 << (Splv1Parser.BUCKET - 32)) | (1 << (Splv1Parser.SEARCH - 32)) | (1 << (Splv1Parser.JSONPATH - 32)) | (1 << (Splv1Parser.XMLPATH - 32)) | (1 << (Splv1Parser.INPUT - 32)) | (1 << (Splv1Parser.PATH - 32)) | (1 << (Splv1Parser.MVEXPAND - 32)) | (1 << (Splv1Parser.MVCOMBINE - 32)) | (1 << (Splv1Parser.IPLOCATION - 32)) | (1 << (Splv1Parser.PREFIX - 32)) | (1 << (Splv1Parser.ALLFIELDS - 32)) | (1 << (Splv1Parser.LANG - 32)) | (1 << (Splv1Parser.APPEND - 32)) | (1 << (Splv1Parser.APPEND_MAXTIME - 32)) | (1 << (Splv1Parser.APPEND_MAXOUT - 32)) | (1 << (Splv1Parser.APPEND_TIMEOUT - 32)) | (1 << (Splv1Parser.EXPORT - 32)) | (1 << (Splv1Parser.EXPORT_SINKTYPE - 32)) | (1 << (Splv1Parser.EXPORT_BATCH_SIZE - 32)) | (1 << (Splv1Parser.CONVERT - 32)) | (1 << (Splv1Parser.TIMEFORMAT - 32)) | (1 << (Splv1Parser.TRANSACTION - 32)) | (1 << (Splv1Parser.TRANSACTION_STARTSWITH - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Splv1Parser.TRANSACTION_ENDSWITH - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXSPAN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXPAUSE - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_DELIM - 64)) | (1 << (Splv1Parser.TRANSACTION_MVLIST - 64)) | (1 << (Splv1Parser.TRANSACTION_NULLSTR - 64)) | (1 << (Splv1Parser.TRANSACTION_MVRAW - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENTXN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_KEEPEVICTED - 64)) | (1 << (Splv1Parser.TIMELINE_INTERVAL - 64)) | (1 << (Splv1Parser.TIMELINE_MIN_BOUND - 64)) | (1 << (Splv1Parser.TIMELINE_MAX_BOUND - 64)) | (1 << (Splv1Parser.COMPOSE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_FAST - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_SMART - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_DETAILED - 64)) | (1 << (Splv1Parser.COMPOSE_ACTIONS - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_LIMIT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_HISTOGRAM - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_RESULT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY - 64)) | (1 << (Splv1Parser.ASYNC - 64)) | (1 << (Splv1Parser.PARALLEL - 64)) | (1 << (Splv1Parser.CHART - 64)) | (1 << (Splv1Parser.OVER - 64)) | (1 << (Splv1Parser.ADDTOTALS - 64)) | (1 << (Splv1Parser.FIELDNAME - 64)))) !== 0) || ((((_la - 116)) & ~0x1f) == 0 && ((1 << (_la - 116)) & ((1 << (Splv1Parser.DESC - 116)) | (1 << (Splv1Parser.ASC - 116)) | (1 << (Splv1Parser.TYPE - 116)) | (1 << (Splv1Parser.MAX - 116)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Sort_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_sort_field;
    return this;
}

Sort_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Sort_fieldContext.prototype.constructor = Sort_fieldContext;

Sort_fieldContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Sort_fieldContext.prototype.DESC = function() {
    return this.getToken(Splv1Parser.DESC, 0);
};

Sort_fieldContext.prototype.ASC = function() {
    return this.getToken(Splv1Parser.ASC, 0);
};

Sort_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSort_field(this);
	}
};

Sort_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSort_field(this);
	}
};




Splv1Parser.Sort_fieldContext = Sort_fieldContext;

Splv1Parser.prototype.sort_field = function() {

    var localctx = new Sort_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, Splv1Parser.RULE_sort_field);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 769;
        this.field();
        this.state = 771;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===Splv1Parser.DESC || _la===Splv1Parser.ASC) {
            this.state = 770;
            _la = this._input.LA(1);
            if(!(_la===Splv1Parser.DESC || _la===Splv1Parser.ASC)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Convert_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_convert_field;
    return this;
}

Convert_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Convert_fieldContext.prototype.constructor = Convert_fieldContext;

Convert_fieldContext.prototype.reserve_field = function() {
    return this.getTypedRuleContext(Reserve_fieldContext,0);
};

Convert_fieldContext.prototype.IDENTIFIER = function() {
    return this.getToken(Splv1Parser.IDENTIFIER, 0);
};

Convert_fieldContext.prototype.IDENTIFIER_WITH_STAR = function() {
    return this.getToken(Splv1Parser.IDENTIFIER_WITH_STAR, 0);
};

Convert_fieldContext.prototype.STAR = function() {
    return this.getToken(Splv1Parser.STAR, 0);
};

Convert_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterConvert_field(this);
	}
};

Convert_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitConvert_field(this);
	}
};




Splv1Parser.Convert_fieldContext = Convert_fieldContext;

Splv1Parser.prototype.convert_field = function() {

    var localctx = new Convert_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, Splv1Parser.RULE_convert_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 777;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
        case Splv1Parser.BINS:
        case Splv1Parser.SPAN:
        case Splv1Parser.START:
        case Splv1Parser.END:
        case Splv1Parser.ALIGN:
        case Splv1Parser.START_TIME:
        case Splv1Parser.END_TIME:
        case Splv1Parser.EVAL:
        case Splv1Parser.WHERE:
        case Splv1Parser.LIKE:
        case Splv1Parser.JOIN:
        case Splv1Parser.LOOKUP:
        case Splv1Parser.OUTPUT:
        case Splv1Parser.FROM:
        case Splv1Parser.STATS:
        case Splv1Parser.TIMECHART:
        case Splv1Parser.MOVINGAVG:
        case Splv1Parser.WINDOW:
        case Splv1Parser.MODEL:
        case Splv1Parser.EVENTSTATS:
        case Splv1Parser.TOP:
        case Splv1Parser.RARE:
        case Splv1Parser.SORT:
        case Splv1Parser.BY:
        case Splv1Parser.IN:
        case Splv1Parser.WITH:
        case Splv1Parser.AS:
        case Splv1Parser.LIMIT:
        case Splv1Parser.FIELDS:
        case Splv1Parser.DEDUP:
        case Splv1Parser.RENAME:
        case Splv1Parser.REPLACE:
        case Splv1Parser.REX:
        case Splv1Parser.FIELD:
        case Splv1Parser.BUCKET:
        case Splv1Parser.SEARCH:
        case Splv1Parser.JSONPATH:
        case Splv1Parser.XMLPATH:
        case Splv1Parser.INPUT:
        case Splv1Parser.PATH:
        case Splv1Parser.MVEXPAND:
        case Splv1Parser.MVCOMBINE:
        case Splv1Parser.IPLOCATION:
        case Splv1Parser.PREFIX:
        case Splv1Parser.ALLFIELDS:
        case Splv1Parser.LANG:
        case Splv1Parser.APPEND:
        case Splv1Parser.APPEND_MAXTIME:
        case Splv1Parser.APPEND_MAXOUT:
        case Splv1Parser.APPEND_TIMEOUT:
        case Splv1Parser.EXPORT:
        case Splv1Parser.EXPORT_SINKTYPE:
        case Splv1Parser.EXPORT_BATCH_SIZE:
        case Splv1Parser.CONVERT:
        case Splv1Parser.TIMEFORMAT:
        case Splv1Parser.TRANSACTION:
        case Splv1Parser.TRANSACTION_STARTSWITH:
        case Splv1Parser.TRANSACTION_ENDSWITH:
        case Splv1Parser.TRANSACTION_MAXSPAN:
        case Splv1Parser.TRANSACTION_MAXPAUSE:
        case Splv1Parser.TRANSACTION_MAXEVENTS:
        case Splv1Parser.TRANSACTION_DELIM:
        case Splv1Parser.TRANSACTION_MVLIST:
        case Splv1Parser.TRANSACTION_NULLSTR:
        case Splv1Parser.TRANSACTION_MVRAW:
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
        case Splv1Parser.TIMELINE_INTERVAL:
        case Splv1Parser.TIMELINE_MIN_BOUND:
        case Splv1Parser.TIMELINE_MAX_BOUND:
        case Splv1Parser.COMPOSE:
        case Splv1Parser.COMPOSE_MODE:
        case Splv1Parser.COMPOSE_MODE_FAST:
        case Splv1Parser.COMPOSE_MODE_SMART:
        case Splv1Parser.COMPOSE_MODE_DETAILED:
        case Splv1Parser.COMPOSE_ACTIONS:
        case Splv1Parser.COMPOSE_ACTION_LIMIT:
        case Splv1Parser.COMPOSE_ACTION_HISTOGRAM:
        case Splv1Parser.COMPOSE_ACTION_SUMMARY:
        case Splv1Parser.COMPOSE_ACTION_RESULT:
        case Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY:
        case Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY:
        case Splv1Parser.ASYNC:
        case Splv1Parser.PARALLEL:
        case Splv1Parser.CHART:
        case Splv1Parser.OVER:
        case Splv1Parser.ADDTOTALS:
        case Splv1Parser.FIELDNAME:
        case Splv1Parser.DESC:
        case Splv1Parser.ASC:
        case Splv1Parser.TYPE:
        case Splv1Parser.MAX:
        	this.state = 773;
        	this.reserve_field();
        	break;
        case Splv1Parser.IDENTIFIER:
        	this.state = 774;
        	this.match(Splv1Parser.IDENTIFIER);
        	break;
        case Splv1Parser.IDENTIFIER_WITH_STAR:
        	this.state = 775;
        	this.match(Splv1Parser.IDENTIFIER_WITH_STAR);
        	break;
        case Splv1Parser.STAR:
        	this.state = 776;
        	this.match(Splv1Parser.STAR);
        	break;
        case Splv1Parser.RPAREN:
        	break;
        default:
        	break;
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Field_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_field_list;
    return this;
}

Field_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Field_listContext.prototype.constructor = Field_listContext;

Field_listContext.prototype.field = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(FieldContext);
    } else {
        return this.getTypedRuleContext(FieldContext,i);
    }
};

Field_listContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};


Field_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterField_list(this);
	}
};

Field_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitField_list(this);
	}
};




Splv1Parser.Field_listContext = Field_listContext;

Splv1Parser.prototype.field_list = function() {

    var localctx = new Field_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, Splv1Parser.RULE_field_list);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        this.field();
        this.state = 784;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===Splv1Parser.COMMA) {
            this.state = 780;
            this.match(Splv1Parser.COMMA);
            this.state = 781;
            this.field();
            this.state = 786;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Compose_valueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_compose_value;
    this.action_field = null; // Token
    return this;
}

Compose_valueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compose_valueContext.prototype.constructor = Compose_valueContext;

Compose_valueContext.prototype.COMPOSE_ACTION_LIMIT = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_LIMIT, 0);
};

Compose_valueContext.prototype.COMPOSE_ACTION_HISTOGRAM = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_HISTOGRAM, 0);
};

Compose_valueContext.prototype.COMPOSE_ACTION_SUMMARY = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_SUMMARY, 0);
};

Compose_valueContext.prototype.COMPOSE_ACTION_RESULT = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_RESULT, 0);
};

Compose_valueContext.prototype.COMPOSE_ACTION_SIMPLESUMMARY = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY, 0);
};

Compose_valueContext.prototype.COMPOSE_ACTION_MAPPINGSUMMARY = function() {
    return this.getToken(Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY, 0);
};

Compose_valueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterCompose_value(this);
	}
};

Compose_valueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitCompose_value(this);
	}
};




Splv1Parser.Compose_valueContext = Compose_valueContext;

Splv1Parser.prototype.compose_value = function() {

    var localctx = new Compose_valueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, Splv1Parser.RULE_compose_value);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 787;
        localctx.action_field = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (Splv1Parser.COMPOSE_ACTION_LIMIT - 84)) | (1 << (Splv1Parser.COMPOSE_ACTION_HISTOGRAM - 84)) | (1 << (Splv1Parser.COMPOSE_ACTION_SUMMARY - 84)) | (1 << (Splv1Parser.COMPOSE_ACTION_RESULT - 84)) | (1 << (Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY - 84)) | (1 << (Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY - 84)))) !== 0))) {
            localctx.action_field = this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_field;
    return this;
}

FieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FieldContext.prototype.constructor = FieldContext;

FieldContext.prototype.reserve_field = function() {
    return this.getTypedRuleContext(Reserve_fieldContext,0);
};

FieldContext.prototype.IDENTIFIER = function() {
    return this.getToken(Splv1Parser.IDENTIFIER, 0);
};

FieldContext.prototype.IDENTIFIER_WITH_STAR = function() {
    return this.getToken(Splv1Parser.IDENTIFIER_WITH_STAR, 0);
};

FieldContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

FieldContext.prototype.INT = function() {
    return this.getToken(Splv1Parser.INT, 0);
};

FieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterField(this);
	}
};

FieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitField(this);
	}
};




Splv1Parser.FieldContext = FieldContext;

Splv1Parser.prototype.field = function() {

    var localctx = new FieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, Splv1Parser.RULE_field);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.BINS:
        case Splv1Parser.SPAN:
        case Splv1Parser.START:
        case Splv1Parser.END:
        case Splv1Parser.ALIGN:
        case Splv1Parser.START_TIME:
        case Splv1Parser.END_TIME:
        case Splv1Parser.EVAL:
        case Splv1Parser.WHERE:
        case Splv1Parser.LIKE:
        case Splv1Parser.JOIN:
        case Splv1Parser.LOOKUP:
        case Splv1Parser.OUTPUT:
        case Splv1Parser.FROM:
        case Splv1Parser.STATS:
        case Splv1Parser.TIMECHART:
        case Splv1Parser.MOVINGAVG:
        case Splv1Parser.WINDOW:
        case Splv1Parser.MODEL:
        case Splv1Parser.EVENTSTATS:
        case Splv1Parser.TOP:
        case Splv1Parser.RARE:
        case Splv1Parser.SORT:
        case Splv1Parser.BY:
        case Splv1Parser.IN:
        case Splv1Parser.WITH:
        case Splv1Parser.AS:
        case Splv1Parser.LIMIT:
        case Splv1Parser.FIELDS:
        case Splv1Parser.DEDUP:
        case Splv1Parser.RENAME:
        case Splv1Parser.REPLACE:
        case Splv1Parser.REX:
        case Splv1Parser.FIELD:
        case Splv1Parser.BUCKET:
        case Splv1Parser.SEARCH:
        case Splv1Parser.JSONPATH:
        case Splv1Parser.XMLPATH:
        case Splv1Parser.INPUT:
        case Splv1Parser.PATH:
        case Splv1Parser.MVEXPAND:
        case Splv1Parser.MVCOMBINE:
        case Splv1Parser.IPLOCATION:
        case Splv1Parser.PREFIX:
        case Splv1Parser.ALLFIELDS:
        case Splv1Parser.LANG:
        case Splv1Parser.APPEND:
        case Splv1Parser.APPEND_MAXTIME:
        case Splv1Parser.APPEND_MAXOUT:
        case Splv1Parser.APPEND_TIMEOUT:
        case Splv1Parser.EXPORT:
        case Splv1Parser.EXPORT_SINKTYPE:
        case Splv1Parser.EXPORT_BATCH_SIZE:
        case Splv1Parser.CONVERT:
        case Splv1Parser.TIMEFORMAT:
        case Splv1Parser.TRANSACTION:
        case Splv1Parser.TRANSACTION_STARTSWITH:
        case Splv1Parser.TRANSACTION_ENDSWITH:
        case Splv1Parser.TRANSACTION_MAXSPAN:
        case Splv1Parser.TRANSACTION_MAXPAUSE:
        case Splv1Parser.TRANSACTION_MAXEVENTS:
        case Splv1Parser.TRANSACTION_DELIM:
        case Splv1Parser.TRANSACTION_MVLIST:
        case Splv1Parser.TRANSACTION_NULLSTR:
        case Splv1Parser.TRANSACTION_MVRAW:
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
        case Splv1Parser.TIMELINE_INTERVAL:
        case Splv1Parser.TIMELINE_MIN_BOUND:
        case Splv1Parser.TIMELINE_MAX_BOUND:
        case Splv1Parser.COMPOSE:
        case Splv1Parser.COMPOSE_MODE:
        case Splv1Parser.COMPOSE_MODE_FAST:
        case Splv1Parser.COMPOSE_MODE_SMART:
        case Splv1Parser.COMPOSE_MODE_DETAILED:
        case Splv1Parser.COMPOSE_ACTIONS:
        case Splv1Parser.COMPOSE_ACTION_LIMIT:
        case Splv1Parser.COMPOSE_ACTION_HISTOGRAM:
        case Splv1Parser.COMPOSE_ACTION_SUMMARY:
        case Splv1Parser.COMPOSE_ACTION_RESULT:
        case Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY:
        case Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY:
        case Splv1Parser.ASYNC:
        case Splv1Parser.PARALLEL:
        case Splv1Parser.CHART:
        case Splv1Parser.OVER:
        case Splv1Parser.ADDTOTALS:
        case Splv1Parser.FIELDNAME:
        case Splv1Parser.DESC:
        case Splv1Parser.ASC:
        case Splv1Parser.TYPE:
        case Splv1Parser.MAX:
            this.state = 789;
            this.reserve_field();
            break;
        case Splv1Parser.IDENTIFIER:
            this.state = 790;
            this.match(Splv1Parser.IDENTIFIER);
            break;
        case Splv1Parser.IDENTIFIER_WITH_STAR:
            this.state = 791;
            this.match(Splv1Parser.IDENTIFIER_WITH_STAR);
            break;
        case Splv1Parser.BOOL:
            this.state = 792;
            this.match(Splv1Parser.BOOL);
            break;
        case Splv1Parser.INT:
            this.state = 793;
            this.match(Splv1Parser.INT);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FuncNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_funcName;
    return this;
}

FuncNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncNameContext.prototype.constructor = FuncNameContext;

FuncNameContext.prototype.reserve_field = function() {
    return this.getTypedRuleContext(Reserve_fieldContext,0);
};

FuncNameContext.prototype.IDENTIFIER = function() {
    return this.getToken(Splv1Parser.IDENTIFIER, 0);
};

FuncNameContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

FuncNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterFuncName(this);
	}
};

FuncNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitFuncName(this);
	}
};




Splv1Parser.FuncNameContext = FuncNameContext;

Splv1Parser.prototype.funcName = function() {

    var localctx = new FuncNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, Splv1Parser.RULE_funcName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 799;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.BINS:
        case Splv1Parser.SPAN:
        case Splv1Parser.START:
        case Splv1Parser.END:
        case Splv1Parser.ALIGN:
        case Splv1Parser.START_TIME:
        case Splv1Parser.END_TIME:
        case Splv1Parser.EVAL:
        case Splv1Parser.WHERE:
        case Splv1Parser.LIKE:
        case Splv1Parser.JOIN:
        case Splv1Parser.LOOKUP:
        case Splv1Parser.OUTPUT:
        case Splv1Parser.FROM:
        case Splv1Parser.STATS:
        case Splv1Parser.TIMECHART:
        case Splv1Parser.MOVINGAVG:
        case Splv1Parser.WINDOW:
        case Splv1Parser.MODEL:
        case Splv1Parser.EVENTSTATS:
        case Splv1Parser.TOP:
        case Splv1Parser.RARE:
        case Splv1Parser.SORT:
        case Splv1Parser.BY:
        case Splv1Parser.IN:
        case Splv1Parser.WITH:
        case Splv1Parser.AS:
        case Splv1Parser.LIMIT:
        case Splv1Parser.FIELDS:
        case Splv1Parser.DEDUP:
        case Splv1Parser.RENAME:
        case Splv1Parser.REPLACE:
        case Splv1Parser.REX:
        case Splv1Parser.FIELD:
        case Splv1Parser.BUCKET:
        case Splv1Parser.SEARCH:
        case Splv1Parser.JSONPATH:
        case Splv1Parser.XMLPATH:
        case Splv1Parser.INPUT:
        case Splv1Parser.PATH:
        case Splv1Parser.MVEXPAND:
        case Splv1Parser.MVCOMBINE:
        case Splv1Parser.IPLOCATION:
        case Splv1Parser.PREFIX:
        case Splv1Parser.ALLFIELDS:
        case Splv1Parser.LANG:
        case Splv1Parser.APPEND:
        case Splv1Parser.APPEND_MAXTIME:
        case Splv1Parser.APPEND_MAXOUT:
        case Splv1Parser.APPEND_TIMEOUT:
        case Splv1Parser.EXPORT:
        case Splv1Parser.EXPORT_SINKTYPE:
        case Splv1Parser.EXPORT_BATCH_SIZE:
        case Splv1Parser.CONVERT:
        case Splv1Parser.TIMEFORMAT:
        case Splv1Parser.TRANSACTION:
        case Splv1Parser.TRANSACTION_STARTSWITH:
        case Splv1Parser.TRANSACTION_ENDSWITH:
        case Splv1Parser.TRANSACTION_MAXSPAN:
        case Splv1Parser.TRANSACTION_MAXPAUSE:
        case Splv1Parser.TRANSACTION_MAXEVENTS:
        case Splv1Parser.TRANSACTION_DELIM:
        case Splv1Parser.TRANSACTION_MVLIST:
        case Splv1Parser.TRANSACTION_NULLSTR:
        case Splv1Parser.TRANSACTION_MVRAW:
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
        case Splv1Parser.TIMELINE_INTERVAL:
        case Splv1Parser.TIMELINE_MIN_BOUND:
        case Splv1Parser.TIMELINE_MAX_BOUND:
        case Splv1Parser.COMPOSE:
        case Splv1Parser.COMPOSE_MODE:
        case Splv1Parser.COMPOSE_MODE_FAST:
        case Splv1Parser.COMPOSE_MODE_SMART:
        case Splv1Parser.COMPOSE_MODE_DETAILED:
        case Splv1Parser.COMPOSE_ACTIONS:
        case Splv1Parser.COMPOSE_ACTION_LIMIT:
        case Splv1Parser.COMPOSE_ACTION_HISTOGRAM:
        case Splv1Parser.COMPOSE_ACTION_SUMMARY:
        case Splv1Parser.COMPOSE_ACTION_RESULT:
        case Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY:
        case Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY:
        case Splv1Parser.ASYNC:
        case Splv1Parser.PARALLEL:
        case Splv1Parser.CHART:
        case Splv1Parser.OVER:
        case Splv1Parser.ADDTOTALS:
        case Splv1Parser.FIELDNAME:
        case Splv1Parser.DESC:
        case Splv1Parser.ASC:
        case Splv1Parser.TYPE:
        case Splv1Parser.MAX:
            this.state = 796;
            this.reserve_field();
            break;
        case Splv1Parser.IDENTIFIER:
            this.state = 797;
            this.match(Splv1Parser.IDENTIFIER);
            break;
        case Splv1Parser.BOOL:
            this.state = 798;
            this.match(Splv1Parser.BOOL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SparklineFuncContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_sparklineFunc;
    return this;
}

SparklineFuncContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SparklineFuncContext.prototype.constructor = SparklineFuncContext;

SparklineFuncContext.prototype.reserve_field = function() {
    return this.getTypedRuleContext(Reserve_fieldContext,0);
};

SparklineFuncContext.prototype.IDENTIFIER = function() {
    return this.getToken(Splv1Parser.IDENTIFIER, 0);
};

SparklineFuncContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterSparklineFunc(this);
	}
};

SparklineFuncContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitSparklineFunc(this);
	}
};




Splv1Parser.SparklineFuncContext = SparklineFuncContext;

Splv1Parser.prototype.sparklineFunc = function() {

    var localctx = new SparklineFuncContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, Splv1Parser.RULE_sparklineFunc);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 803;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.BINS:
        case Splv1Parser.SPAN:
        case Splv1Parser.START:
        case Splv1Parser.END:
        case Splv1Parser.ALIGN:
        case Splv1Parser.START_TIME:
        case Splv1Parser.END_TIME:
        case Splv1Parser.EVAL:
        case Splv1Parser.WHERE:
        case Splv1Parser.LIKE:
        case Splv1Parser.JOIN:
        case Splv1Parser.LOOKUP:
        case Splv1Parser.OUTPUT:
        case Splv1Parser.FROM:
        case Splv1Parser.STATS:
        case Splv1Parser.TIMECHART:
        case Splv1Parser.MOVINGAVG:
        case Splv1Parser.WINDOW:
        case Splv1Parser.MODEL:
        case Splv1Parser.EVENTSTATS:
        case Splv1Parser.TOP:
        case Splv1Parser.RARE:
        case Splv1Parser.SORT:
        case Splv1Parser.BY:
        case Splv1Parser.IN:
        case Splv1Parser.WITH:
        case Splv1Parser.AS:
        case Splv1Parser.LIMIT:
        case Splv1Parser.FIELDS:
        case Splv1Parser.DEDUP:
        case Splv1Parser.RENAME:
        case Splv1Parser.REPLACE:
        case Splv1Parser.REX:
        case Splv1Parser.FIELD:
        case Splv1Parser.BUCKET:
        case Splv1Parser.SEARCH:
        case Splv1Parser.JSONPATH:
        case Splv1Parser.XMLPATH:
        case Splv1Parser.INPUT:
        case Splv1Parser.PATH:
        case Splv1Parser.MVEXPAND:
        case Splv1Parser.MVCOMBINE:
        case Splv1Parser.IPLOCATION:
        case Splv1Parser.PREFIX:
        case Splv1Parser.ALLFIELDS:
        case Splv1Parser.LANG:
        case Splv1Parser.APPEND:
        case Splv1Parser.APPEND_MAXTIME:
        case Splv1Parser.APPEND_MAXOUT:
        case Splv1Parser.APPEND_TIMEOUT:
        case Splv1Parser.EXPORT:
        case Splv1Parser.EXPORT_SINKTYPE:
        case Splv1Parser.EXPORT_BATCH_SIZE:
        case Splv1Parser.CONVERT:
        case Splv1Parser.TIMEFORMAT:
        case Splv1Parser.TRANSACTION:
        case Splv1Parser.TRANSACTION_STARTSWITH:
        case Splv1Parser.TRANSACTION_ENDSWITH:
        case Splv1Parser.TRANSACTION_MAXSPAN:
        case Splv1Parser.TRANSACTION_MAXPAUSE:
        case Splv1Parser.TRANSACTION_MAXEVENTS:
        case Splv1Parser.TRANSACTION_DELIM:
        case Splv1Parser.TRANSACTION_MVLIST:
        case Splv1Parser.TRANSACTION_NULLSTR:
        case Splv1Parser.TRANSACTION_MVRAW:
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
        case Splv1Parser.TIMELINE_INTERVAL:
        case Splv1Parser.TIMELINE_MIN_BOUND:
        case Splv1Parser.TIMELINE_MAX_BOUND:
        case Splv1Parser.COMPOSE:
        case Splv1Parser.COMPOSE_MODE:
        case Splv1Parser.COMPOSE_MODE_FAST:
        case Splv1Parser.COMPOSE_MODE_SMART:
        case Splv1Parser.COMPOSE_MODE_DETAILED:
        case Splv1Parser.COMPOSE_ACTIONS:
        case Splv1Parser.COMPOSE_ACTION_LIMIT:
        case Splv1Parser.COMPOSE_ACTION_HISTOGRAM:
        case Splv1Parser.COMPOSE_ACTION_SUMMARY:
        case Splv1Parser.COMPOSE_ACTION_RESULT:
        case Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY:
        case Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY:
        case Splv1Parser.ASYNC:
        case Splv1Parser.PARALLEL:
        case Splv1Parser.CHART:
        case Splv1Parser.OVER:
        case Splv1Parser.ADDTOTALS:
        case Splv1Parser.FIELDNAME:
        case Splv1Parser.DESC:
        case Splv1Parser.ASC:
        case Splv1Parser.TYPE:
        case Splv1Parser.MAX:
            this.state = 801;
            this.reserve_field();
            break;
        case Splv1Parser.IDENTIFIER:
            this.state = 802;
            this.match(Splv1Parser.IDENTIFIER);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Eval_expressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_eval_expression;
    return this;
}

Eval_expressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_expressionContext.prototype.constructor = Eval_expressionContext;


 
Eval_expressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function Eval_value_expressionContext(parser, ctx) {
	Eval_expressionContext.call(this, parser);
    Eval_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Eval_value_expressionContext.prototype = Object.create(Eval_expressionContext.prototype);
Eval_value_expressionContext.prototype.constructor = Eval_value_expressionContext;

Splv1Parser.Eval_value_expressionContext = Eval_value_expressionContext;

Eval_value_expressionContext.prototype.eval_primaryValue = function() {
    return this.getTypedRuleContext(Eval_primaryValueContext,0);
};
Eval_value_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_value_expression(this);
	}
};

Eval_value_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_value_expression(this);
	}
};


function Eval_unary_expressionContext(parser, ctx) {
	Eval_expressionContext.call(this, parser);
    this.op = null; // Token;
    Eval_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Eval_unary_expressionContext.prototype = Object.create(Eval_expressionContext.prototype);
Eval_unary_expressionContext.prototype.constructor = Eval_unary_expressionContext;

Splv1Parser.Eval_unary_expressionContext = Eval_unary_expressionContext;

Eval_unary_expressionContext.prototype.eval_expression = function() {
    return this.getTypedRuleContext(Eval_expressionContext,0);
};

Eval_unary_expressionContext.prototype.MINUS = function() {
    return this.getToken(Splv1Parser.MINUS, 0);
};

Eval_unary_expressionContext.prototype.PLUS = function() {
    return this.getToken(Splv1Parser.PLUS, 0);
};
Eval_unary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_unary_expression(this);
	}
};

Eval_unary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_unary_expression(this);
	}
};


function Eval_parenthesized_expressionContext(parser, ctx) {
	Eval_expressionContext.call(this, parser);
    Eval_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Eval_parenthesized_expressionContext.prototype = Object.create(Eval_expressionContext.prototype);
Eval_parenthesized_expressionContext.prototype.constructor = Eval_parenthesized_expressionContext;

Splv1Parser.Eval_parenthesized_expressionContext = Eval_parenthesized_expressionContext;

Eval_parenthesized_expressionContext.prototype.LPAREN = function() {
    return this.getToken(Splv1Parser.LPAREN, 0);
};

Eval_parenthesized_expressionContext.prototype.eval_expression = function() {
    return this.getTypedRuleContext(Eval_expressionContext,0);
};

Eval_parenthesized_expressionContext.prototype.RPAREN = function() {
    return this.getToken(Splv1Parser.RPAREN, 0);
};
Eval_parenthesized_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_parenthesized_expression(this);
	}
};

Eval_parenthesized_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_parenthesized_expression(this);
	}
};


function Eval_binary_expressionContext(parser, ctx) {
	Eval_expressionContext.call(this, parser);
    this.left = null; // Eval_expressionContext;
    this.op = null; // Token;
    this.right = null; // Eval_expressionContext;
    Eval_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Eval_binary_expressionContext.prototype = Object.create(Eval_expressionContext.prototype);
Eval_binary_expressionContext.prototype.constructor = Eval_binary_expressionContext;

Splv1Parser.Eval_binary_expressionContext = Eval_binary_expressionContext;

Eval_binary_expressionContext.prototype.eval_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Eval_expressionContext);
    } else {
        return this.getTypedRuleContext(Eval_expressionContext,i);
    }
};

Eval_binary_expressionContext.prototype.STAR = function() {
    return this.getToken(Splv1Parser.STAR, 0);
};

Eval_binary_expressionContext.prototype.SLASH = function() {
    return this.getToken(Splv1Parser.SLASH, 0);
};

Eval_binary_expressionContext.prototype.PERCENT = function() {
    return this.getToken(Splv1Parser.PERCENT, 0);
};

Eval_binary_expressionContext.prototype.PLUS = function() {
    return this.getToken(Splv1Parser.PLUS, 0);
};

Eval_binary_expressionContext.prototype.MINUS = function() {
    return this.getToken(Splv1Parser.MINUS, 0);
};

Eval_binary_expressionContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Eval_binary_expressionContext.prototype.NEQJ = function() {
    return this.getToken(Splv1Parser.NEQJ, 0);
};

Eval_binary_expressionContext.prototype.LT = function() {
    return this.getToken(Splv1Parser.LT, 0);
};

Eval_binary_expressionContext.prototype.LTE = function() {
    return this.getToken(Splv1Parser.LTE, 0);
};

Eval_binary_expressionContext.prototype.GT = function() {
    return this.getToken(Splv1Parser.GT, 0);
};

Eval_binary_expressionContext.prototype.GTE = function() {
    return this.getToken(Splv1Parser.GTE, 0);
};

Eval_binary_expressionContext.prototype.AND = function() {
    return this.getToken(Splv1Parser.AND, 0);
};

Eval_binary_expressionContext.prototype.OR = function() {
    return this.getToken(Splv1Parser.OR, 0);
};
Eval_binary_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_binary_expression(this);
	}
};

Eval_binary_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_binary_expression(this);
	}
};


function Eval_not_expressionContext(parser, ctx) {
	Eval_expressionContext.call(this, parser);
    Eval_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Eval_not_expressionContext.prototype = Object.create(Eval_expressionContext.prototype);
Eval_not_expressionContext.prototype.constructor = Eval_not_expressionContext;

Splv1Parser.Eval_not_expressionContext = Eval_not_expressionContext;

Eval_not_expressionContext.prototype.NOT = function() {
    return this.getToken(Splv1Parser.NOT, 0);
};

Eval_not_expressionContext.prototype.eval_expression = function() {
    return this.getTypedRuleContext(Eval_expressionContext,0);
};
Eval_not_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_not_expression(this);
	}
};

Eval_not_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_not_expression(this);
	}
};


function Eval_like_expressionContext(parser, ctx) {
	Eval_expressionContext.call(this, parser);
    this.like = null; // Token;
    Eval_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Eval_like_expressionContext.prototype = Object.create(Eval_expressionContext.prototype);
Eval_like_expressionContext.prototype.constructor = Eval_like_expressionContext;

Splv1Parser.Eval_like_expressionContext = Eval_like_expressionContext;

Eval_like_expressionContext.prototype.eval_field = function() {
    return this.getTypedRuleContext(Eval_fieldContext,0);
};

Eval_like_expressionContext.prototype.LIKE = function() {
    return this.getToken(Splv1Parser.LIKE, 0);
};

Eval_like_expressionContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};
Eval_like_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_like_expression(this);
	}
};

Eval_like_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_like_expression(this);
	}
};


function Eval_function_expressionContext(parser, ctx) {
	Eval_expressionContext.call(this, parser);
    Eval_expressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

Eval_function_expressionContext.prototype = Object.create(Eval_expressionContext.prototype);
Eval_function_expressionContext.prototype.constructor = Eval_function_expressionContext;

Splv1Parser.Eval_function_expressionContext = Eval_function_expressionContext;

Eval_function_expressionContext.prototype.funcName = function() {
    return this.getTypedRuleContext(FuncNameContext,0);
};

Eval_function_expressionContext.prototype.LPAREN = function() {
    return this.getToken(Splv1Parser.LPAREN, 0);
};

Eval_function_expressionContext.prototype.RPAREN = function() {
    return this.getToken(Splv1Parser.RPAREN, 0);
};

Eval_function_expressionContext.prototype.eval_expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Eval_expressionContext);
    } else {
        return this.getTypedRuleContext(Eval_expressionContext,i);
    }
};

Eval_function_expressionContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.COMMA);
    } else {
        return this.getToken(Splv1Parser.COMMA, i);
    }
};

Eval_function_expressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_function_expression(this);
	}
};

Eval_function_expressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_function_expression(this);
	}
};



Splv1Parser.prototype.eval_expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new Eval_expressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 98;
    this.enterRecursionRule(localctx, 98, Splv1Parser.RULE_eval_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 833;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            localctx = new Eval_function_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 806;
            this.funcName();
            this.state = 807;
            this.match(Splv1Parser.LPAREN);
            this.state = 816;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME) | (1 << Splv1Parser.EVAL) | (1 << Splv1Parser.WHERE) | (1 << Splv1Parser.LIKE) | (1 << Splv1Parser.JOIN) | (1 << Splv1Parser.LOOKUP) | (1 << Splv1Parser.OUTPUT) | (1 << Splv1Parser.FROM) | (1 << Splv1Parser.STATS) | (1 << Splv1Parser.TIMECHART) | (1 << Splv1Parser.MOVINGAVG) | (1 << Splv1Parser.WINDOW) | (1 << Splv1Parser.MODEL) | (1 << Splv1Parser.EVENTSTATS) | (1 << Splv1Parser.TOP) | (1 << Splv1Parser.RARE) | (1 << Splv1Parser.SORT) | (1 << Splv1Parser.BY) | (1 << Splv1Parser.IN))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (Splv1Parser.WITH - 32)) | (1 << (Splv1Parser.AS - 32)) | (1 << (Splv1Parser.LIMIT - 32)) | (1 << (Splv1Parser.FIELDS - 32)) | (1 << (Splv1Parser.DEDUP - 32)) | (1 << (Splv1Parser.RENAME - 32)) | (1 << (Splv1Parser.REPLACE - 32)) | (1 << (Splv1Parser.REX - 32)) | (1 << (Splv1Parser.FIELD - 32)) | (1 << (Splv1Parser.BUCKET - 32)) | (1 << (Splv1Parser.SEARCH - 32)) | (1 << (Splv1Parser.JSONPATH - 32)) | (1 << (Splv1Parser.XMLPATH - 32)) | (1 << (Splv1Parser.INPUT - 32)) | (1 << (Splv1Parser.PATH - 32)) | (1 << (Splv1Parser.MVEXPAND - 32)) | (1 << (Splv1Parser.MVCOMBINE - 32)) | (1 << (Splv1Parser.IPLOCATION - 32)) | (1 << (Splv1Parser.PREFIX - 32)) | (1 << (Splv1Parser.ALLFIELDS - 32)) | (1 << (Splv1Parser.LANG - 32)) | (1 << (Splv1Parser.APPEND - 32)) | (1 << (Splv1Parser.APPEND_MAXTIME - 32)) | (1 << (Splv1Parser.APPEND_MAXOUT - 32)) | (1 << (Splv1Parser.APPEND_TIMEOUT - 32)) | (1 << (Splv1Parser.EXPORT - 32)) | (1 << (Splv1Parser.EXPORT_SINKTYPE - 32)) | (1 << (Splv1Parser.EXPORT_BATCH_SIZE - 32)) | (1 << (Splv1Parser.CONVERT - 32)) | (1 << (Splv1Parser.TIMEFORMAT - 32)) | (1 << (Splv1Parser.TRANSACTION - 32)) | (1 << (Splv1Parser.TRANSACTION_STARTSWITH - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (Splv1Parser.TRANSACTION_ENDSWITH - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXSPAN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXPAUSE - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_DELIM - 64)) | (1 << (Splv1Parser.TRANSACTION_MVLIST - 64)) | (1 << (Splv1Parser.TRANSACTION_NULLSTR - 64)) | (1 << (Splv1Parser.TRANSACTION_MVRAW - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENTXN - 64)) | (1 << (Splv1Parser.TRANSACTION_MAXOPENEVENTS - 64)) | (1 << (Splv1Parser.TRANSACTION_KEEPEVICTED - 64)) | (1 << (Splv1Parser.TIMELINE_INTERVAL - 64)) | (1 << (Splv1Parser.TIMELINE_MIN_BOUND - 64)) | (1 << (Splv1Parser.TIMELINE_MAX_BOUND - 64)) | (1 << (Splv1Parser.COMPOSE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_FAST - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_SMART - 64)) | (1 << (Splv1Parser.COMPOSE_MODE_DETAILED - 64)) | (1 << (Splv1Parser.COMPOSE_ACTIONS - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_LIMIT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_HISTOGRAM - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_RESULT - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY - 64)) | (1 << (Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY - 64)) | (1 << (Splv1Parser.ASYNC - 64)) | (1 << (Splv1Parser.PARALLEL - 64)) | (1 << (Splv1Parser.CHART - 64)) | (1 << (Splv1Parser.OVER - 64)) | (1 << (Splv1Parser.ADDTOTALS - 64)) | (1 << (Splv1Parser.FIELDNAME - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (Splv1Parser.LPAREN - 96)) | (1 << (Splv1Parser.PLUS - 96)) | (1 << (Splv1Parser.MINUS - 96)) | (1 << (Splv1Parser.NOT - 96)) | (1 << (Splv1Parser.DESC - 96)) | (1 << (Splv1Parser.ASC - 96)) | (1 << (Splv1Parser.TYPE - 96)) | (1 << (Splv1Parser.MAX - 96)) | (1 << (Splv1Parser.BOOL - 96)) | (1 << (Splv1Parser.INT - 96)) | (1 << (Splv1Parser.NUM - 96)) | (1 << (Splv1Parser.IDENTIFIER - 96)) | (1 << (Splv1Parser.QUOTED_STRING - 96)))) !== 0)) {
                this.state = 808;
                this.eval_expression(0);
                this.state = 813;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===Splv1Parser.COMMA) {
                    this.state = 809;
                    this.match(Splv1Parser.COMMA);
                    this.state = 810;
                    this.eval_expression(0);
                    this.state = 815;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 818;
            this.match(Splv1Parser.RPAREN);
            break;

        case 2:
            localctx = new Eval_like_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 820;
            this.eval_field();
            this.state = 821;
            this.match(Splv1Parser.LIKE);
            this.state = 822;
            localctx.like = this.match(Splv1Parser.QUOTED_STRING);
            break;

        case 3:
            localctx = new Eval_value_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 824;
            this.eval_primaryValue();
            break;

        case 4:
            localctx = new Eval_unary_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 825;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===Splv1Parser.PLUS || _la===Splv1Parser.MINUS)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 826;
            this.eval_expression(8);
            break;

        case 5:
            localctx = new Eval_parenthesized_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 827;
            this.match(Splv1Parser.LPAREN);
            this.state = 828;
            this.eval_expression(0);
            this.state = 829;
            this.match(Splv1Parser.RPAREN);
            break;

        case 6:
            localctx = new Eval_not_expressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 831;
            this.match(Splv1Parser.NOT);
            this.state = 832;
            this.eval_expression(1);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 852;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,101,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 850;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new Eval_binary_expressionContext(this, new Eval_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, Splv1Parser.RULE_eval_expression);
                    this.state = 835;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 836;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 102)) & ~0x1f) == 0 && ((1 << (_la - 102)) & ((1 << (Splv1Parser.STAR - 102)) | (1 << (Splv1Parser.SLASH - 102)) | (1 << (Splv1Parser.PERCENT - 102)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 837;
                    localctx.right = this.eval_expression(8);
                    break;

                case 2:
                    localctx = new Eval_binary_expressionContext(this, new Eval_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, Splv1Parser.RULE_eval_expression);
                    this.state = 838;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 839;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===Splv1Parser.PLUS || _la===Splv1Parser.MINUS)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 840;
                    localctx.right = this.eval_expression(7);
                    break;

                case 3:
                    localctx = new Eval_binary_expressionContext(this, new Eval_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, Splv1Parser.RULE_eval_expression);
                    this.state = 841;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 842;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.EQ) | (1 << Splv1Parser.NEQJ) | (1 << Splv1Parser.LT) | (1 << Splv1Parser.LTE) | (1 << Splv1Parser.GT) | (1 << Splv1Parser.GTE))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 843;
                    localctx.right = this.eval_expression(6);
                    break;

                case 4:
                    localctx = new Eval_binary_expressionContext(this, new Eval_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, Splv1Parser.RULE_eval_expression);
                    this.state = 844;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 845;
                    localctx.op = this.match(Splv1Parser.AND);
                    this.state = 846;
                    localctx.right = this.eval_expression(4);
                    break;

                case 5:
                    localctx = new Eval_binary_expressionContext(this, new Eval_expressionContext(this, _parentctx, _parentState));
                    localctx.left = _prevctx;
                    this.pushNewRecursionContext(localctx, _startState, Splv1Parser.RULE_eval_expression);
                    this.state = 847;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 848;
                    localctx.op = this.match(Splv1Parser.OR);
                    this.state = 849;
                    localctx.right = this.eval_expression(3);
                    break;

                } 
            }
            this.state = 854;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,101,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function Eval_primaryValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_eval_primaryValue;
    return this;
}

Eval_primaryValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_primaryValueContext.prototype.constructor = Eval_primaryValueContext;

Eval_primaryValueContext.prototype.eval_fvalue = function() {
    return this.getTypedRuleContext(Eval_fvalueContext,0);
};

Eval_primaryValueContext.prototype.eval_field = function() {
    return this.getTypedRuleContext(Eval_fieldContext,0);
};

Eval_primaryValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_primaryValue(this);
	}
};

Eval_primaryValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_primaryValue(this);
	}
};




Splv1Parser.Eval_primaryValueContext = Eval_primaryValueContext;

Splv1Parser.prototype.eval_primaryValue = function() {

    var localctx = new Eval_primaryValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, Splv1Parser.RULE_eval_primaryValue);
    try {
        this.state = 857;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 855;
            this.eval_fvalue();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 856;
            this.eval_field();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Eval_fvalueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_eval_fvalue;
    return this;
}

Eval_fvalueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_fvalueContext.prototype.constructor = Eval_fvalueContext;

Eval_fvalueContext.prototype.INT = function() {
    return this.getToken(Splv1Parser.INT, 0);
};

Eval_fvalueContext.prototype.NUM = function() {
    return this.getToken(Splv1Parser.NUM, 0);
};

Eval_fvalueContext.prototype.QUOTED_STRING = function() {
    return this.getToken(Splv1Parser.QUOTED_STRING, 0);
};

Eval_fvalueContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

Eval_fvalueContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_fvalue(this);
	}
};

Eval_fvalueContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_fvalue(this);
	}
};




Splv1Parser.Eval_fvalueContext = Eval_fvalueContext;

Splv1Parser.prototype.eval_fvalue = function() {

    var localctx = new Eval_fvalueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, Splv1Parser.RULE_eval_fvalue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 859;
        _la = this._input.LA(1);
        if(!(((((_la - 120)) & ~0x1f) == 0 && ((1 << (_la - 120)) & ((1 << (Splv1Parser.BOOL - 120)) | (1 << (Splv1Parser.INT - 120)) | (1 << (Splv1Parser.NUM - 120)) | (1 << (Splv1Parser.QUOTED_STRING - 120)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Eval_fieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_eval_field;
    return this;
}

Eval_fieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_fieldContext.prototype.constructor = Eval_fieldContext;

Eval_fieldContext.prototype.IDENTIFIER = function() {
    return this.getToken(Splv1Parser.IDENTIFIER, 0);
};

Eval_fieldContext.prototype.BOOL = function() {
    return this.getToken(Splv1Parser.BOOL, 0);
};

Eval_fieldContext.prototype.reserve_field = function() {
    return this.getTypedRuleContext(Reserve_fieldContext,0);
};

Eval_fieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterEval_field(this);
	}
};

Eval_fieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitEval_field(this);
	}
};




Splv1Parser.Eval_fieldContext = Eval_fieldContext;

Splv1Parser.prototype.eval_field = function() {

    var localctx = new Eval_fieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, Splv1Parser.RULE_eval_field);
    try {
        this.state = 864;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case Splv1Parser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 861;
            this.match(Splv1Parser.IDENTIFIER);
            break;
        case Splv1Parser.BOOL:
            this.enterOuterAlt(localctx, 2);
            this.state = 862;
            this.match(Splv1Parser.BOOL);
            break;
        case Splv1Parser.BINS:
        case Splv1Parser.SPAN:
        case Splv1Parser.START:
        case Splv1Parser.END:
        case Splv1Parser.ALIGN:
        case Splv1Parser.START_TIME:
        case Splv1Parser.END_TIME:
        case Splv1Parser.EVAL:
        case Splv1Parser.WHERE:
        case Splv1Parser.LIKE:
        case Splv1Parser.JOIN:
        case Splv1Parser.LOOKUP:
        case Splv1Parser.OUTPUT:
        case Splv1Parser.FROM:
        case Splv1Parser.STATS:
        case Splv1Parser.TIMECHART:
        case Splv1Parser.MOVINGAVG:
        case Splv1Parser.WINDOW:
        case Splv1Parser.MODEL:
        case Splv1Parser.EVENTSTATS:
        case Splv1Parser.TOP:
        case Splv1Parser.RARE:
        case Splv1Parser.SORT:
        case Splv1Parser.BY:
        case Splv1Parser.IN:
        case Splv1Parser.WITH:
        case Splv1Parser.AS:
        case Splv1Parser.LIMIT:
        case Splv1Parser.FIELDS:
        case Splv1Parser.DEDUP:
        case Splv1Parser.RENAME:
        case Splv1Parser.REPLACE:
        case Splv1Parser.REX:
        case Splv1Parser.FIELD:
        case Splv1Parser.BUCKET:
        case Splv1Parser.SEARCH:
        case Splv1Parser.JSONPATH:
        case Splv1Parser.XMLPATH:
        case Splv1Parser.INPUT:
        case Splv1Parser.PATH:
        case Splv1Parser.MVEXPAND:
        case Splv1Parser.MVCOMBINE:
        case Splv1Parser.IPLOCATION:
        case Splv1Parser.PREFIX:
        case Splv1Parser.ALLFIELDS:
        case Splv1Parser.LANG:
        case Splv1Parser.APPEND:
        case Splv1Parser.APPEND_MAXTIME:
        case Splv1Parser.APPEND_MAXOUT:
        case Splv1Parser.APPEND_TIMEOUT:
        case Splv1Parser.EXPORT:
        case Splv1Parser.EXPORT_SINKTYPE:
        case Splv1Parser.EXPORT_BATCH_SIZE:
        case Splv1Parser.CONVERT:
        case Splv1Parser.TIMEFORMAT:
        case Splv1Parser.TRANSACTION:
        case Splv1Parser.TRANSACTION_STARTSWITH:
        case Splv1Parser.TRANSACTION_ENDSWITH:
        case Splv1Parser.TRANSACTION_MAXSPAN:
        case Splv1Parser.TRANSACTION_MAXPAUSE:
        case Splv1Parser.TRANSACTION_MAXEVENTS:
        case Splv1Parser.TRANSACTION_DELIM:
        case Splv1Parser.TRANSACTION_MVLIST:
        case Splv1Parser.TRANSACTION_NULLSTR:
        case Splv1Parser.TRANSACTION_MVRAW:
        case Splv1Parser.TRANSACTION_MAXOPENTXN:
        case Splv1Parser.TRANSACTION_MAXOPENEVENTS:
        case Splv1Parser.TRANSACTION_KEEPEVICTED:
        case Splv1Parser.TIMELINE_INTERVAL:
        case Splv1Parser.TIMELINE_MIN_BOUND:
        case Splv1Parser.TIMELINE_MAX_BOUND:
        case Splv1Parser.COMPOSE:
        case Splv1Parser.COMPOSE_MODE:
        case Splv1Parser.COMPOSE_MODE_FAST:
        case Splv1Parser.COMPOSE_MODE_SMART:
        case Splv1Parser.COMPOSE_MODE_DETAILED:
        case Splv1Parser.COMPOSE_ACTIONS:
        case Splv1Parser.COMPOSE_ACTION_LIMIT:
        case Splv1Parser.COMPOSE_ACTION_HISTOGRAM:
        case Splv1Parser.COMPOSE_ACTION_SUMMARY:
        case Splv1Parser.COMPOSE_ACTION_RESULT:
        case Splv1Parser.COMPOSE_ACTION_SIMPLESUMMARY:
        case Splv1Parser.COMPOSE_ACTION_MAPPINGSUMMARY:
        case Splv1Parser.ASYNC:
        case Splv1Parser.PARALLEL:
        case Splv1Parser.CHART:
        case Splv1Parser.OVER:
        case Splv1Parser.ADDTOTALS:
        case Splv1Parser.FIELDNAME:
        case Splv1Parser.DESC:
        case Splv1Parser.ASC:
        case Splv1Parser.TYPE:
        case Splv1Parser.MAX:
            this.enterOuterAlt(localctx, 3);
            this.state = 863;
            this.reserve_field();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Timeline_optionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_timeline_options;
    this.interval = null; // Signed_intContext
    this.minBound = null; // Signed_intContext
    this.maxBound = null; // Signed_intContext
    return this;
}

Timeline_optionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Timeline_optionsContext.prototype.constructor = Timeline_optionsContext;

Timeline_optionsContext.prototype.TIMELINE_INTERVAL = function() {
    return this.getToken(Splv1Parser.TIMELINE_INTERVAL, 0);
};

Timeline_optionsContext.prototype.EQ = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(Splv1Parser.EQ);
    } else {
        return this.getToken(Splv1Parser.EQ, i);
    }
};


Timeline_optionsContext.prototype.TIMELINE_MIN_BOUND = function() {
    return this.getToken(Splv1Parser.TIMELINE_MIN_BOUND, 0);
};

Timeline_optionsContext.prototype.TIMELINE_MAX_BOUND = function() {
    return this.getToken(Splv1Parser.TIMELINE_MAX_BOUND, 0);
};

Timeline_optionsContext.prototype.signed_int = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Signed_intContext);
    } else {
        return this.getTypedRuleContext(Signed_intContext,i);
    }
};

Timeline_optionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterTimeline_options(this);
	}
};

Timeline_optionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitTimeline_options(this);
	}
};




Splv1Parser.Timeline_optionsContext = Timeline_optionsContext;

Splv1Parser.prototype.timeline_options = function() {

    var localctx = new Timeline_optionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, Splv1Parser.RULE_timeline_options);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 866;
        this.match(Splv1Parser.TIMELINE_INTERVAL);
        this.state = 867;
        this.match(Splv1Parser.EQ);
        this.state = 868;
        localctx.interval = this.signed_int();
        this.state = 869;
        this.match(Splv1Parser.TIMELINE_MIN_BOUND);
        this.state = 870;
        this.match(Splv1Parser.EQ);
        this.state = 871;
        localctx.minBound = this.signed_int();
        this.state = 872;
        this.match(Splv1Parser.TIMELINE_MAX_BOUND);
        this.state = 873;
        this.match(Splv1Parser.EQ);
        this.state = 874;
        localctx.maxBound = this.signed_int();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Chart_optionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_chart_option;
    this.limit = null; // Signed_intContext
    return this;
}

Chart_optionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Chart_optionContext.prototype.constructor = Chart_optionContext;

Chart_optionContext.prototype.LIMIT = function() {
    return this.getToken(Splv1Parser.LIMIT, 0);
};

Chart_optionContext.prototype.EQ = function() {
    return this.getToken(Splv1Parser.EQ, 0);
};

Chart_optionContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

Chart_optionContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterChart_option(this);
	}
};

Chart_optionContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitChart_option(this);
	}
};




Splv1Parser.Chart_optionContext = Chart_optionContext;

Splv1Parser.prototype.chart_option = function() {

    var localctx = new Chart_optionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, Splv1Parser.RULE_chart_option);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.match(Splv1Parser.LIMIT);
        this.state = 877;
        this.match(Splv1Parser.EQ);
        this.state = 878;
        localctx.limit = this.signed_int();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Row_splitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_row_split;
    return this;
}

Row_splitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Row_splitContext.prototype.constructor = Row_splitContext;

Row_splitContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Row_splitContext.prototype.bucket_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bucket_optionContext);
    } else {
        return this.getTypedRuleContext(Bucket_optionContext,i);
    }
};

Row_splitContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterRow_split(this);
	}
};

Row_splitContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitRow_split(this);
	}
};




Splv1Parser.Row_splitContext = Row_splitContext;

Splv1Parser.prototype.row_split = function() {

    var localctx = new Row_splitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, Splv1Parser.RULE_row_split);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 880;
        this.field();
        this.state = 884;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 881;
                this.bucket_option(); 
            }
            this.state = 886;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function Column_splitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = Splv1Parser.RULE_column_split;
    return this;
}

Column_splitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Column_splitContext.prototype.constructor = Column_splitContext;

Column_splitContext.prototype.field = function() {
    return this.getTypedRuleContext(FieldContext,0);
};

Column_splitContext.prototype.bucket_option = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Bucket_optionContext);
    } else {
        return this.getTypedRuleContext(Bucket_optionContext,i);
    }
};

Column_splitContext.prototype.enterRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.enterColumn_split(this);
	}
};

Column_splitContext.prototype.exitRule = function(listener) {
    if(listener instanceof Splv1ParserListener ) {
        listener.exitColumn_split(this);
	}
};




Splv1Parser.Column_splitContext = Column_splitContext;

Splv1Parser.prototype.column_split = function() {

    var localctx = new Column_splitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, Splv1Parser.RULE_column_split);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 887;
        this.field();
        this.state = 891;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Splv1Parser.BINS) | (1 << Splv1Parser.SPAN) | (1 << Splv1Parser.START) | (1 << Splv1Parser.END) | (1 << Splv1Parser.ALIGN) | (1 << Splv1Parser.START_TIME) | (1 << Splv1Parser.END_TIME))) !== 0)) {
            this.state = 888;
            this.bucket_option();
            this.state = 893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


Splv1Parser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 33:
			return this.search_expression_sempred(localctx, predIndex);
	case 49:
			return this.eval_expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

Splv1Parser.prototype.search_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 4);
		case 1:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

Splv1Parser.prototype.eval_expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 2:
			return this.precpred(this._ctx, 7);
		case 3:
			return this.precpred(this._ctx, 6);
		case 4:
			return this.precpred(this._ctx, 5);
		case 5:
			return this.precpred(this._ctx, 3);
		case 6:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.Splv1Parser = Splv1Parser;
